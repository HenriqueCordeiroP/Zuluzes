
Zuluzes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08006a68  08006a68  00007a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b70  08006b70  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006b70  08006b70  00007b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b78  08006b78  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b78  08006b78  00007b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b7c  08006b7c  00007b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006b80  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046cc  20000060  08006be0  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000472c  08006be0  0000872c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016994  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000302b  00000000  00000000  0001ea24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  00021a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f1c  00000000  00000000  00022dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283b2  00000000  00000000  00023cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166b9  00000000  00000000  0004c08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fadc1  00000000  00000000  00062747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d508  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005724  00000000  00000000  0015d54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00162c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a50 	.word	0x08006a50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006a50 	.word	0x08006a50

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4a07      	ldr	r2, [pc, #28]	@ (8000d78 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	4a06      	ldr	r2, [pc, #24]	@ (8000d7c <vApplicationGetIdleTaskMemory+0x30>)
 8000d62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2280      	movs	r2, #128	@ 0x80
 8000d68:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	2000007c 	.word	0x2000007c
 8000d7c:	2000011c 	.word	0x2000011c

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b5b0      	push	{r4, r5, r7, lr}
 8000d82:	b08a      	sub	sp, #40	@ 0x28
 8000d84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d86:	f000 fdd5 	bl	8001934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8a:	f000 f84f 	bl	8000e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8e:	f000 f91d 	bl	8000fcc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d92:	f000 f8eb 	bl	8000f6c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d96:	f000 f89b 	bl	8000ed0 <MX_TIM2_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  HAL_TIM_Base_Start(&htim2);
 8000d9a:	481b      	ldr	r0, [pc, #108]	@ (8000e08 <main+0x88>)
 8000d9c:	f002 fc70 	bl	8003680 <HAL_TIM_Base_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000da0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <main+0x8c>)
 8000da2:	1d3c      	adds	r4, r7, #4
 8000da4:	461d      	mov	r5, r3
 8000da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000daa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f003 fee2 	bl	8004b80 <osThreadCreate>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4a14      	ldr	r2, [pc, #80]	@ (8000e10 <main+0x90>)
 8000dc0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

	  xTaskCreate(PushupCounterTask,
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	9301      	str	r3, [sp, #4]
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	2280      	movs	r2, #128	@ 0x80
 8000dce:	4911      	ldr	r1, [pc, #68]	@ (8000e14 <main+0x94>)
 8000dd0:	4811      	ldr	r0, [pc, #68]	@ (8000e18 <main+0x98>)
 8000dd2:	f004 f849 	bl	8004e68 <xTaskCreate>
	  configMINIMAL_STACK_SIZE,
	  NULL,
	  1,
	  NULL);

	  xTaskCreate(AreButtonsPressedTask,
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	9301      	str	r3, [sp, #4]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	2300      	movs	r3, #0
 8000de0:	2280      	movs	r2, #128	@ 0x80
 8000de2:	490e      	ldr	r1, [pc, #56]	@ (8000e1c <main+0x9c>)
 8000de4:	480e      	ldr	r0, [pc, #56]	@ (8000e20 <main+0xa0>)
 8000de6:	f004 f83f 	bl	8004e68 <xTaskCreate>
	  configMINIMAL_STACK_SIZE,
	  NULL,
	  tskIDLE_PRIORITY,
	  NULL);

	  xTaskCreate(LedCounterTask,
 8000dea:	2300      	movs	r3, #0
 8000dec:	9301      	str	r3, [sp, #4]
 8000dee:	2300      	movs	r3, #0
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2300      	movs	r3, #0
 8000df4:	2280      	movs	r2, #128	@ 0x80
 8000df6:	490b      	ldr	r1, [pc, #44]	@ (8000e24 <main+0xa4>)
 8000df8:	480b      	ldr	r0, [pc, #44]	@ (8000e28 <main+0xa8>)
 8000dfa:	f004 f835 	bl	8004e68 <xTaskCreate>
	  NULL);

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000dfe:	f003 feb8 	bl	8004b72 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e02:	bf00      	nop
 8000e04:	e7fd      	b.n	8000e02 <main+0x82>
 8000e06:	bf00      	nop
 8000e08:	2000031c 	.word	0x2000031c
 8000e0c:	08006ab0 	.word	0x08006ab0
 8000e10:	200003f0 	.word	0x200003f0
 8000e14:	08006a68 	.word	0x08006a68
 8000e18:	0800113d 	.word	0x0800113d
 8000e1c:	08006a7c 	.word	0x08006a7c
 8000e20:	08001101 	.word	0x08001101
 8000e24:	08006a94 	.word	0x08006a94
 8000e28:	08001565 	.word	0x08001565

08000e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b096      	sub	sp, #88	@ 0x58
 8000e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	2244      	movs	r2, #68	@ 0x44
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f005 f932 	bl	80060a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	463b      	mov	r3, r7
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e4e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e52:	f001 f879 	bl	8001f48 <HAL_PWREx_ControlVoltageScaling>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e5c:	f000 fbbc 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e60:	2302      	movs	r3, #2
 8000e62:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e72:	2302      	movs	r3, #2
 8000e74:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000e7a:	2309      	movs	r3, #9
 8000e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e7e:	2307      	movs	r3, #7
 8000e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e82:	2302      	movs	r3, #2
 8000e84:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e86:	2302      	movs	r3, #2
 8000e88:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 f8b0 	bl	8001ff4 <HAL_RCC_OscConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e9a:	f000 fb9d 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9e:	230f      	movs	r3, #15
 8000ea0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 fc78 	bl	80027ac <HAL_RCC_ClockConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ec2:	f000 fb89 	bl	80015d8 <Error_Handler>
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	3758      	adds	r7, #88	@ 0x58
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed6:	f107 0310 	add.w	r3, r7, #16
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eee:	4b1e      	ldr	r3, [pc, #120]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000ef0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ef4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000ef8:	2247      	movs	r2, #71	@ 0x47
 8000efa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f02:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0a:	4b17      	ldr	r3, [pc, #92]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f16:	4814      	ldr	r0, [pc, #80]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f18:	f002 fb5a 	bl	80035d0 <HAL_TIM_Base_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f22:	f000 fb59 	bl	80015d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4619      	mov	r1, r3
 8000f32:	480d      	ldr	r0, [pc, #52]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f34:	f002 fd83 	bl	8003a3e <HAL_TIM_ConfigClockSource>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f3e:	f000 fb4b 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4806      	ldr	r0, [pc, #24]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f50:	f002 ffa6 	bl	8003ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f5a:	f000 fb3d 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	3720      	adds	r7, #32
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2000031c 	.word	0x2000031c

08000f6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f70:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f72:	4a15      	ldr	r2, [pc, #84]	@ (8000fc8 <MX_USART2_UART_Init+0x5c>)
 8000f74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f76:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000fb0:	f003 f81c 	bl	8003fec <HAL_UART_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fba:	f000 fb0d 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000368 	.word	0x20000368
 8000fc8:	40004400 	.word	0x40004400

08000fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	@ 0x28
 8000fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	4b44      	ldr	r3, [pc, #272]	@ (80010f4 <MX_GPIO_Init+0x128>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe6:	4a43      	ldr	r2, [pc, #268]	@ (80010f4 <MX_GPIO_Init+0x128>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fee:	4b41      	ldr	r3, [pc, #260]	@ (80010f4 <MX_GPIO_Init+0x128>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80010f4 <MX_GPIO_Init+0x128>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	4a3d      	ldr	r2, [pc, #244]	@ (80010f4 <MX_GPIO_Init+0x128>)
 8001000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001006:	4b3b      	ldr	r3, [pc, #236]	@ (80010f4 <MX_GPIO_Init+0x128>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4b38      	ldr	r3, [pc, #224]	@ (80010f4 <MX_GPIO_Init+0x128>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	4a37      	ldr	r2, [pc, #220]	@ (80010f4 <MX_GPIO_Init+0x128>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101e:	4b35      	ldr	r3, [pc, #212]	@ (80010f4 <MX_GPIO_Init+0x128>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	4b32      	ldr	r3, [pc, #200]	@ (80010f4 <MX_GPIO_Init+0x128>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	4a31      	ldr	r2, [pc, #196]	@ (80010f4 <MX_GPIO_Init+0x128>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001036:	4b2f      	ldr	r3, [pc, #188]	@ (80010f4 <MX_GPIO_Init+0x128>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_10, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 6190 	mov.w	r1, #1152	@ 0x480
 8001048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104c:	f000 ff56 	bl	8001efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001056:	4828      	ldr	r0, [pc, #160]	@ (80010f8 <MX_GPIO_Init+0x12c>)
 8001058:	f000 ff50 	bl	8001efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800105c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001062:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	4822      	ldr	r0, [pc, #136]	@ (80010fc <MX_GPIO_Init+0x130>)
 8001074:	f000 fd80 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001078:	2360      	movs	r3, #96	@ 0x60
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001080:	2301      	movs	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800108e:	f000 fd73 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 8001092:	f44f 6390 	mov.w	r3, #1152	@ 0x480
 8001096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ae:	f000 fd63 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	480b      	ldr	r0, [pc, #44]	@ (80010f8 <MX_GPIO_Init+0x12c>)
 80010cc:	f000 fd54 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4804      	ldr	r0, [pc, #16]	@ (80010f8 <MX_GPIO_Init+0x12c>)
 80010e6:	f000 fd47 	bl	8001b78 <HAL_GPIO_Init>
/* USER CODE BEGIN MX_GPIO_Init_2 */
  /*
   * ON IOC CHANGE, UPDATE THE PA8 AND PA9 PINS TO GPIO_PULLUP
   */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	@ 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000
 80010f8:	48000400 	.word	0x48000400
 80010fc:	48000800 	.word	0x48000800

08001100 <AreButtonsPressedTask>:

/* USER CODE BEGIN 4 */

void AreButtonsPressedTask(void *argument){
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

	for(;;){
		if(HAL_GPIO_ReadPin(BUTTON_1_PORT, BUTTON_1_PIN) == GPIO_PIN_RESET  && HAL_GPIO_ReadPin(BUTTON_2_PORT, BUTTON_2_PIN) == GPIO_PIN_RESET){
 8001108:	2120      	movs	r1, #32
 800110a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800110e:	f000 fedd 	bl	8001ecc <HAL_GPIO_ReadPin>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10b      	bne.n	8001130 <AreButtonsPressedTask+0x30>
 8001118:	2140      	movs	r1, #64	@ 0x40
 800111a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111e:	f000 fed5 	bl	8001ecc <HAL_GPIO_ReadPin>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d103      	bne.n	8001130 <AreButtonsPressedTask+0x30>
			isButtonsPressed = 1;
 8001128:	4b03      	ldr	r3, [pc, #12]	@ (8001138 <AreButtonsPressedTask+0x38>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	e002      	b.n	8001136 <AreButtonsPressedTask+0x36>
		} else {
			isButtonsPressed = 0;
 8001130:	4b01      	ldr	r3, [pc, #4]	@ (8001138 <AreButtonsPressedTask+0x38>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(BUTTON_1_PORT, BUTTON_1_PIN) == GPIO_PIN_RESET  && HAL_GPIO_ReadPin(BUTTON_2_PORT, BUTTON_2_PIN) == GPIO_PIN_RESET){
 8001136:	e7e7      	b.n	8001108 <AreButtonsPressedTask+0x8>
 8001138:	20000438 	.word	0x20000438

0800113c <PushupCounterTask>:
		}
	}
}

void PushupCounterTask(void *argument)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
        uint8_t downOk = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]
	for(;;)
    {

        Trigger_Ultrasonic();
 8001148:	f000 f850 	bl	80011ec <Trigger_Ultrasonic>

        uint32_t distance = Get_Distance();
 800114c:	f000 f864 	bl	8001218 <Get_Distance>
 8001150:	60b8      	str	r0, [r7, #8]
        if(isButtonsPressed){
 8001152:	4b21      	ldr	r3, [pc, #132]	@ (80011d8 <PushupCounterTask+0x9c>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d024      	beq.n	80011a4 <PushupCounterTask+0x68>
        	if(pushupCounter < TARGET){
 800115a:	4b20      	ldr	r3, [pc, #128]	@ (80011dc <PushupCounterTask+0xa0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d116      	bne.n	8001190 <PushupCounterTask+0x54>
        		if(distance <= PUSHUP_DOWN_DISTANCE_CM && !downOk ){
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	2b0a      	cmp	r3, #10
 8001166:	d805      	bhi.n	8001174 <PushupCounterTask+0x38>
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d102      	bne.n	8001174 <PushupCounterTask+0x38>
        			downOk = 1;
 800116e:	2301      	movs	r3, #1
 8001170:	73fb      	strb	r3, [r7, #15]
 8001172:	e01a      	b.n	80011aa <PushupCounterTask+0x6e>
        		}
        		else if(distance >= PUSHUP_UP_DISTANCE_CM && downOk){
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	2b1d      	cmp	r3, #29
 8001178:	d917      	bls.n	80011aa <PushupCounterTask+0x6e>
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d014      	beq.n	80011aa <PushupCounterTask+0x6e>
        			pushupCounter++;
 8001180:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <PushupCounterTask+0xa0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	4a15      	ldr	r2, [pc, #84]	@ (80011dc <PushupCounterTask+0xa0>)
 8001188:	6013      	str	r3, [r2, #0]
        			downOk = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	e00c      	b.n	80011aa <PushupCounterTask+0x6e>
        		}
        	} else {
        		handleWin();
 8001190:	f000 f898 	bl	80012c4 <handleWin>
        		pushupCounter = 0;
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <PushupCounterTask+0xa0>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
        		osDelay(500);
 800119a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800119e:	f003 fd3b 	bl	8004c18 <osDelay>
 80011a2:	e002      	b.n	80011aa <PushupCounterTask+0x6e>
        	}
        } else {
        	pushupCounter = 0;
 80011a4:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <PushupCounterTask+0xa0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
        }

        sprintf(ultraBuffer, "Counter: %lu Distance: %lu\r\n", pushupCounter, distance);
 80011aa:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <PushupCounterTask+0xa0>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	490b      	ldr	r1, [pc, #44]	@ (80011e0 <PushupCounterTask+0xa4>)
 80011b2:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <PushupCounterTask+0xa8>)
 80011b4:	f004 ff56 	bl	8006064 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)ultraBuffer, strlen(ultraBuffer), HAL_MAX_DELAY);
 80011b8:	480a      	ldr	r0, [pc, #40]	@ (80011e4 <PushupCounterTask+0xa8>)
 80011ba:	f7ff f809 	bl	80001d0 <strlen>
 80011be:	4603      	mov	r3, r0
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	4907      	ldr	r1, [pc, #28]	@ (80011e4 <PushupCounterTask+0xa8>)
 80011c8:	4807      	ldr	r0, [pc, #28]	@ (80011e8 <PushupCounterTask+0xac>)
 80011ca:	f002 ff5d 	bl	8004088 <HAL_UART_Transmit>
        osDelay(500);
 80011ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011d2:	f003 fd21 	bl	8004c18 <osDelay>
    {
 80011d6:	e7b7      	b.n	8001148 <PushupCounterTask+0xc>
 80011d8:	20000438 	.word	0x20000438
 80011dc:	20000434 	.word	0x20000434
 80011e0:	08006acc 	.word	0x08006acc
 80011e4:	20000400 	.word	0x20000400
 80011e8:	20000368 	.word	0x20000368

080011ec <Trigger_Ultrasonic>:
    }
}

void Trigger_Ultrasonic(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f6:	4807      	ldr	r0, [pc, #28]	@ (8001214 <Trigger_Ultrasonic+0x28>)
 80011f8:	f000 fe80 	bl	8001efc <HAL_GPIO_WritePin>
    osDelay(1);
 80011fc:	2001      	movs	r0, #1
 80011fe:	f003 fd0b 	bl	8004c18 <osDelay>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001208:	4802      	ldr	r0, [pc, #8]	@ (8001214 <Trigger_Ultrasonic+0x28>)
 800120a:	f000 fe77 	bl	8001efc <HAL_GPIO_WritePin>
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	48000400 	.word	0x48000400

08001218 <Get_Distance>:

uint32_t Get_Distance(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET);
 800121e:	bf00      	nop
 8001220:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001224:	4822      	ldr	r0, [pc, #136]	@ (80012b0 <Get_Distance+0x98>)
 8001226:	f000 fe51 	bl	8001ecc <HAL_GPIO_ReadPin>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f7      	beq.n	8001220 <Get_Distance+0x8>

    echoStart = __HAL_TIM_GET_COUNTER(&htim2);
 8001230:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <Get_Distance+0x9c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001236:	4a20      	ldr	r2, [pc, #128]	@ (80012b8 <Get_Distance+0xa0>)
 8001238:	6013      	str	r3, [r2, #0]

    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET);
 800123a:	bf00      	nop
 800123c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001240:	481b      	ldr	r0, [pc, #108]	@ (80012b0 <Get_Distance+0x98>)
 8001242:	f000 fe43 	bl	8001ecc <HAL_GPIO_ReadPin>
 8001246:	4603      	mov	r3, r0
 8001248:	2b01      	cmp	r3, #1
 800124a:	d0f7      	beq.n	800123c <Get_Distance+0x24>

    echoEnd = __HAL_TIM_GET_COUNTER(&htim2);
 800124c:	4b19      	ldr	r3, [pc, #100]	@ (80012b4 <Get_Distance+0x9c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001252:	4a1a      	ldr	r2, [pc, #104]	@ (80012bc <Get_Distance+0xa4>)
 8001254:	6013      	str	r3, [r2, #0]

    echoDuration = echoEnd - echoStart;
 8001256:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <Get_Distance+0xa4>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <Get_Distance+0xa0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	4a17      	ldr	r2, [pc, #92]	@ (80012c0 <Get_Distance+0xa8>)
 8001262:	6013      	str	r3, [r2, #0]

    uint32_t distance = (echoDuration * 0.0343) / 2;
 8001264:	4b16      	ldr	r3, [pc, #88]	@ (80012c0 <Get_Distance+0xa8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f94b 	bl	8000504 <__aeabi_ui2d>
 800126e:	a30e      	add	r3, pc, #56	@ (adr r3, 80012a8 <Get_Distance+0x90>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff f9c0 	bl	80005f8 <__aeabi_dmul>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001288:	f7ff fae0 	bl	800084c <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f7ff fbc2 	bl	8000a1c <__aeabi_d2uiz>
 8001298:	4603      	mov	r3, r0
 800129a:	607b      	str	r3, [r7, #4]

    return distance;
 800129c:	687b      	ldr	r3, [r7, #4]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	04816f00 	.word	0x04816f00
 80012ac:	3fa18fc5 	.word	0x3fa18fc5
 80012b0:	48000400 	.word	0x48000400
 80012b4:	2000031c 	.word	0x2000031c
 80012b8:	200003f4 	.word	0x200003f4
 80012bc:	200003f8 	.word	0x200003f8
 80012c0:	200003fc 	.word	0x200003fc

080012c4 <handleWin>:


void handleWin(void){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
//	sprintf(ultraBuffer, "WIN WIN WIN\r\n");
//	HAL_UART_Transmit(&huart2, (uint8_t*)ultraBuffer, strlen(ultraBuffer), HAL_MAX_DELAY);

	// caza
	playSound(300, 200);
 80012c8:	21c8      	movs	r1, #200	@ 0xc8
 80012ca:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80012ce:	f000 f90b 	bl	80014e8 <playSound>
	osDelay(20);
 80012d2:	2014      	movs	r0, #20
 80012d4:	f003 fca0 	bl	8004c18 <osDelay>

	playSound(300, 200);
 80012d8:	21c8      	movs	r1, #200	@ 0xc8
 80012da:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80012de:	f000 f903 	bl	80014e8 <playSound>
	osDelay(20);
 80012e2:	2014      	movs	r0, #20
 80012e4:	f003 fc98 	bl	8004c18 <osDelay>

	osDelay(220);
 80012e8:	20dc      	movs	r0, #220	@ 0xdc
 80012ea:	f003 fc95 	bl	8004c18 <osDelay>

	// caza
	playSound(300, 200);
 80012ee:	21c8      	movs	r1, #200	@ 0xc8
 80012f0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80012f4:	f000 f8f8 	bl	80014e8 <playSound>
	osDelay(20);
 80012f8:	2014      	movs	r0, #20
 80012fa:	f003 fc8d 	bl	8004c18 <osDelay>

	playSound(300, 200);
 80012fe:	21c8      	movs	r1, #200	@ 0xc8
 8001300:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001304:	f000 f8f0 	bl	80014e8 <playSound>
	osDelay(20);
 8001308:	2014      	movs	r0, #20
 800130a:	f003 fc85 	bl	8004c18 <osDelay>

	osDelay(220);
 800130e:	20dc      	movs	r0, #220	@ 0xdc
 8001310:	f003 fc82 	bl	8004c18 <osDelay>

	// caza caza caza
	playSound(300, 200);
 8001314:	21c8      	movs	r1, #200	@ 0xc8
 8001316:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800131a:	f000 f8e5 	bl	80014e8 <playSound>
	osDelay(20);
 800131e:	2014      	movs	r0, #20
 8001320:	f003 fc7a 	bl	8004c18 <osDelay>

	playSound(300, 200);
 8001324:	21c8      	movs	r1, #200	@ 0xc8
 8001326:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800132a:	f000 f8dd 	bl	80014e8 <playSound>
	osDelay(20);
 800132e:	2014      	movs	r0, #20
 8001330:	f003 fc72 	bl	8004c18 <osDelay>

	playSound(300, 200);
 8001334:	21c8      	movs	r1, #200	@ 0xc8
 8001336:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800133a:	f000 f8d5 	bl	80014e8 <playSound>
	osDelay(20);
 800133e:	2014      	movs	r0, #20
 8001340:	f003 fc6a 	bl	8004c18 <osDelay>

	playSound(300, 200);
 8001344:	21c8      	movs	r1, #200	@ 0xc8
 8001346:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800134a:	f000 f8cd 	bl	80014e8 <playSound>
	osDelay(20);
 800134e:	2014      	movs	r0, #20
 8001350:	f003 fc62 	bl	8004c18 <osDelay>

	playSound(300, 200);
 8001354:	21c8      	movs	r1, #200	@ 0xc8
 8001356:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800135a:	f000 f8c5 	bl	80014e8 <playSound>
	osDelay(20);
 800135e:	2014      	movs	r0, #20
 8001360:	f003 fc5a 	bl	8004c18 <osDelay>

	playSound(300, 200);
 8001364:	21c8      	movs	r1, #200	@ 0xc8
 8001366:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800136a:	f000 f8bd 	bl	80014e8 <playSound>
	osDelay(20);
 800136e:	2014      	movs	r0, #20
 8001370:	f003 fc52 	bl	8004c18 <osDelay>

	playSound(300, 200);
 8001374:	21c8      	movs	r1, #200	@ 0xc8
 8001376:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800137a:	f000 f8b5 	bl	80014e8 <playSound>
	osDelay(20);
 800137e:	2014      	movs	r0, #20
 8001380:	f003 fc4a 	bl	8004c18 <osDelay>

	osDelay(220);
 8001384:	20dc      	movs	r0, #220	@ 0xdc
 8001386:	f003 fc47 	bl	8004c18 <osDelay>

	// a turma é mesmo boa
	playSound(300, 200);
 800138a:	21c8      	movs	r1, #200	@ 0xc8
 800138c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001390:	f000 f8aa 	bl	80014e8 <playSound>
	osDelay(20);
 8001394:	2014      	movs	r0, #20
 8001396:	f003 fc3f 	bl	8004c18 <osDelay>

	playSound(300, 200);
 800139a:	21c8      	movs	r1, #200	@ 0xc8
 800139c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013a0:	f000 f8a2 	bl	80014e8 <playSound>
	osDelay(20);
 80013a4:	2014      	movs	r0, #20
 80013a6:	f003 fc37 	bl	8004c18 <osDelay>

	playSound(300, 200);
 80013aa:	21c8      	movs	r1, #200	@ 0xc8
 80013ac:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013b0:	f000 f89a 	bl	80014e8 <playSound>
	osDelay(20);
 80013b4:	2014      	movs	r0, #20
 80013b6:	f003 fc2f 	bl	8004c18 <osDelay>

	playSound(300, 200);
 80013ba:	21c8      	movs	r1, #200	@ 0xc8
 80013bc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013c0:	f000 f892 	bl	80014e8 <playSound>
	osDelay(20);
 80013c4:	2014      	movs	r0, #20
 80013c6:	f003 fc27 	bl	8004c18 <osDelay>

	playSound(300, 200);
 80013ca:	21c8      	movs	r1, #200	@ 0xc8
 80013cc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013d0:	f000 f88a 	bl	80014e8 <playSound>
	osDelay(20);
 80013d4:	2014      	movs	r0, #20
 80013d6:	f003 fc1f 	bl	8004c18 <osDelay>

	playSound(300, 200);
 80013da:	21c8      	movs	r1, #200	@ 0xc8
 80013dc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013e0:	f000 f882 	bl	80014e8 <playSound>
	osDelay(20);
 80013e4:	2014      	movs	r0, #20
 80013e6:	f003 fc17 	bl	8004c18 <osDelay>

	playSound(300, 200);
 80013ea:	21c8      	movs	r1, #200	@ 0xc8
 80013ec:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013f0:	f000 f87a 	bl	80014e8 <playSound>
	osDelay(20);
 80013f4:	2014      	movs	r0, #20
 80013f6:	f003 fc0f 	bl	8004c18 <osDelay>


	osDelay(220);
 80013fa:	20dc      	movs	r0, #220	@ 0xdc
 80013fc:	f003 fc0c 	bl	8004c18 <osDelay>

	// é mesmo da fuzaca
	playSound(300, 200);
 8001400:	21c8      	movs	r1, #200	@ 0xc8
 8001402:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001406:	f000 f86f 	bl	80014e8 <playSound>
	osDelay(20);
 800140a:	2014      	movs	r0, #20
 800140c:	f003 fc04 	bl	8004c18 <osDelay>

	playSound(300, 200);
 8001410:	21c8      	movs	r1, #200	@ 0xc8
 8001412:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001416:	f000 f867 	bl	80014e8 <playSound>
	osDelay(20);
 800141a:	2014      	movs	r0, #20
 800141c:	f003 fbfc 	bl	8004c18 <osDelay>

	playSound(300, 200);
 8001420:	21c8      	movs	r1, #200	@ 0xc8
 8001422:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001426:	f000 f85f 	bl	80014e8 <playSound>
	osDelay(20);
 800142a:	2014      	movs	r0, #20
 800142c:	f003 fbf4 	bl	8004c18 <osDelay>

	playSound(300, 200);
 8001430:	21c8      	movs	r1, #200	@ 0xc8
 8001432:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001436:	f000 f857 	bl	80014e8 <playSound>
	osDelay(20);
 800143a:	2014      	movs	r0, #20
 800143c:	f003 fbec 	bl	8004c18 <osDelay>

	playSound(300, 200);
 8001440:	21c8      	movs	r1, #200	@ 0xc8
 8001442:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001446:	f000 f84f 	bl	80014e8 <playSound>
	osDelay(20);
 800144a:	2014      	movs	r0, #20
 800144c:	f003 fbe4 	bl	8004c18 <osDelay>

	playSound(300, 200);
 8001450:	21c8      	movs	r1, #200	@ 0xc8
 8001452:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001456:	f000 f847 	bl	80014e8 <playSound>
	osDelay(20);
 800145a:	2014      	movs	r0, #20
 800145c:	f003 fbdc 	bl	8004c18 <osDelay>

	playSound(300, 200);
 8001460:	21c8      	movs	r1, #200	@ 0xc8
 8001462:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001466:	f000 f83f 	bl	80014e8 <playSound>
	osDelay(20);
 800146a:	2014      	movs	r0, #20
 800146c:	f003 fbd4 	bl	8004c18 <osDelay>

	osDelay(220);
 8001470:	20dc      	movs	r0, #220	@ 0xdc
 8001472:	f003 fbd1 	bl	8004c18 <osDelay>

	// sport
	playSound(300, 200);
 8001476:	21c8      	movs	r1, #200	@ 0xc8
 8001478:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800147c:	f000 f834 	bl	80014e8 <playSound>
	osDelay(20);
 8001480:	2014      	movs	r0, #20
 8001482:	f003 fbc9 	bl	8004c18 <osDelay>

	playSound(300, 200);
 8001486:	21c8      	movs	r1, #200	@ 0xc8
 8001488:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800148c:	f000 f82c 	bl	80014e8 <playSound>
	osDelay(20);
 8001490:	2014      	movs	r0, #20
 8001492:	f003 fbc1 	bl	8004c18 <osDelay>

	osDelay(220);
 8001496:	20dc      	movs	r0, #220	@ 0xdc
 8001498:	f003 fbbe 	bl	8004c18 <osDelay>

	// sport
	playSound(300, 200);
 800149c:	21c8      	movs	r1, #200	@ 0xc8
 800149e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014a2:	f000 f821 	bl	80014e8 <playSound>
	osDelay(20);
 80014a6:	2014      	movs	r0, #20
 80014a8:	f003 fbb6 	bl	8004c18 <osDelay>

	playSound(300, 200);
 80014ac:	21c8      	movs	r1, #200	@ 0xc8
 80014ae:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014b2:	f000 f819 	bl	80014e8 <playSound>
	osDelay(20);
 80014b6:	2014      	movs	r0, #20
 80014b8:	f003 fbae 	bl	8004c18 <osDelay>

	osDelay(220);
 80014bc:	20dc      	movs	r0, #220	@ 0xdc
 80014be:	f003 fbab 	bl	8004c18 <osDelay>

	// sport
	playSound(300, 200);
 80014c2:	21c8      	movs	r1, #200	@ 0xc8
 80014c4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014c8:	f000 f80e 	bl	80014e8 <playSound>
	osDelay(20);
 80014cc:	2014      	movs	r0, #20
 80014ce:	f003 fba3 	bl	8004c18 <osDelay>

	playSound(300, 200);
 80014d2:	21c8      	movs	r1, #200	@ 0xc8
 80014d4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014d8:	f000 f806 	bl	80014e8 <playSound>
	osDelay(20);
 80014dc:	2014      	movs	r0, #20
 80014de:	f003 fb9b 	bl	8004c18 <osDelay>
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <playSound>:

void playSound(uint32_t frequency, uint32_t duration_ms){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
	uint32_t period_us = 1000000 / frequency;
 80014f2:	4a1a      	ldr	r2, [pc, #104]	@ (800155c <playSound+0x74>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	617b      	str	r3, [r7, #20]
	uint32_t half_period_us = period_us / 2;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	085b      	lsrs	r3, r3, #1
 8001500:	613b      	str	r3, [r7, #16]

	uint32_t startTick = HAL_GetTick();
 8001502:	f000 fa4b 	bl	800199c <HAL_GetTick>
 8001506:	60f8      	str	r0, [r7, #12]

	while ((HAL_GetTick() - startTick) < duration_ms)
 8001508:	e01b      	b.n	8001542 <playSound+0x5a>
	{
		HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	2180      	movs	r1, #128	@ 0x80
 800150e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001512:	f000 fcf3 	bl	8001efc <HAL_GPIO_WritePin>
		osDelay(half_period_us / 1000);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4a11      	ldr	r2, [pc, #68]	@ (8001560 <playSound+0x78>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	099b      	lsrs	r3, r3, #6
 8001520:	4618      	mov	r0, r3
 8001522:	f003 fb79 	bl	8004c18 <osDelay>

		HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2180      	movs	r1, #128	@ 0x80
 800152a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800152e:	f000 fce5 	bl	8001efc <HAL_GPIO_WritePin>
		osDelay(half_period_us / 1000);
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <playSound+0x78>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	099b      	lsrs	r3, r3, #6
 800153c:	4618      	mov	r0, r3
 800153e:	f003 fb6b 	bl	8004c18 <osDelay>
	while ((HAL_GetTick() - startTick) < duration_ms)
 8001542:	f000 fa2b 	bl	800199c <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d8db      	bhi.n	800150a <playSound+0x22>
	}
}
 8001552:	bf00      	nop
 8001554:	bf00      	nop
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	000f4240 	.word	0x000f4240
 8001560:	10624dd3 	.word	0x10624dd3

08001564 <LedCounterTask>:

void LedCounterTask(void *argument){
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	// PA8 - D7 - Button 1
	// PA9 - D8 - Button 2

	const uint16_t LED_1_PIN = GPIO_PIN_10;
 800156c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001570:	81fb      	strh	r3, [r7, #14]
	GPIO_TypeDef* LED_1_PORT = GPIOA;
 8001572:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001576:	60bb      	str	r3, [r7, #8]
	for(;;){
		if(pushupCounter % 2 != 0){
 8001578:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <LedCounterTask+0x3c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	2b00      	cmp	r3, #0
 8001582:	d006      	beq.n	8001592 <LedCounterTask+0x2e>
			HAL_GPIO_WritePin(LED_1_PORT, LED_1_PIN, GPIO_PIN_SET);
 8001584:	89fb      	ldrh	r3, [r7, #14]
 8001586:	2201      	movs	r2, #1
 8001588:	4619      	mov	r1, r3
 800158a:	68b8      	ldr	r0, [r7, #8]
 800158c:	f000 fcb6 	bl	8001efc <HAL_GPIO_WritePin>
 8001590:	e7f2      	b.n	8001578 <LedCounterTask+0x14>
		} else {
			HAL_GPIO_WritePin(LED_1_PORT, LED_1_PIN, GPIO_PIN_RESET);
 8001592:	89fb      	ldrh	r3, [r7, #14]
 8001594:	2200      	movs	r2, #0
 8001596:	4619      	mov	r1, r3
 8001598:	68b8      	ldr	r0, [r7, #8]
 800159a:	f000 fcaf 	bl	8001efc <HAL_GPIO_WritePin>
		if(pushupCounter % 2 != 0){
 800159e:	e7eb      	b.n	8001578 <LedCounterTask+0x14>
 80015a0:	20000434 	.word	0x20000434

080015a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015ac:	2001      	movs	r0, #1
 80015ae:	f003 fb33 	bl	8004c18 <osDelay>
 80015b2:	e7fb      	b.n	80015ac <StartDefaultTask+0x8>

080015b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a04      	ldr	r2, [pc, #16]	@ (80015d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015c6:	f000 f9d5 	bl	8001974 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40012c00 	.word	0x40012c00

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <Error_Handler+0x8>

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <HAL_MspInit+0x4c>)
 80015ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ee:	4a10      	ldr	r2, [pc, #64]	@ (8001630 <HAL_MspInit+0x4c>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <HAL_MspInit+0x4c>)
 80015f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <HAL_MspInit+0x4c>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001606:	4a0a      	ldr	r2, [pc, #40]	@ (8001630 <HAL_MspInit+0x4c>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800160c:	6593      	str	r3, [r2, #88]	@ 0x58
 800160e:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <HAL_MspInit+0x4c>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	210f      	movs	r1, #15
 800161e:	f06f 0001 	mvn.w	r0, #1
 8001622:	f000 fa7f 	bl	8001b24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000

08001634 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001644:	d10b      	bne.n	800165e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <HAL_TIM_Base_MspInit+0x38>)
 8001648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164a:	4a08      	ldr	r2, [pc, #32]	@ (800166c <HAL_TIM_Base_MspInit+0x38>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6593      	str	r3, [r2, #88]	@ 0x58
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <HAL_TIM_Base_MspInit+0x38>)
 8001654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000

08001670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b0ac      	sub	sp, #176	@ 0xb0
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2288      	movs	r2, #136	@ 0x88
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f004 fd07 	bl	80060a4 <memset>
  if(huart->Instance==USART2)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a21      	ldr	r2, [pc, #132]	@ (8001720 <HAL_UART_MspInit+0xb0>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d13b      	bne.n	8001718 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016a0:	2302      	movs	r3, #2
 80016a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4618      	mov	r0, r3
 80016ae:	f001 fad3 	bl	8002c58 <HAL_RCCEx_PeriphCLKConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016b8:	f7ff ff8e 	bl	80015d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016bc:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <HAL_UART_MspInit+0xb4>)
 80016be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c0:	4a18      	ldr	r2, [pc, #96]	@ (8001724 <HAL_UART_MspInit+0xb4>)
 80016c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c8:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <HAL_UART_MspInit+0xb4>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <HAL_UART_MspInit+0xb4>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d8:	4a12      	ldr	r2, [pc, #72]	@ (8001724 <HAL_UART_MspInit+0xb4>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e0:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <HAL_UART_MspInit+0xb4>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016ec:	230c      	movs	r3, #12
 80016ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001704:	2307      	movs	r3, #7
 8001706:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800170e:	4619      	mov	r1, r3
 8001710:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001714:	f000 fa30 	bl	8001b78 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001718:	bf00      	nop
 800171a:	37b0      	adds	r7, #176	@ 0xb0
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40004400 	.word	0x40004400
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08c      	sub	sp, #48	@ 0x30
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001736:	4b2e      	ldr	r3, [pc, #184]	@ (80017f0 <HAL_InitTick+0xc8>)
 8001738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800173a:	4a2d      	ldr	r2, [pc, #180]	@ (80017f0 <HAL_InitTick+0xc8>)
 800173c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001740:	6613      	str	r3, [r2, #96]	@ 0x60
 8001742:	4b2b      	ldr	r3, [pc, #172]	@ (80017f0 <HAL_InitTick+0xc8>)
 8001744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001746:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800174e:	f107 020c 	add.w	r2, r7, #12
 8001752:	f107 0310 	add.w	r3, r7, #16
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f001 f9eb 	bl	8002b34 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800175e:	f001 f9d3 	bl	8002b08 <HAL_RCC_GetPCLK2Freq>
 8001762:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001766:	4a23      	ldr	r2, [pc, #140]	@ (80017f4 <HAL_InitTick+0xcc>)
 8001768:	fba2 2303 	umull	r2, r3, r2, r3
 800176c:	0c9b      	lsrs	r3, r3, #18
 800176e:	3b01      	subs	r3, #1
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001772:	4b21      	ldr	r3, [pc, #132]	@ (80017f8 <HAL_InitTick+0xd0>)
 8001774:	4a21      	ldr	r2, [pc, #132]	@ (80017fc <HAL_InitTick+0xd4>)
 8001776:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001778:	4b1f      	ldr	r3, [pc, #124]	@ (80017f8 <HAL_InitTick+0xd0>)
 800177a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800177e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001780:	4a1d      	ldr	r2, [pc, #116]	@ (80017f8 <HAL_InitTick+0xd0>)
 8001782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001784:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001786:	4b1c      	ldr	r3, [pc, #112]	@ (80017f8 <HAL_InitTick+0xd0>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178c:	4b1a      	ldr	r3, [pc, #104]	@ (80017f8 <HAL_InitTick+0xd0>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001792:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <HAL_InitTick+0xd0>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001798:	4817      	ldr	r0, [pc, #92]	@ (80017f8 <HAL_InitTick+0xd0>)
 800179a:	f001 ff19 	bl	80035d0 <HAL_TIM_Base_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80017a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d11b      	bne.n	80017e4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80017ac:	4812      	ldr	r0, [pc, #72]	@ (80017f8 <HAL_InitTick+0xd0>)
 80017ae:	f001 ffcf 	bl	8003750 <HAL_TIM_Base_Start_IT>
 80017b2:	4603      	mov	r3, r0
 80017b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80017b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d111      	bne.n	80017e4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80017c0:	2019      	movs	r0, #25
 80017c2:	f000 f9cb 	bl	8001b5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d808      	bhi.n	80017de <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80017cc:	2200      	movs	r2, #0
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	2019      	movs	r0, #25
 80017d2:	f000 f9a7 	bl	8001b24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <HAL_InitTick+0xd8>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	e002      	b.n	80017e4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80017e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3730      	adds	r7, #48	@ 0x30
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021000 	.word	0x40021000
 80017f4:	431bde83 	.word	0x431bde83
 80017f8:	2000043c 	.word	0x2000043c
 80017fc:	40012c00 	.word	0x40012c00
 8001800:	20000004 	.word	0x20000004

08001804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <NMI_Handler+0x4>

0800180c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <MemManage_Handler+0x4>

0800181c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <BusFault_Handler+0x4>

08001824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <UsageFault_Handler+0x4>

0800182c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001842:	f001 fff5 	bl	8003830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000043c 	.word	0x2000043c

08001850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001858:	4a14      	ldr	r2, [pc, #80]	@ (80018ac <_sbrk+0x5c>)
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <_sbrk+0x60>)
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001864:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	@ (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001880:	f004 fc6e 	bl	8006160 <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4a05      	ldr	r2, [pc, #20]	@ (80018b4 <_sbrk+0x64>)
 80018a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20018000 	.word	0x20018000
 80018b0:	00000400 	.word	0x00000400
 80018b4:	20000488 	.word	0x20000488
 80018b8:	20004730 	.word	0x20004730

080018bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018c0:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <SystemInit+0x20>)
 80018c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c6:	4a05      	ldr	r2, [pc, #20]	@ (80018dc <SystemInit+0x20>)
 80018c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001918 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018e4:	f7ff ffea 	bl	80018bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018e8:	480c      	ldr	r0, [pc, #48]	@ (800191c <LoopForever+0x6>)
  ldr r1, =_edata
 80018ea:	490d      	ldr	r1, [pc, #52]	@ (8001920 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001924 <LoopForever+0xe>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f0:	e002      	b.n	80018f8 <LoopCopyDataInit>

080018f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f6:	3304      	adds	r3, #4

080018f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018fc:	d3f9      	bcc.n	80018f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001900:	4c0a      	ldr	r4, [pc, #40]	@ (800192c <LoopForever+0x16>)
  movs r3, #0
 8001902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001904:	e001      	b.n	800190a <LoopFillZerobss>

08001906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001908:	3204      	adds	r2, #4

0800190a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800190c:	d3fb      	bcc.n	8001906 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800190e:	f004 fc2d 	bl	800616c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001912:	f7ff fa35 	bl	8000d80 <main>

08001916 <LoopForever>:

LoopForever:
    b LoopForever
 8001916:	e7fe      	b.n	8001916 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001918:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800191c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001920:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001924:	08006b80 	.word	0x08006b80
  ldr r2, =_sbss
 8001928:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800192c:	2000472c 	.word	0x2000472c

08001930 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001930:	e7fe      	b.n	8001930 <ADC1_2_IRQHandler>
	...

08001934 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800193e:	4b0c      	ldr	r3, [pc, #48]	@ (8001970 <HAL_Init+0x3c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a0b      	ldr	r2, [pc, #44]	@ (8001970 <HAL_Init+0x3c>)
 8001944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001948:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194a:	2003      	movs	r0, #3
 800194c:	f000 f8df 	bl	8001b0e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001950:	200f      	movs	r0, #15
 8001952:	f7ff fee9 	bl	8001728 <HAL_InitTick>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	e001      	b.n	8001966 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001962:	f7ff fe3f 	bl	80015e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001966:	79fb      	ldrb	r3, [r7, #7]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40022000 	.word	0x40022000

08001974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_IncTick+0x20>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <HAL_IncTick+0x24>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	4a04      	ldr	r2, [pc, #16]	@ (8001998 <HAL_IncTick+0x24>)
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000008 	.word	0x20000008
 8001998:	2000048c 	.word	0x2000048c

0800199c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return uwTick;
 80019a0:	4b03      	ldr	r3, [pc, #12]	@ (80019b0 <HAL_GetTick+0x14>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	2000048c 	.word	0x2000048c

080019b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c4:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019d0:	4013      	ands	r3, r2
 80019d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e6:	4a04      	ldr	r2, [pc, #16]	@ (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	60d3      	str	r3, [r2, #12]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a00:	4b04      	ldr	r3, [pc, #16]	@ (8001a14 <__NVIC_GetPriorityGrouping+0x18>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	f003 0307 	and.w	r3, r3, #7
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	db0b      	blt.n	8001a42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	f003 021f 	and.w	r2, r3, #31
 8001a30:	4907      	ldr	r1, [pc, #28]	@ (8001a50 <__NVIC_EnableIRQ+0x38>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	095b      	lsrs	r3, r3, #5
 8001a38:	2001      	movs	r0, #1
 8001a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e100 	.word	0xe000e100

08001a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	490c      	ldr	r1, [pc, #48]	@ (8001aa0 <__NVIC_SetPriority+0x4c>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a7c:	e00a      	b.n	8001a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4908      	ldr	r1, [pc, #32]	@ (8001aa4 <__NVIC_SetPriority+0x50>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3b04      	subs	r3, #4
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	440b      	add	r3, r1
 8001a92:	761a      	strb	r2, [r3, #24]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e100 	.word	0xe000e100
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	@ 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f1c3 0307 	rsb	r3, r3, #7
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	bf28      	it	cs
 8001ac6:	2304      	movcs	r3, #4
 8001ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3304      	adds	r3, #4
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d902      	bls.n	8001ad8 <NVIC_EncodePriority+0x30>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3b03      	subs	r3, #3
 8001ad6:	e000      	b.n	8001ada <NVIC_EncodePriority+0x32>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	401a      	ands	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	43d9      	mvns	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	4313      	orrs	r3, r2
         );
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	@ 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ff4c 	bl	80019b4 <__NVIC_SetPriorityGrouping>
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b36:	f7ff ff61 	bl	80019fc <__NVIC_GetPriorityGrouping>
 8001b3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	68b9      	ldr	r1, [r7, #8]
 8001b40:	6978      	ldr	r0, [r7, #20]
 8001b42:	f7ff ffb1 	bl	8001aa8 <NVIC_EncodePriority>
 8001b46:	4602      	mov	r2, r0
 8001b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff ff80 	bl	8001a54 <__NVIC_SetPriority>
}
 8001b54:	bf00      	nop
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff54 	bl	8001a18 <__NVIC_EnableIRQ>
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b86:	e17f      	b.n	8001e88 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	4013      	ands	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 8171 	beq.w	8001e82 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d005      	beq.n	8001bb8 <HAL_GPIO_Init+0x40>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d130      	bne.n	8001c1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bee:	2201      	movs	r2, #1
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	091b      	lsrs	r3, r3, #4
 8001c04:	f003 0201 	and.w	r2, r3, #1
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d118      	bne.n	8001c58 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	08db      	lsrs	r3, r3, #3
 8001c42:	f003 0201 	and.w	r2, r3, #1
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d017      	beq.n	8001c94 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	2203      	movs	r2, #3
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d123      	bne.n	8001ce8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	08da      	lsrs	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3208      	adds	r2, #8
 8001ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	220f      	movs	r2, #15
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	08da      	lsrs	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3208      	adds	r2, #8
 8001ce2:	6939      	ldr	r1, [r7, #16]
 8001ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0203 	and.w	r2, r3, #3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80ac 	beq.w	8001e82 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ea8 <HAL_GPIO_Init+0x330>)
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d2e:	4a5e      	ldr	r2, [pc, #376]	@ (8001ea8 <HAL_GPIO_Init+0x330>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d36:	4b5c      	ldr	r3, [pc, #368]	@ (8001ea8 <HAL_GPIO_Init+0x330>)
 8001d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d42:	4a5a      	ldr	r2, [pc, #360]	@ (8001eac <HAL_GPIO_Init+0x334>)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	089b      	lsrs	r3, r3, #2
 8001d48:	3302      	adds	r3, #2
 8001d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	220f      	movs	r2, #15
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d6c:	d025      	beq.n	8001dba <HAL_GPIO_Init+0x242>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4f      	ldr	r2, [pc, #316]	@ (8001eb0 <HAL_GPIO_Init+0x338>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d01f      	beq.n	8001db6 <HAL_GPIO_Init+0x23e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4e      	ldr	r2, [pc, #312]	@ (8001eb4 <HAL_GPIO_Init+0x33c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d019      	beq.n	8001db2 <HAL_GPIO_Init+0x23a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4d      	ldr	r2, [pc, #308]	@ (8001eb8 <HAL_GPIO_Init+0x340>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d013      	beq.n	8001dae <HAL_GPIO_Init+0x236>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4c      	ldr	r2, [pc, #304]	@ (8001ebc <HAL_GPIO_Init+0x344>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d00d      	beq.n	8001daa <HAL_GPIO_Init+0x232>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4b      	ldr	r2, [pc, #300]	@ (8001ec0 <HAL_GPIO_Init+0x348>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d007      	beq.n	8001da6 <HAL_GPIO_Init+0x22e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4a      	ldr	r2, [pc, #296]	@ (8001ec4 <HAL_GPIO_Init+0x34c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d101      	bne.n	8001da2 <HAL_GPIO_Init+0x22a>
 8001d9e:	2306      	movs	r3, #6
 8001da0:	e00c      	b.n	8001dbc <HAL_GPIO_Init+0x244>
 8001da2:	2307      	movs	r3, #7
 8001da4:	e00a      	b.n	8001dbc <HAL_GPIO_Init+0x244>
 8001da6:	2305      	movs	r3, #5
 8001da8:	e008      	b.n	8001dbc <HAL_GPIO_Init+0x244>
 8001daa:	2304      	movs	r3, #4
 8001dac:	e006      	b.n	8001dbc <HAL_GPIO_Init+0x244>
 8001dae:	2303      	movs	r3, #3
 8001db0:	e004      	b.n	8001dbc <HAL_GPIO_Init+0x244>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e002      	b.n	8001dbc <HAL_GPIO_Init+0x244>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <HAL_GPIO_Init+0x244>
 8001dba:	2300      	movs	r3, #0
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	f002 0203 	and.w	r2, r2, #3
 8001dc2:	0092      	lsls	r2, r2, #2
 8001dc4:	4093      	lsls	r3, r2
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dcc:	4937      	ldr	r1, [pc, #220]	@ (8001eac <HAL_GPIO_Init+0x334>)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	089b      	lsrs	r3, r3, #2
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dda:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec8 <HAL_GPIO_Init+0x350>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dfe:	4a32      	ldr	r2, [pc, #200]	@ (8001ec8 <HAL_GPIO_Init+0x350>)
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e04:	4b30      	ldr	r3, [pc, #192]	@ (8001ec8 <HAL_GPIO_Init+0x350>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4013      	ands	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e28:	4a27      	ldr	r2, [pc, #156]	@ (8001ec8 <HAL_GPIO_Init+0x350>)
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e2e:	4b26      	ldr	r3, [pc, #152]	@ (8001ec8 <HAL_GPIO_Init+0x350>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e52:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec8 <HAL_GPIO_Init+0x350>)
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e58:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <HAL_GPIO_Init+0x350>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e7c:	4a12      	ldr	r2, [pc, #72]	@ (8001ec8 <HAL_GPIO_Init+0x350>)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	3301      	adds	r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f47f ae78 	bne.w	8001b88 <HAL_GPIO_Init+0x10>
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	48000400 	.word	0x48000400
 8001eb4:	48000800 	.word	0x48000800
 8001eb8:	48000c00 	.word	0x48000c00
 8001ebc:	48001000 	.word	0x48001000
 8001ec0:	48001400 	.word	0x48001400
 8001ec4:	48001800 	.word	0x48001800
 8001ec8:	40010400 	.word	0x40010400

08001ecc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	887b      	ldrh	r3, [r7, #2]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
 8001ee8:	e001      	b.n	8001eee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	807b      	strh	r3, [r7, #2]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f0c:	787b      	ldrb	r3, [r7, #1]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f12:	887a      	ldrh	r2, [r7, #2]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f18:	e002      	b.n	8001f20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f1a:	887a      	ldrh	r2, [r7, #2]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f30:	4b04      	ldr	r3, [pc, #16]	@ (8001f44 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40007000 	.word	0x40007000

08001f48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f56:	d130      	bne.n	8001fba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f58:	4b23      	ldr	r3, [pc, #140]	@ (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f64:	d038      	beq.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f66:	4b20      	ldr	r3, [pc, #128]	@ (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f76:	4b1d      	ldr	r3, [pc, #116]	@ (8001fec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2232      	movs	r2, #50	@ 0x32
 8001f7c:	fb02 f303 	mul.w	r3, r2, r3
 8001f80:	4a1b      	ldr	r2, [pc, #108]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	0c9b      	lsrs	r3, r3, #18
 8001f88:	3301      	adds	r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f8c:	e002      	b.n	8001f94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f94:	4b14      	ldr	r3, [pc, #80]	@ (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fa0:	d102      	bne.n	8001fa8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f2      	bne.n	8001f8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fb4:	d110      	bne.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e00f      	b.n	8001fda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fba:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fc6:	d007      	beq.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fc8:	4b07      	ldr	r3, [pc, #28]	@ (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fd0:	4a05      	ldr	r2, [pc, #20]	@ (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40007000 	.word	0x40007000
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	431bde83 	.word	0x431bde83

08001ff4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e3ca      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002006:	4b97      	ldr	r3, [pc, #604]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002010:	4b94      	ldr	r3, [pc, #592]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 80e4 	beq.w	80021f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <HAL_RCC_OscConfig+0x4a>
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	2b0c      	cmp	r3, #12
 8002032:	f040 808b 	bne.w	800214c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b01      	cmp	r3, #1
 800203a:	f040 8087 	bne.w	800214c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800203e:	4b89      	ldr	r3, [pc, #548]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <HAL_RCC_OscConfig+0x62>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e3a2      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1a      	ldr	r2, [r3, #32]
 800205a:	4b82      	ldr	r3, [pc, #520]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d004      	beq.n	8002070 <HAL_RCC_OscConfig+0x7c>
 8002066:	4b7f      	ldr	r3, [pc, #508]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800206e:	e005      	b.n	800207c <HAL_RCC_OscConfig+0x88>
 8002070:	4b7c      	ldr	r3, [pc, #496]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 8002072:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002076:	091b      	lsrs	r3, r3, #4
 8002078:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800207c:	4293      	cmp	r3, r2
 800207e:	d223      	bcs.n	80020c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4618      	mov	r0, r3
 8002086:	f000 fd87 	bl	8002b98 <RCC_SetFlashLatencyFromMSIRange>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e383      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002094:	4b73      	ldr	r3, [pc, #460]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a72      	ldr	r2, [pc, #456]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 800209a:	f043 0308 	orr.w	r3, r3, #8
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	4b70      	ldr	r3, [pc, #448]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	496d      	ldr	r1, [pc, #436]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	4968      	ldr	r1, [pc, #416]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
 80020c6:	e025      	b.n	8002114 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c8:	4b66      	ldr	r3, [pc, #408]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a65      	ldr	r2, [pc, #404]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 80020ce:	f043 0308 	orr.w	r3, r3, #8
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b63      	ldr	r3, [pc, #396]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	4960      	ldr	r1, [pc, #384]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e6:	4b5f      	ldr	r3, [pc, #380]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	495b      	ldr	r1, [pc, #364]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d109      	bne.n	8002114 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4618      	mov	r0, r3
 8002106:	f000 fd47 	bl	8002b98 <RCC_SetFlashLatencyFromMSIRange>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e343      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002114:	f000 fc4a 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8002118:	4602      	mov	r2, r0
 800211a:	4b52      	ldr	r3, [pc, #328]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	4950      	ldr	r1, [pc, #320]	@ (8002268 <HAL_RCC_OscConfig+0x274>)
 8002126:	5ccb      	ldrb	r3, [r1, r3]
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
 8002130:	4a4e      	ldr	r2, [pc, #312]	@ (800226c <HAL_RCC_OscConfig+0x278>)
 8002132:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002134:	4b4e      	ldr	r3, [pc, #312]	@ (8002270 <HAL_RCC_OscConfig+0x27c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff faf5 	bl	8001728 <HAL_InitTick>
 800213e:	4603      	mov	r3, r0
 8002140:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d052      	beq.n	80021ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	e327      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d032      	beq.n	80021ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002154:	4b43      	ldr	r3, [pc, #268]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a42      	ldr	r2, [pc, #264]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002160:	f7ff fc1c 	bl	800199c <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002168:	f7ff fc18 	bl	800199c <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e310      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800217a:	4b3a      	ldr	r3, [pc, #232]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002186:	4b37      	ldr	r3, [pc, #220]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a36      	ldr	r2, [pc, #216]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 800218c:	f043 0308 	orr.w	r3, r3, #8
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b34      	ldr	r3, [pc, #208]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4931      	ldr	r1, [pc, #196]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	492c      	ldr	r1, [pc, #176]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]
 80021b8:	e01a      	b.n	80021f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a29      	ldr	r2, [pc, #164]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021c6:	f7ff fbe9 	bl	800199c <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021ce:	f7ff fbe5 	bl	800199c <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e2dd      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021e0:	4b20      	ldr	r3, [pc, #128]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f0      	bne.n	80021ce <HAL_RCC_OscConfig+0x1da>
 80021ec:	e000      	b.n	80021f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d074      	beq.n	80022e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d005      	beq.n	800220e <HAL_RCC_OscConfig+0x21a>
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	2b0c      	cmp	r3, #12
 8002206:	d10e      	bne.n	8002226 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d10b      	bne.n	8002226 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220e:	4b15      	ldr	r3, [pc, #84]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d064      	beq.n	80022e4 <HAL_RCC_OscConfig+0x2f0>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d160      	bne.n	80022e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e2ba      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800222e:	d106      	bne.n	800223e <HAL_RCC_OscConfig+0x24a>
 8002230:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0b      	ldr	r2, [pc, #44]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 8002236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	e026      	b.n	800228c <HAL_RCC_OscConfig+0x298>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002246:	d115      	bne.n	8002274 <HAL_RCC_OscConfig+0x280>
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a05      	ldr	r2, [pc, #20]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 800224e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	4b03      	ldr	r3, [pc, #12]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a02      	ldr	r2, [pc, #8]	@ (8002264 <HAL_RCC_OscConfig+0x270>)
 800225a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	e014      	b.n	800228c <HAL_RCC_OscConfig+0x298>
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	08006af4 	.word	0x08006af4
 800226c:	20000000 	.word	0x20000000
 8002270:	20000004 	.word	0x20000004
 8002274:	4ba0      	ldr	r3, [pc, #640]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a9f      	ldr	r2, [pc, #636]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 800227a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	4b9d      	ldr	r3, [pc, #628]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a9c      	ldr	r2, [pc, #624]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 8002286:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800228a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d013      	beq.n	80022bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7ff fb82 	bl	800199c <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7ff fb7e 	bl	800199c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	@ 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e276      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ae:	4b92      	ldr	r3, [pc, #584]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x2a8>
 80022ba:	e014      	b.n	80022e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7ff fb6e 	bl	800199c <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7ff fb6a 	bl	800199c <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	@ 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e262      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022d6:	4b88      	ldr	r3, [pc, #544]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x2d0>
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d060      	beq.n	80023b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_OscConfig+0x310>
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	2b0c      	cmp	r3, #12
 80022fc:	d119      	bne.n	8002332 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d116      	bne.n	8002332 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002304:	4b7c      	ldr	r3, [pc, #496]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_OscConfig+0x328>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e23f      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231c:	4b76      	ldr	r3, [pc, #472]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	061b      	lsls	r3, r3, #24
 800232a:	4973      	ldr	r1, [pc, #460]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 800232c:	4313      	orrs	r3, r2
 800232e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002330:	e040      	b.n	80023b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d023      	beq.n	8002382 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800233a:	4b6f      	ldr	r3, [pc, #444]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a6e      	ldr	r2, [pc, #440]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 8002340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7ff fb29 	bl	800199c <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234e:	f7ff fb25 	bl	800199c <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e21d      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002360:	4b65      	ldr	r3, [pc, #404]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236c:	4b62      	ldr	r3, [pc, #392]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	061b      	lsls	r3, r3, #24
 800237a:	495f      	ldr	r1, [pc, #380]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
 8002380:	e018      	b.n	80023b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002382:	4b5d      	ldr	r3, [pc, #372]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a5c      	ldr	r2, [pc, #368]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 8002388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800238c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238e:	f7ff fb05 	bl	800199c <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002396:	f7ff fb01 	bl	800199c <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e1f9      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023a8:	4b53      	ldr	r3, [pc, #332]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f0      	bne.n	8002396 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d03c      	beq.n	800243a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d01c      	beq.n	8002402 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c8:	4b4b      	ldr	r3, [pc, #300]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 80023ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ce:	4a4a      	ldr	r2, [pc, #296]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d8:	f7ff fae0 	bl	800199c <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e0:	f7ff fadc 	bl	800199c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e1d4      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023f2:	4b41      	ldr	r3, [pc, #260]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 80023f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0ef      	beq.n	80023e0 <HAL_RCC_OscConfig+0x3ec>
 8002400:	e01b      	b.n	800243a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002402:	4b3d      	ldr	r3, [pc, #244]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 8002404:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002408:	4a3b      	ldr	r2, [pc, #236]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 800240a:	f023 0301 	bic.w	r3, r3, #1
 800240e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002412:	f7ff fac3 	bl	800199c <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241a:	f7ff fabf 	bl	800199c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e1b7      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800242c:	4b32      	ldr	r3, [pc, #200]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 800242e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1ef      	bne.n	800241a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 80a6 	beq.w	8002594 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002448:	2300      	movs	r3, #0
 800244a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800244c:	4b2a      	ldr	r3, [pc, #168]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 800244e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10d      	bne.n	8002474 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002458:	4b27      	ldr	r3, [pc, #156]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 800245a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245c:	4a26      	ldr	r2, [pc, #152]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 800245e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002462:	6593      	str	r3, [r2, #88]	@ 0x58
 8002464:	4b24      	ldr	r3, [pc, #144]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 8002466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002470:	2301      	movs	r3, #1
 8002472:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002474:	4b21      	ldr	r3, [pc, #132]	@ (80024fc <HAL_RCC_OscConfig+0x508>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d118      	bne.n	80024b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002480:	4b1e      	ldr	r3, [pc, #120]	@ (80024fc <HAL_RCC_OscConfig+0x508>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1d      	ldr	r2, [pc, #116]	@ (80024fc <HAL_RCC_OscConfig+0x508>)
 8002486:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800248a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248c:	f7ff fa86 	bl	800199c <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002494:	f7ff fa82 	bl	800199c <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e17a      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a6:	4b15      	ldr	r3, [pc, #84]	@ (80024fc <HAL_RCC_OscConfig+0x508>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d108      	bne.n	80024cc <HAL_RCC_OscConfig+0x4d8>
 80024ba:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c0:	4a0d      	ldr	r2, [pc, #52]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024ca:	e029      	b.n	8002520 <HAL_RCC_OscConfig+0x52c>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d115      	bne.n	8002500 <HAL_RCC_OscConfig+0x50c>
 80024d4:	4b08      	ldr	r3, [pc, #32]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024da:	4a07      	ldr	r2, [pc, #28]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024e4:	4b04      	ldr	r3, [pc, #16]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ea:	4a03      	ldr	r2, [pc, #12]	@ (80024f8 <HAL_RCC_OscConfig+0x504>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024f4:	e014      	b.n	8002520 <HAL_RCC_OscConfig+0x52c>
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40007000 	.word	0x40007000
 8002500:	4b9c      	ldr	r3, [pc, #624]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 8002502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002506:	4a9b      	ldr	r2, [pc, #620]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002510:	4b98      	ldr	r3, [pc, #608]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 8002512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002516:	4a97      	ldr	r2, [pc, #604]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 8002518:	f023 0304 	bic.w	r3, r3, #4
 800251c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d016      	beq.n	8002556 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002528:	f7ff fa38 	bl	800199c <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252e:	e00a      	b.n	8002546 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002530:	f7ff fa34 	bl	800199c <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e12a      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002546:	4b8b      	ldr	r3, [pc, #556]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ed      	beq.n	8002530 <HAL_RCC_OscConfig+0x53c>
 8002554:	e015      	b.n	8002582 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002556:	f7ff fa21 	bl	800199c <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255e:	f7ff fa1d 	bl	800199c <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e113      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002574:	4b7f      	ldr	r3, [pc, #508]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1ed      	bne.n	800255e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002582:	7ffb      	ldrb	r3, [r7, #31]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002588:	4b7a      	ldr	r3, [pc, #488]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 800258a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258c:	4a79      	ldr	r2, [pc, #484]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 800258e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002592:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80fe 	beq.w	800279a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	f040 80d0 	bne.w	8002748 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025a8:	4b72      	ldr	r3, [pc, #456]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f003 0203 	and.w	r2, r3, #3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d130      	bne.n	800261e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	3b01      	subs	r3, #1
 80025c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d127      	bne.n	800261e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d11f      	bne.n	800261e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80025e8:	2a07      	cmp	r2, #7
 80025ea:	bf14      	ite	ne
 80025ec:	2201      	movne	r2, #1
 80025ee:	2200      	moveq	r2, #0
 80025f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d113      	bne.n	800261e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002600:	085b      	lsrs	r3, r3, #1
 8002602:	3b01      	subs	r3, #1
 8002604:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002606:	429a      	cmp	r2, r3
 8002608:	d109      	bne.n	800261e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002614:	085b      	lsrs	r3, r3, #1
 8002616:	3b01      	subs	r3, #1
 8002618:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d06e      	beq.n	80026fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b0c      	cmp	r3, #12
 8002622:	d069      	beq.n	80026f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002624:	4b53      	ldr	r3, [pc, #332]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d105      	bne.n	800263c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002630:	4b50      	ldr	r3, [pc, #320]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0ad      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002640:	4b4c      	ldr	r3, [pc, #304]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a4b      	ldr	r2, [pc, #300]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 8002646:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800264a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800264c:	f7ff f9a6 	bl	800199c <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7ff f9a2 	bl	800199c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e09a      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002666:	4b43      	ldr	r3, [pc, #268]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002672:	4b40      	ldr	r3, [pc, #256]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	4b40      	ldr	r3, [pc, #256]	@ (8002778 <HAL_RCC_OscConfig+0x784>)
 8002678:	4013      	ands	r3, r2
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002682:	3a01      	subs	r2, #1
 8002684:	0112      	lsls	r2, r2, #4
 8002686:	4311      	orrs	r1, r2
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800268c:	0212      	lsls	r2, r2, #8
 800268e:	4311      	orrs	r1, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002694:	0852      	lsrs	r2, r2, #1
 8002696:	3a01      	subs	r2, #1
 8002698:	0552      	lsls	r2, r2, #21
 800269a:	4311      	orrs	r1, r2
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026a0:	0852      	lsrs	r2, r2, #1
 80026a2:	3a01      	subs	r2, #1
 80026a4:	0652      	lsls	r2, r2, #25
 80026a6:	4311      	orrs	r1, r2
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026ac:	0912      	lsrs	r2, r2, #4
 80026ae:	0452      	lsls	r2, r2, #17
 80026b0:	430a      	orrs	r2, r1
 80026b2:	4930      	ldr	r1, [pc, #192]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 80026be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 80026ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026d0:	f7ff f964 	bl	800199c <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d8:	f7ff f960 	bl	800199c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e058      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ea:	4b22      	ldr	r3, [pc, #136]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026f6:	e050      	b.n	800279a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e04f      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d148      	bne.n	800279a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002708:	4b1a      	ldr	r3, [pc, #104]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a19      	ldr	r2, [pc, #100]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 800270e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002712:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002714:	4b17      	ldr	r3, [pc, #92]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a16      	ldr	r2, [pc, #88]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 800271a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800271e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002720:	f7ff f93c 	bl	800199c <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002728:	f7ff f938 	bl	800199c <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e030      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273a:	4b0e      	ldr	r3, [pc, #56]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x734>
 8002746:	e028      	b.n	800279a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b0c      	cmp	r3, #12
 800274c:	d023      	beq.n	8002796 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274e:	4b09      	ldr	r3, [pc, #36]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a08      	ldr	r2, [pc, #32]	@ (8002774 <HAL_RCC_OscConfig+0x780>)
 8002754:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275a:	f7ff f91f 	bl	800199c <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002760:	e00c      	b.n	800277c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002762:	f7ff f91b 	bl	800199c <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d905      	bls.n	800277c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e013      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
 8002774:	40021000 	.word	0x40021000
 8002778:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800277c:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <HAL_RCC_OscConfig+0x7b0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1ec      	bne.n	8002762 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002788:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <HAL_RCC_OscConfig+0x7b0>)
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	4905      	ldr	r1, [pc, #20]	@ (80027a4 <HAL_RCC_OscConfig+0x7b0>)
 800278e:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <HAL_RCC_OscConfig+0x7b4>)
 8002790:	4013      	ands	r3, r2
 8002792:	60cb      	str	r3, [r1, #12]
 8002794:	e001      	b.n	800279a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3720      	adds	r7, #32
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	feeefffc 	.word	0xfeeefffc

080027ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0e7      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c0:	4b75      	ldr	r3, [pc, #468]	@ (8002998 <HAL_RCC_ClockConfig+0x1ec>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d910      	bls.n	80027f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b72      	ldr	r3, [pc, #456]	@ (8002998 <HAL_RCC_ClockConfig+0x1ec>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 0207 	bic.w	r2, r3, #7
 80027d6:	4970      	ldr	r1, [pc, #448]	@ (8002998 <HAL_RCC_ClockConfig+0x1ec>)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b6e      	ldr	r3, [pc, #440]	@ (8002998 <HAL_RCC_ClockConfig+0x1ec>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0cf      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d010      	beq.n	800281e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	4b66      	ldr	r3, [pc, #408]	@ (800299c <HAL_RCC_ClockConfig+0x1f0>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002808:	429a      	cmp	r2, r3
 800280a:	d908      	bls.n	800281e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800280c:	4b63      	ldr	r3, [pc, #396]	@ (800299c <HAL_RCC_ClockConfig+0x1f0>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	4960      	ldr	r1, [pc, #384]	@ (800299c <HAL_RCC_ClockConfig+0x1f0>)
 800281a:	4313      	orrs	r3, r2
 800281c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d04c      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002832:	4b5a      	ldr	r3, [pc, #360]	@ (800299c <HAL_RCC_ClockConfig+0x1f0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d121      	bne.n	8002882 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0a6      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d107      	bne.n	800285a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800284a:	4b54      	ldr	r3, [pc, #336]	@ (800299c <HAL_RCC_ClockConfig+0x1f0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d115      	bne.n	8002882 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e09a      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d107      	bne.n	8002872 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002862:	4b4e      	ldr	r3, [pc, #312]	@ (800299c <HAL_RCC_ClockConfig+0x1f0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d109      	bne.n	8002882 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e08e      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002872:	4b4a      	ldr	r3, [pc, #296]	@ (800299c <HAL_RCC_ClockConfig+0x1f0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e086      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002882:	4b46      	ldr	r3, [pc, #280]	@ (800299c <HAL_RCC_ClockConfig+0x1f0>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f023 0203 	bic.w	r2, r3, #3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	4943      	ldr	r1, [pc, #268]	@ (800299c <HAL_RCC_ClockConfig+0x1f0>)
 8002890:	4313      	orrs	r3, r2
 8002892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002894:	f7ff f882 	bl	800199c <HAL_GetTick>
 8002898:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800289c:	f7ff f87e 	bl	800199c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e06e      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	4b3a      	ldr	r3, [pc, #232]	@ (800299c <HAL_RCC_ClockConfig+0x1f0>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 020c 	and.w	r2, r3, #12
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d1eb      	bne.n	800289c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d010      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	4b31      	ldr	r3, [pc, #196]	@ (800299c <HAL_RCC_ClockConfig+0x1f0>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028dc:	429a      	cmp	r2, r3
 80028de:	d208      	bcs.n	80028f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e0:	4b2e      	ldr	r3, [pc, #184]	@ (800299c <HAL_RCC_ClockConfig+0x1f0>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	492b      	ldr	r1, [pc, #172]	@ (800299c <HAL_RCC_ClockConfig+0x1f0>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028f2:	4b29      	ldr	r3, [pc, #164]	@ (8002998 <HAL_RCC_ClockConfig+0x1ec>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d210      	bcs.n	8002922 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002900:	4b25      	ldr	r3, [pc, #148]	@ (8002998 <HAL_RCC_ClockConfig+0x1ec>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f023 0207 	bic.w	r2, r3, #7
 8002908:	4923      	ldr	r1, [pc, #140]	@ (8002998 <HAL_RCC_ClockConfig+0x1ec>)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	4313      	orrs	r3, r2
 800290e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002910:	4b21      	ldr	r3, [pc, #132]	@ (8002998 <HAL_RCC_ClockConfig+0x1ec>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d001      	beq.n	8002922 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e036      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	d008      	beq.n	8002940 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800292e:	4b1b      	ldr	r3, [pc, #108]	@ (800299c <HAL_RCC_ClockConfig+0x1f0>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	4918      	ldr	r1, [pc, #96]	@ (800299c <HAL_RCC_ClockConfig+0x1f0>)
 800293c:	4313      	orrs	r3, r2
 800293e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d009      	beq.n	8002960 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800294c:	4b13      	ldr	r3, [pc, #76]	@ (800299c <HAL_RCC_ClockConfig+0x1f0>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4910      	ldr	r1, [pc, #64]	@ (800299c <HAL_RCC_ClockConfig+0x1f0>)
 800295c:	4313      	orrs	r3, r2
 800295e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002960:	f000 f824 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8002964:	4602      	mov	r2, r0
 8002966:	4b0d      	ldr	r3, [pc, #52]	@ (800299c <HAL_RCC_ClockConfig+0x1f0>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	091b      	lsrs	r3, r3, #4
 800296c:	f003 030f 	and.w	r3, r3, #15
 8002970:	490b      	ldr	r1, [pc, #44]	@ (80029a0 <HAL_RCC_ClockConfig+0x1f4>)
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
 800297c:	4a09      	ldr	r2, [pc, #36]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f8>)
 800297e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002980:	4b09      	ldr	r3, [pc, #36]	@ (80029a8 <HAL_RCC_ClockConfig+0x1fc>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe fecf 	bl	8001728 <HAL_InitTick>
 800298a:	4603      	mov	r3, r0
 800298c:	72fb      	strb	r3, [r7, #11]

  return status;
 800298e:	7afb      	ldrb	r3, [r7, #11]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40022000 	.word	0x40022000
 800299c:	40021000 	.word	0x40021000
 80029a0:	08006af4 	.word	0x08006af4
 80029a4:	20000000 	.word	0x20000000
 80029a8:	20000004 	.word	0x20000004

080029ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	@ 0x24
 80029b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ba:	4b3e      	ldr	r3, [pc, #248]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029c4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x34>
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d121      	bne.n	8002a1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d11e      	bne.n	8002a1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029e0:	4b34      	ldr	r3, [pc, #208]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d107      	bne.n	80029fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029ec:	4b31      	ldr	r3, [pc, #196]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029f2:	0a1b      	lsrs	r3, r3, #8
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	e005      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029fc:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a08:	4a2b      	ldr	r2, [pc, #172]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10d      	bne.n	8002a34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a1c:	e00a      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d102      	bne.n	8002a2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a24:	4b25      	ldr	r3, [pc, #148]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x110>)
 8002a26:	61bb      	str	r3, [r7, #24]
 8002a28:	e004      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a30:	4b23      	ldr	r3, [pc, #140]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	2b0c      	cmp	r3, #12
 8002a38:	d134      	bne.n	8002aa4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d003      	beq.n	8002a52 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d003      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0xac>
 8002a50:	e005      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a52:	4b1a      	ldr	r3, [pc, #104]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x110>)
 8002a54:	617b      	str	r3, [r7, #20]
      break;
 8002a56:	e005      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a58:	4b19      	ldr	r3, [pc, #100]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a5a:	617b      	str	r3, [r7, #20]
      break;
 8002a5c:	e002      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	617b      	str	r3, [r7, #20]
      break;
 8002a62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a64:	4b13      	ldr	r3, [pc, #76]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	3301      	adds	r3, #1
 8002a70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a72:	4b10      	ldr	r3, [pc, #64]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	0a1b      	lsrs	r3, r3, #8
 8002a78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	fb03 f202 	mul.w	r2, r3, r2
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	0e5b      	lsrs	r3, r3, #25
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	3301      	adds	r3, #1
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002aa4:	69bb      	ldr	r3, [r7, #24]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3724      	adds	r7, #36	@ 0x24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	08006b0c 	.word	0x08006b0c
 8002abc:	00f42400 	.word	0x00f42400
 8002ac0:	007a1200 	.word	0x007a1200

08002ac4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac8:	4b03      	ldr	r3, [pc, #12]	@ (8002ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000000 	.word	0x20000000

08002adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ae0:	f7ff fff0 	bl	8002ac4 <HAL_RCC_GetHCLKFreq>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4b06      	ldr	r3, [pc, #24]	@ (8002b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	0a1b      	lsrs	r3, r3, #8
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	4904      	ldr	r1, [pc, #16]	@ (8002b04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002af2:	5ccb      	ldrb	r3, [r1, r3]
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40021000 	.word	0x40021000
 8002b04:	08006b04 	.word	0x08006b04

08002b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b0c:	f7ff ffda 	bl	8002ac4 <HAL_RCC_GetHCLKFreq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	0adb      	lsrs	r3, r3, #11
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4904      	ldr	r1, [pc, #16]	@ (8002b30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	08006b04 	.word	0x08006b04

08002b34 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	220f      	movs	r2, #15
 8002b42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002b44:	4b12      	ldr	r3, [pc, #72]	@ (8002b90 <HAL_RCC_GetClockConfig+0x5c>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0203 	and.w	r2, r3, #3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002b50:	4b0f      	ldr	r3, [pc, #60]	@ (8002b90 <HAL_RCC_GetClockConfig+0x5c>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b90 <HAL_RCC_GetClockConfig+0x5c>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002b68:	4b09      	ldr	r3, [pc, #36]	@ (8002b90 <HAL_RCC_GetClockConfig+0x5c>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	08db      	lsrs	r3, r3, #3
 8002b6e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b76:	4b07      	ldr	r3, [pc, #28]	@ (8002b94 <HAL_RCC_GetClockConfig+0x60>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0207 	and.w	r2, r3, #7
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	601a      	str	r2, [r3, #0]
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40022000 	.word	0x40022000

08002b98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bb0:	f7ff f9bc 	bl	8001f2c <HAL_PWREx_GetVoltageRange>
 8002bb4:	6178      	str	r0, [r7, #20]
 8002bb6:	e014      	b.n	8002be2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bb8:	4b25      	ldr	r3, [pc, #148]	@ (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbc:	4a24      	ldr	r2, [pc, #144]	@ (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bc4:	4b22      	ldr	r3, [pc, #136]	@ (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bd0:	f7ff f9ac 	bl	8001f2c <HAL_PWREx_GetVoltageRange>
 8002bd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bda:	4a1d      	ldr	r2, [pc, #116]	@ (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002be0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002be8:	d10b      	bne.n	8002c02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b80      	cmp	r3, #128	@ 0x80
 8002bee:	d919      	bls.n	8002c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2ba0      	cmp	r3, #160	@ 0xa0
 8002bf4:	d902      	bls.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	e013      	b.n	8002c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	e010      	b.n	8002c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b80      	cmp	r3, #128	@ 0x80
 8002c06:	d902      	bls.n	8002c0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c08:	2303      	movs	r3, #3
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	e00a      	b.n	8002c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b80      	cmp	r3, #128	@ 0x80
 8002c12:	d102      	bne.n	8002c1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c14:	2302      	movs	r3, #2
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	e004      	b.n	8002c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b70      	cmp	r3, #112	@ 0x70
 8002c1e:	d101      	bne.n	8002c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c20:	2301      	movs	r3, #1
 8002c22:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c24:	4b0b      	ldr	r3, [pc, #44]	@ (8002c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f023 0207 	bic.w	r2, r3, #7
 8002c2c:	4909      	ldr	r1, [pc, #36]	@ (8002c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c34:	4b07      	ldr	r3, [pc, #28]	@ (8002c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d001      	beq.n	8002c46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40022000 	.word	0x40022000

08002c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c60:	2300      	movs	r3, #0
 8002c62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c64:	2300      	movs	r3, #0
 8002c66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d041      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c78:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c7c:	d02a      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c7e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c82:	d824      	bhi.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c88:	d008      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c8e:	d81e      	bhi.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c98:	d010      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c9a:	e018      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c9c:	4b86      	ldr	r3, [pc, #536]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4a85      	ldr	r2, [pc, #532]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ca8:	e015      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3304      	adds	r3, #4
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fabb 	bl	800322c <RCCEx_PLLSAI1_Config>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cba:	e00c      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3320      	adds	r3, #32
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fba6 	bl	8003414 <RCCEx_PLLSAI2_Config>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ccc:	e003      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	74fb      	strb	r3, [r7, #19]
      break;
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002cd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cd6:	7cfb      	ldrb	r3, [r7, #19]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10b      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cdc:	4b76      	ldr	r3, [pc, #472]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cea:	4973      	ldr	r1, [pc, #460]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002cf2:	e001      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d041      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d0c:	d02a      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d0e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d12:	d824      	bhi.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d18:	d008      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d1e:	d81e      	bhi.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00a      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d28:	d010      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d2a:	e018      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d2c:	4b62      	ldr	r3, [pc, #392]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4a61      	ldr	r2, [pc, #388]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d36:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d38:	e015      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 fa73 	bl	800322c <RCCEx_PLLSAI1_Config>
 8002d46:	4603      	mov	r3, r0
 8002d48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d4a:	e00c      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3320      	adds	r3, #32
 8002d50:	2100      	movs	r1, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fb5e 	bl	8003414 <RCCEx_PLLSAI2_Config>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d5c:	e003      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	74fb      	strb	r3, [r7, #19]
      break;
 8002d62:	e000      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d66:	7cfb      	ldrb	r3, [r7, #19]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10b      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d6c:	4b52      	ldr	r3, [pc, #328]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d72:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d7a:	494f      	ldr	r1, [pc, #316]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d82:	e001      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d84:	7cfb      	ldrb	r3, [r7, #19]
 8002d86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a0 	beq.w	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d9a:	4b47      	ldr	r3, [pc, #284]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002daa:	2300      	movs	r3, #0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00d      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db0:	4b41      	ldr	r3, [pc, #260]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db4:	4a40      	ldr	r2, [pc, #256]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dba:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dbc:	4b3e      	ldr	r3, [pc, #248]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a3a      	ldr	r2, [pc, #232]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dd8:	f7fe fde0 	bl	800199c <HAL_GetTick>
 8002ddc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dde:	e009      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de0:	f7fe fddc 	bl	800199c <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d902      	bls.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	74fb      	strb	r3, [r7, #19]
        break;
 8002df2:	e005      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002df4:	4b31      	ldr	r3, [pc, #196]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0ef      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e00:	7cfb      	ldrb	r3, [r7, #19]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d15c      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e06:	4b2c      	ldr	r3, [pc, #176]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01f      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d019      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e24:	4b24      	ldr	r3, [pc, #144]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e30:	4b21      	ldr	r3, [pc, #132]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e36:	4a20      	ldr	r2, [pc, #128]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e40:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e46:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e50:	4a19      	ldr	r2, [pc, #100]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d016      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e62:	f7fe fd9b 	bl	800199c <HAL_GetTick>
 8002e66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e68:	e00b      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f7fe fd97 	bl	800199c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d902      	bls.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	74fb      	strb	r3, [r7, #19]
            break;
 8002e80:	e006      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e82:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0ec      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e96:	4b08      	ldr	r3, [pc, #32]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ea6:	4904      	ldr	r1, [pc, #16]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002eae:	e009      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	74bb      	strb	r3, [r7, #18]
 8002eb4:	e006      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec0:	7cfb      	ldrb	r3, [r7, #19]
 8002ec2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec4:	7c7b      	ldrb	r3, [r7, #17]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d105      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eca:	4b9e      	ldr	r3, [pc, #632]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ece:	4a9d      	ldr	r2, [pc, #628]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ed4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ee2:	4b98      	ldr	r3, [pc, #608]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee8:	f023 0203 	bic.w	r2, r3, #3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef0:	4994      	ldr	r1, [pc, #592]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f04:	4b8f      	ldr	r3, [pc, #572]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0a:	f023 020c 	bic.w	r2, r3, #12
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f12:	498c      	ldr	r1, [pc, #560]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f26:	4b87      	ldr	r3, [pc, #540]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	4983      	ldr	r1, [pc, #524]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f48:	4b7e      	ldr	r3, [pc, #504]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f56:	497b      	ldr	r1, [pc, #492]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f6a:	4b76      	ldr	r3, [pc, #472]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f78:	4972      	ldr	r1, [pc, #456]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f8c:	4b6d      	ldr	r3, [pc, #436]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f92:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f9a:	496a      	ldr	r1, [pc, #424]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fae:	4b65      	ldr	r3, [pc, #404]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbc:	4961      	ldr	r1, [pc, #388]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fd0:	4b5c      	ldr	r3, [pc, #368]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fde:	4959      	ldr	r1, [pc, #356]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ff2:	4b54      	ldr	r3, [pc, #336]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003000:	4950      	ldr	r1, [pc, #320]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003014:	4b4b      	ldr	r3, [pc, #300]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003022:	4948      	ldr	r1, [pc, #288]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003036:	4b43      	ldr	r3, [pc, #268]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800303c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003044:	493f      	ldr	r1, [pc, #252]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d028      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003058:	4b3a      	ldr	r3, [pc, #232]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003066:	4937      	ldr	r1, [pc, #220]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003072:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003076:	d106      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003078:	4b32      	ldr	r3, [pc, #200]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4a31      	ldr	r2, [pc, #196]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003082:	60d3      	str	r3, [r2, #12]
 8003084:	e011      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800308a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800308e:	d10c      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	2101      	movs	r1, #1
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f8c8 	bl	800322c <RCCEx_PLLSAI1_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80030a6:	7cfb      	ldrb	r3, [r7, #19]
 80030a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d028      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030b6:	4b23      	ldr	r3, [pc, #140]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c4:	491f      	ldr	r1, [pc, #124]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030d4:	d106      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	4a1a      	ldr	r2, [pc, #104]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030e0:	60d3      	str	r3, [r2, #12]
 80030e2:	e011      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030ec:	d10c      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3304      	adds	r3, #4
 80030f2:	2101      	movs	r1, #1
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 f899 	bl	800322c <RCCEx_PLLSAI1_Config>
 80030fa:	4603      	mov	r3, r0
 80030fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030fe:	7cfb      	ldrb	r3, [r7, #19]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003104:	7cfb      	ldrb	r3, [r7, #19]
 8003106:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d02b      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003114:	4b0b      	ldr	r3, [pc, #44]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003122:	4908      	ldr	r1, [pc, #32]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800312e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003132:	d109      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003134:	4b03      	ldr	r3, [pc, #12]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4a02      	ldr	r2, [pc, #8]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800313e:	60d3      	str	r3, [r2, #12]
 8003140:	e014      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003142:	bf00      	nop
 8003144:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800314c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003150:	d10c      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3304      	adds	r3, #4
 8003156:	2101      	movs	r1, #1
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f867 	bl	800322c <RCCEx_PLLSAI1_Config>
 800315e:	4603      	mov	r3, r0
 8003160:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003162:	7cfb      	ldrb	r3, [r7, #19]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d02f      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003178:	4b2b      	ldr	r3, [pc, #172]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800317e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003186:	4928      	ldr	r1, [pc, #160]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003192:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003196:	d10d      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3304      	adds	r3, #4
 800319c:	2102      	movs	r1, #2
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 f844 	bl	800322c <RCCEx_PLLSAI1_Config>
 80031a4:	4603      	mov	r3, r0
 80031a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031a8:	7cfb      	ldrb	r3, [r7, #19]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d014      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031ae:	7cfb      	ldrb	r3, [r7, #19]
 80031b0:	74bb      	strb	r3, [r7, #18]
 80031b2:	e011      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3320      	adds	r3, #32
 80031c2:	2102      	movs	r1, #2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 f925 	bl	8003414 <RCCEx_PLLSAI2_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ce:	7cfb      	ldrb	r3, [r7, #19]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031d4:	7cfb      	ldrb	r3, [r7, #19]
 80031d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031e4:	4b10      	ldr	r3, [pc, #64]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031f2:	490d      	ldr	r1, [pc, #52]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00b      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003206:	4b08      	ldr	r3, [pc, #32]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003216:	4904      	ldr	r1, [pc, #16]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800321e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40021000 	.word	0x40021000

0800322c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800323a:	4b75      	ldr	r3, [pc, #468]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d018      	beq.n	8003278 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003246:	4b72      	ldr	r3, [pc, #456]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f003 0203 	and.w	r2, r3, #3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d10d      	bne.n	8003272 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
       ||
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800325e:	4b6c      	ldr	r3, [pc, #432]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	091b      	lsrs	r3, r3, #4
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
       ||
 800326e:	429a      	cmp	r2, r3
 8003270:	d047      	beq.n	8003302 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
 8003276:	e044      	b.n	8003302 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b03      	cmp	r3, #3
 800327e:	d018      	beq.n	80032b2 <RCCEx_PLLSAI1_Config+0x86>
 8003280:	2b03      	cmp	r3, #3
 8003282:	d825      	bhi.n	80032d0 <RCCEx_PLLSAI1_Config+0xa4>
 8003284:	2b01      	cmp	r3, #1
 8003286:	d002      	beq.n	800328e <RCCEx_PLLSAI1_Config+0x62>
 8003288:	2b02      	cmp	r3, #2
 800328a:	d009      	beq.n	80032a0 <RCCEx_PLLSAI1_Config+0x74>
 800328c:	e020      	b.n	80032d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800328e:	4b60      	ldr	r3, [pc, #384]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d11d      	bne.n	80032d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800329e:	e01a      	b.n	80032d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032a0:	4b5b      	ldr	r3, [pc, #364]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d116      	bne.n	80032da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032b0:	e013      	b.n	80032da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032b2:	4b57      	ldr	r3, [pc, #348]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10f      	bne.n	80032de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032be:	4b54      	ldr	r3, [pc, #336]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032ce:	e006      	b.n	80032de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
      break;
 80032d4:	e004      	b.n	80032e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032d6:	bf00      	nop
 80032d8:	e002      	b.n	80032e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032da:	bf00      	nop
 80032dc:	e000      	b.n	80032e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032de:	bf00      	nop
    }

    if(status == HAL_OK)
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10d      	bne.n	8003302 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6819      	ldr	r1, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	430b      	orrs	r3, r1
 80032fc:	4944      	ldr	r1, [pc, #272]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d17d      	bne.n	8003404 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003308:	4b41      	ldr	r3, [pc, #260]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a40      	ldr	r2, [pc, #256]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 800330e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003314:	f7fe fb42 	bl	800199c <HAL_GetTick>
 8003318:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800331a:	e009      	b.n	8003330 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800331c:	f7fe fb3e 	bl	800199c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d902      	bls.n	8003330 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	73fb      	strb	r3, [r7, #15]
        break;
 800332e:	e005      	b.n	800333c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003330:	4b37      	ldr	r3, [pc, #220]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1ef      	bne.n	800331c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d160      	bne.n	8003404 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d111      	bne.n	800336c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003348:	4b31      	ldr	r3, [pc, #196]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003350:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6892      	ldr	r2, [r2, #8]
 8003358:	0211      	lsls	r1, r2, #8
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68d2      	ldr	r2, [r2, #12]
 800335e:	0912      	lsrs	r2, r2, #4
 8003360:	0452      	lsls	r2, r2, #17
 8003362:	430a      	orrs	r2, r1
 8003364:	492a      	ldr	r1, [pc, #168]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003366:	4313      	orrs	r3, r2
 8003368:	610b      	str	r3, [r1, #16]
 800336a:	e027      	b.n	80033bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d112      	bne.n	8003398 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003372:	4b27      	ldr	r3, [pc, #156]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800337a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6892      	ldr	r2, [r2, #8]
 8003382:	0211      	lsls	r1, r2, #8
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6912      	ldr	r2, [r2, #16]
 8003388:	0852      	lsrs	r2, r2, #1
 800338a:	3a01      	subs	r2, #1
 800338c:	0552      	lsls	r2, r2, #21
 800338e:	430a      	orrs	r2, r1
 8003390:	491f      	ldr	r1, [pc, #124]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003392:	4313      	orrs	r3, r2
 8003394:	610b      	str	r3, [r1, #16]
 8003396:	e011      	b.n	80033bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003398:	4b1d      	ldr	r3, [pc, #116]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80033a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6892      	ldr	r2, [r2, #8]
 80033a8:	0211      	lsls	r1, r2, #8
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6952      	ldr	r2, [r2, #20]
 80033ae:	0852      	lsrs	r2, r2, #1
 80033b0:	3a01      	subs	r2, #1
 80033b2:	0652      	lsls	r2, r2, #25
 80033b4:	430a      	orrs	r2, r1
 80033b6:	4916      	ldr	r1, [pc, #88]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80033bc:	4b14      	ldr	r3, [pc, #80]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a13      	ldr	r2, [pc, #76]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7fe fae8 	bl	800199c <HAL_GetTick>
 80033cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033ce:	e009      	b.n	80033e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033d0:	f7fe fae4 	bl	800199c <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d902      	bls.n	80033e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	73fb      	strb	r3, [r7, #15]
          break;
 80033e2:	e005      	b.n	80033f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0ef      	beq.n	80033d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033f6:	4b06      	ldr	r3, [pc, #24]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f8:	691a      	ldr	r2, [r3, #16]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	4904      	ldr	r1, [pc, #16]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003400:	4313      	orrs	r3, r2
 8003402:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003404:	7bfb      	ldrb	r3, [r7, #15]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000

08003414 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003422:	4b6a      	ldr	r3, [pc, #424]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d018      	beq.n	8003460 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800342e:	4b67      	ldr	r3, [pc, #412]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0203 	and.w	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d10d      	bne.n	800345a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
       ||
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003446:	4b61      	ldr	r3, [pc, #388]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
       ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d047      	beq.n	80034ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
 800345e:	e044      	b.n	80034ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b03      	cmp	r3, #3
 8003466:	d018      	beq.n	800349a <RCCEx_PLLSAI2_Config+0x86>
 8003468:	2b03      	cmp	r3, #3
 800346a:	d825      	bhi.n	80034b8 <RCCEx_PLLSAI2_Config+0xa4>
 800346c:	2b01      	cmp	r3, #1
 800346e:	d002      	beq.n	8003476 <RCCEx_PLLSAI2_Config+0x62>
 8003470:	2b02      	cmp	r3, #2
 8003472:	d009      	beq.n	8003488 <RCCEx_PLLSAI2_Config+0x74>
 8003474:	e020      	b.n	80034b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003476:	4b55      	ldr	r3, [pc, #340]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d11d      	bne.n	80034be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003486:	e01a      	b.n	80034be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003488:	4b50      	ldr	r3, [pc, #320]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003490:	2b00      	cmp	r3, #0
 8003492:	d116      	bne.n	80034c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003498:	e013      	b.n	80034c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800349a:	4b4c      	ldr	r3, [pc, #304]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10f      	bne.n	80034c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034a6:	4b49      	ldr	r3, [pc, #292]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034b6:	e006      	b.n	80034c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
      break;
 80034bc:	e004      	b.n	80034c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034be:	bf00      	nop
 80034c0:	e002      	b.n	80034c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10d      	bne.n	80034ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034ce:	4b3f      	ldr	r3, [pc, #252]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6819      	ldr	r1, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	430b      	orrs	r3, r1
 80034e4:	4939      	ldr	r1, [pc, #228]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d167      	bne.n	80035c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034f0:	4b36      	ldr	r3, [pc, #216]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a35      	ldr	r2, [pc, #212]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034fc:	f7fe fa4e 	bl	800199c <HAL_GetTick>
 8003500:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003502:	e009      	b.n	8003518 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003504:	f7fe fa4a 	bl	800199c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d902      	bls.n	8003518 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	73fb      	strb	r3, [r7, #15]
        break;
 8003516:	e005      	b.n	8003524 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003518:	4b2c      	ldr	r3, [pc, #176]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1ef      	bne.n	8003504 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d14a      	bne.n	80035c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d111      	bne.n	8003554 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003530:	4b26      	ldr	r3, [pc, #152]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003538:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6892      	ldr	r2, [r2, #8]
 8003540:	0211      	lsls	r1, r2, #8
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68d2      	ldr	r2, [r2, #12]
 8003546:	0912      	lsrs	r2, r2, #4
 8003548:	0452      	lsls	r2, r2, #17
 800354a:	430a      	orrs	r2, r1
 800354c:	491f      	ldr	r1, [pc, #124]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800354e:	4313      	orrs	r3, r2
 8003550:	614b      	str	r3, [r1, #20]
 8003552:	e011      	b.n	8003578 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003554:	4b1d      	ldr	r3, [pc, #116]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800355c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6892      	ldr	r2, [r2, #8]
 8003564:	0211      	lsls	r1, r2, #8
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6912      	ldr	r2, [r2, #16]
 800356a:	0852      	lsrs	r2, r2, #1
 800356c:	3a01      	subs	r2, #1
 800356e:	0652      	lsls	r2, r2, #25
 8003570:	430a      	orrs	r2, r1
 8003572:	4916      	ldr	r1, [pc, #88]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003574:	4313      	orrs	r3, r2
 8003576:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003578:	4b14      	ldr	r3, [pc, #80]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a13      	ldr	r2, [pc, #76]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800357e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003582:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7fe fa0a 	bl	800199c <HAL_GetTick>
 8003588:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800358a:	e009      	b.n	80035a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800358c:	f7fe fa06 	bl	800199c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d902      	bls.n	80035a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	73fb      	strb	r3, [r7, #15]
          break;
 800359e:	e005      	b.n	80035ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035a0:	4b0a      	ldr	r3, [pc, #40]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0ef      	beq.n	800358c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80035b2:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	4904      	ldr	r1, [pc, #16]	@ (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000

080035d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e049      	b.n	8003676 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fe f81c 	bl	8001634 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3304      	adds	r3, #4
 800360c:	4619      	mov	r1, r3
 800360e:	4610      	mov	r0, r2
 8003610:	f000 fb06 	bl	8003c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b01      	cmp	r3, #1
 8003692:	d001      	beq.n	8003698 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e047      	b.n	8003728 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a23      	ldr	r2, [pc, #140]	@ (8003734 <HAL_TIM_Base_Start+0xb4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d01d      	beq.n	80036e6 <HAL_TIM_Base_Start+0x66>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b2:	d018      	beq.n	80036e6 <HAL_TIM_Base_Start+0x66>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003738 <HAL_TIM_Base_Start+0xb8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <HAL_TIM_Base_Start+0x66>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a1e      	ldr	r2, [pc, #120]	@ (800373c <HAL_TIM_Base_Start+0xbc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00e      	beq.n	80036e6 <HAL_TIM_Base_Start+0x66>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003740 <HAL_TIM_Base_Start+0xc0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d009      	beq.n	80036e6 <HAL_TIM_Base_Start+0x66>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003744 <HAL_TIM_Base_Start+0xc4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d004      	beq.n	80036e6 <HAL_TIM_Base_Start+0x66>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a19      	ldr	r2, [pc, #100]	@ (8003748 <HAL_TIM_Base_Start+0xc8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d115      	bne.n	8003712 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	4b17      	ldr	r3, [pc, #92]	@ (800374c <HAL_TIM_Base_Start+0xcc>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b06      	cmp	r3, #6
 80036f6:	d015      	beq.n	8003724 <HAL_TIM_Base_Start+0xa4>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036fe:	d011      	beq.n	8003724 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003710:	e008      	b.n	8003724 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0201 	orr.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	e000      	b.n	8003726 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003724:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	40012c00 	.word	0x40012c00
 8003738:	40000400 	.word	0x40000400
 800373c:	40000800 	.word	0x40000800
 8003740:	40000c00 	.word	0x40000c00
 8003744:	40013400 	.word	0x40013400
 8003748:	40014000 	.word	0x40014000
 800374c:	00010007 	.word	0x00010007

08003750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b01      	cmp	r3, #1
 8003762:	d001      	beq.n	8003768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e04f      	b.n	8003808 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a23      	ldr	r2, [pc, #140]	@ (8003814 <HAL_TIM_Base_Start_IT+0xc4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d01d      	beq.n	80037c6 <HAL_TIM_Base_Start_IT+0x76>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003792:	d018      	beq.n	80037c6 <HAL_TIM_Base_Start_IT+0x76>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a1f      	ldr	r2, [pc, #124]	@ (8003818 <HAL_TIM_Base_Start_IT+0xc8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d013      	beq.n	80037c6 <HAL_TIM_Base_Start_IT+0x76>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1e      	ldr	r2, [pc, #120]	@ (800381c <HAL_TIM_Base_Start_IT+0xcc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00e      	beq.n	80037c6 <HAL_TIM_Base_Start_IT+0x76>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003820 <HAL_TIM_Base_Start_IT+0xd0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d009      	beq.n	80037c6 <HAL_TIM_Base_Start_IT+0x76>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003824 <HAL_TIM_Base_Start_IT+0xd4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d004      	beq.n	80037c6 <HAL_TIM_Base_Start_IT+0x76>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a19      	ldr	r2, [pc, #100]	@ (8003828 <HAL_TIM_Base_Start_IT+0xd8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d115      	bne.n	80037f2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	4b17      	ldr	r3, [pc, #92]	@ (800382c <HAL_TIM_Base_Start_IT+0xdc>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b06      	cmp	r3, #6
 80037d6:	d015      	beq.n	8003804 <HAL_TIM_Base_Start_IT+0xb4>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037de:	d011      	beq.n	8003804 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f0:	e008      	b.n	8003804 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 0201 	orr.w	r2, r2, #1
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	e000      	b.n	8003806 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003804:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40000400 	.word	0x40000400
 800381c:	40000800 	.word	0x40000800
 8003820:	40000c00 	.word	0x40000c00
 8003824:	40013400 	.word	0x40013400
 8003828:	40014000 	.word	0x40014000
 800382c:	00010007 	.word	0x00010007

08003830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d020      	beq.n	8003894 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01b      	beq.n	8003894 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0202 	mvn.w	r2, #2
 8003864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f9b2 	bl	8003be4 <HAL_TIM_IC_CaptureCallback>
 8003880:	e005      	b.n	800388e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f9a4 	bl	8003bd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f9b5 	bl	8003bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	d020      	beq.n	80038e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01b      	beq.n	80038e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0204 	mvn.w	r2, #4
 80038b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2202      	movs	r2, #2
 80038b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f98c 	bl	8003be4 <HAL_TIM_IC_CaptureCallback>
 80038cc:	e005      	b.n	80038da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f97e 	bl	8003bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f98f 	bl	8003bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d020      	beq.n	800392c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01b      	beq.n	800392c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0208 	mvn.w	r2, #8
 80038fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2204      	movs	r2, #4
 8003902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f966 	bl	8003be4 <HAL_TIM_IC_CaptureCallback>
 8003918:	e005      	b.n	8003926 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f958 	bl	8003bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f969 	bl	8003bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	2b00      	cmp	r3, #0
 8003934:	d020      	beq.n	8003978 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01b      	beq.n	8003978 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0210 	mvn.w	r2, #16
 8003948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2208      	movs	r2, #8
 800394e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f940 	bl	8003be4 <HAL_TIM_IC_CaptureCallback>
 8003964:	e005      	b.n	8003972 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f932 	bl	8003bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f943 	bl	8003bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00c      	beq.n	800399c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d007      	beq.n	800399c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0201 	mvn.w	r2, #1
 8003994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fd fe0c 	bl	80015b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d104      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00c      	beq.n	80039ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d007      	beq.n	80039ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80039c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fafd 	bl	8003fc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00c      	beq.n	80039ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d007      	beq.n	80039ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80039e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 faf5 	bl	8003fd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00c      	beq.n	8003a12 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d007      	beq.n	8003a12 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f8fd 	bl	8003c0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00c      	beq.n	8003a36 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f06f 0220 	mvn.w	r2, #32
 8003a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fabd 	bl	8003fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_TIM_ConfigClockSource+0x1c>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e0b6      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x18a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2202      	movs	r2, #2
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a78:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a7c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a84:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a96:	d03e      	beq.n	8003b16 <HAL_TIM_ConfigClockSource+0xd8>
 8003a98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a9c:	f200 8087 	bhi.w	8003bae <HAL_TIM_ConfigClockSource+0x170>
 8003aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa4:	f000 8086 	beq.w	8003bb4 <HAL_TIM_ConfigClockSource+0x176>
 8003aa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aac:	d87f      	bhi.n	8003bae <HAL_TIM_ConfigClockSource+0x170>
 8003aae:	2b70      	cmp	r3, #112	@ 0x70
 8003ab0:	d01a      	beq.n	8003ae8 <HAL_TIM_ConfigClockSource+0xaa>
 8003ab2:	2b70      	cmp	r3, #112	@ 0x70
 8003ab4:	d87b      	bhi.n	8003bae <HAL_TIM_ConfigClockSource+0x170>
 8003ab6:	2b60      	cmp	r3, #96	@ 0x60
 8003ab8:	d050      	beq.n	8003b5c <HAL_TIM_ConfigClockSource+0x11e>
 8003aba:	2b60      	cmp	r3, #96	@ 0x60
 8003abc:	d877      	bhi.n	8003bae <HAL_TIM_ConfigClockSource+0x170>
 8003abe:	2b50      	cmp	r3, #80	@ 0x50
 8003ac0:	d03c      	beq.n	8003b3c <HAL_TIM_ConfigClockSource+0xfe>
 8003ac2:	2b50      	cmp	r3, #80	@ 0x50
 8003ac4:	d873      	bhi.n	8003bae <HAL_TIM_ConfigClockSource+0x170>
 8003ac6:	2b40      	cmp	r3, #64	@ 0x40
 8003ac8:	d058      	beq.n	8003b7c <HAL_TIM_ConfigClockSource+0x13e>
 8003aca:	2b40      	cmp	r3, #64	@ 0x40
 8003acc:	d86f      	bhi.n	8003bae <HAL_TIM_ConfigClockSource+0x170>
 8003ace:	2b30      	cmp	r3, #48	@ 0x30
 8003ad0:	d064      	beq.n	8003b9c <HAL_TIM_ConfigClockSource+0x15e>
 8003ad2:	2b30      	cmp	r3, #48	@ 0x30
 8003ad4:	d86b      	bhi.n	8003bae <HAL_TIM_ConfigClockSource+0x170>
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d060      	beq.n	8003b9c <HAL_TIM_ConfigClockSource+0x15e>
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d867      	bhi.n	8003bae <HAL_TIM_ConfigClockSource+0x170>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d05c      	beq.n	8003b9c <HAL_TIM_ConfigClockSource+0x15e>
 8003ae2:	2b10      	cmp	r3, #16
 8003ae4:	d05a      	beq.n	8003b9c <HAL_TIM_ConfigClockSource+0x15e>
 8003ae6:	e062      	b.n	8003bae <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003af8:	f000 f9b2 	bl	8003e60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b0a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	609a      	str	r2, [r3, #8]
      break;
 8003b14:	e04f      	b.n	8003bb6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b26:	f000 f99b 	bl	8003e60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b38:	609a      	str	r2, [r3, #8]
      break;
 8003b3a:	e03c      	b.n	8003bb6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b48:	461a      	mov	r2, r3
 8003b4a:	f000 f90f 	bl	8003d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2150      	movs	r1, #80	@ 0x50
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 f968 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 8003b5a:	e02c      	b.n	8003bb6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f000 f92e 	bl	8003dca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2160      	movs	r1, #96	@ 0x60
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 f958 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 8003b7a:	e01c      	b.n	8003bb6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b88:	461a      	mov	r2, r3
 8003b8a:	f000 f8ef 	bl	8003d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2140      	movs	r1, #64	@ 0x40
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 f948 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 8003b9a:	e00c      	b.n	8003bb6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	f000 f93f 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 8003bac:	e003      	b.n	8003bb6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb2:	e000      	b.n	8003bb6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003bb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a46      	ldr	r2, [pc, #280]	@ (8003d4c <TIM_Base_SetConfig+0x12c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d013      	beq.n	8003c60 <TIM_Base_SetConfig+0x40>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c3e:	d00f      	beq.n	8003c60 <TIM_Base_SetConfig+0x40>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a43      	ldr	r2, [pc, #268]	@ (8003d50 <TIM_Base_SetConfig+0x130>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00b      	beq.n	8003c60 <TIM_Base_SetConfig+0x40>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a42      	ldr	r2, [pc, #264]	@ (8003d54 <TIM_Base_SetConfig+0x134>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d007      	beq.n	8003c60 <TIM_Base_SetConfig+0x40>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a41      	ldr	r2, [pc, #260]	@ (8003d58 <TIM_Base_SetConfig+0x138>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d003      	beq.n	8003c60 <TIM_Base_SetConfig+0x40>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a40      	ldr	r2, [pc, #256]	@ (8003d5c <TIM_Base_SetConfig+0x13c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d108      	bne.n	8003c72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a35      	ldr	r2, [pc, #212]	@ (8003d4c <TIM_Base_SetConfig+0x12c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d01f      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c80:	d01b      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a32      	ldr	r2, [pc, #200]	@ (8003d50 <TIM_Base_SetConfig+0x130>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d017      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a31      	ldr	r2, [pc, #196]	@ (8003d54 <TIM_Base_SetConfig+0x134>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a30      	ldr	r2, [pc, #192]	@ (8003d58 <TIM_Base_SetConfig+0x138>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00f      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a2f      	ldr	r2, [pc, #188]	@ (8003d5c <TIM_Base_SetConfig+0x13c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00b      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a2e      	ldr	r2, [pc, #184]	@ (8003d60 <TIM_Base_SetConfig+0x140>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d007      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a2d      	ldr	r2, [pc, #180]	@ (8003d64 <TIM_Base_SetConfig+0x144>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d003      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a2c      	ldr	r2, [pc, #176]	@ (8003d68 <TIM_Base_SetConfig+0x148>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d108      	bne.n	8003ccc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a16      	ldr	r2, [pc, #88]	@ (8003d4c <TIM_Base_SetConfig+0x12c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00f      	beq.n	8003d18 <TIM_Base_SetConfig+0xf8>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a18      	ldr	r2, [pc, #96]	@ (8003d5c <TIM_Base_SetConfig+0x13c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00b      	beq.n	8003d18 <TIM_Base_SetConfig+0xf8>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a17      	ldr	r2, [pc, #92]	@ (8003d60 <TIM_Base_SetConfig+0x140>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d007      	beq.n	8003d18 <TIM_Base_SetConfig+0xf8>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a16      	ldr	r2, [pc, #88]	@ (8003d64 <TIM_Base_SetConfig+0x144>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_Base_SetConfig+0xf8>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a15      	ldr	r2, [pc, #84]	@ (8003d68 <TIM_Base_SetConfig+0x148>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d103      	bne.n	8003d20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d105      	bne.n	8003d3e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f023 0201 	bic.w	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	611a      	str	r2, [r3, #16]
  }
}
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40012c00 	.word	0x40012c00
 8003d50:	40000400 	.word	0x40000400
 8003d54:	40000800 	.word	0x40000800
 8003d58:	40000c00 	.word	0x40000c00
 8003d5c:	40013400 	.word	0x40013400
 8003d60:	40014000 	.word	0x40014000
 8003d64:	40014400 	.word	0x40014400
 8003d68:	40014800 	.word	0x40014800

08003d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	f023 0201 	bic.w	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f023 030a 	bic.w	r3, r3, #10
 8003da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b087      	sub	sp, #28
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	f023 0210 	bic.w	r2, r3, #16
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	031b      	lsls	r3, r3, #12
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	621a      	str	r2, [r3, #32]
}
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b085      	sub	sp, #20
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f043 0307 	orr.w	r3, r3, #7
 8003e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	609a      	str	r2, [r3, #8]
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	021a      	lsls	r2, r3, #8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	609a      	str	r2, [r3, #8]
}
 8003e94:	bf00      	nop
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e068      	b.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a2e      	ldr	r2, [pc, #184]	@ (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d004      	beq.n	8003eec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a2d      	ldr	r2, [pc, #180]	@ (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d108      	bne.n	8003efe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003ef2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d01d      	beq.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f2a:	d018      	beq.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a1b      	ldr	r2, [pc, #108]	@ (8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00e      	beq.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a18      	ldr	r2, [pc, #96]	@ (8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d009      	beq.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a13      	ldr	r2, [pc, #76]	@ (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d004      	beq.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a14      	ldr	r2, [pc, #80]	@ (8003fac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d10c      	bne.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40012c00 	.word	0x40012c00
 8003f9c:	40013400 	.word	0x40013400
 8003fa0:	40000400 	.word	0x40000400
 8003fa4:	40000800 	.word	0x40000800
 8003fa8:	40000c00 	.word	0x40000c00
 8003fac:	40014000 	.word	0x40014000

08003fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e040      	b.n	8004080 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fd fb2e 	bl	8001670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2224      	movs	r2, #36	@ 0x24
 8004018:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0201 	bic.w	r2, r2, #1
 8004028:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fb6a 	bl	800470c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f8af 	bl	800419c <UART_SetConfig>
 800403e:	4603      	mov	r3, r0
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e01b      	b.n	8004080 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004056:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004066:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fbe9 	bl	8004850 <UART_CheckIdleState>
 800407e:	4603      	mov	r3, r0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08a      	sub	sp, #40	@ 0x28
 800408c:	af02      	add	r7, sp, #8
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	4613      	mov	r3, r2
 8004096:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800409c:	2b20      	cmp	r3, #32
 800409e:	d177      	bne.n	8004190 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <HAL_UART_Transmit+0x24>
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e070      	b.n	8004192 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2221      	movs	r2, #33	@ 0x21
 80040bc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040be:	f7fd fc6d 	bl	800199c <HAL_GetTick>
 80040c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	88fa      	ldrh	r2, [r7, #6]
 80040c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	88fa      	ldrh	r2, [r7, #6]
 80040d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040dc:	d108      	bne.n	80040f0 <HAL_UART_Transmit+0x68>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d104      	bne.n	80040f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	e003      	b.n	80040f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040f8:	e02f      	b.n	800415a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2200      	movs	r2, #0
 8004102:	2180      	movs	r1, #128	@ 0x80
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fc4b 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d004      	beq.n	800411a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e03b      	b.n	8004192 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10b      	bne.n	8004138 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	881a      	ldrh	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800412c:	b292      	uxth	r2, r2
 800412e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	3302      	adds	r3, #2
 8004134:	61bb      	str	r3, [r7, #24]
 8004136:	e007      	b.n	8004148 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	781a      	ldrb	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	3301      	adds	r3, #1
 8004146:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1c9      	bne.n	80040fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2200      	movs	r2, #0
 800416e:	2140      	movs	r1, #64	@ 0x40
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 fc15 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d004      	beq.n	8004186 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2220      	movs	r2, #32
 8004180:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e005      	b.n	8004192 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800418c:	2300      	movs	r3, #0
 800418e:	e000      	b.n	8004192 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004190:	2302      	movs	r3, #2
  }
}
 8004192:	4618      	mov	r0, r3
 8004194:	3720      	adds	r7, #32
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800419c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041a0:	b08a      	sub	sp, #40	@ 0x28
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	4ba4      	ldr	r3, [pc, #656]	@ (800445c <UART_SetConfig+0x2c0>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a99      	ldr	r2, [pc, #612]	@ (8004460 <UART_SetConfig+0x2c4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d004      	beq.n	8004208 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004204:	4313      	orrs	r3, r2
 8004206:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004218:	430a      	orrs	r2, r1
 800421a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a90      	ldr	r2, [pc, #576]	@ (8004464 <UART_SetConfig+0x2c8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d126      	bne.n	8004274 <UART_SetConfig+0xd8>
 8004226:	4b90      	ldr	r3, [pc, #576]	@ (8004468 <UART_SetConfig+0x2cc>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	2b03      	cmp	r3, #3
 8004232:	d81b      	bhi.n	800426c <UART_SetConfig+0xd0>
 8004234:	a201      	add	r2, pc, #4	@ (adr r2, 800423c <UART_SetConfig+0xa0>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	0800424d 	.word	0x0800424d
 8004240:	0800425d 	.word	0x0800425d
 8004244:	08004255 	.word	0x08004255
 8004248:	08004265 	.word	0x08004265
 800424c:	2301      	movs	r3, #1
 800424e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004252:	e116      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004254:	2302      	movs	r3, #2
 8004256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800425a:	e112      	b.n	8004482 <UART_SetConfig+0x2e6>
 800425c:	2304      	movs	r3, #4
 800425e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004262:	e10e      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004264:	2308      	movs	r3, #8
 8004266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800426a:	e10a      	b.n	8004482 <UART_SetConfig+0x2e6>
 800426c:	2310      	movs	r3, #16
 800426e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004272:	e106      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a7c      	ldr	r2, [pc, #496]	@ (800446c <UART_SetConfig+0x2d0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d138      	bne.n	80042f0 <UART_SetConfig+0x154>
 800427e:	4b7a      	ldr	r3, [pc, #488]	@ (8004468 <UART_SetConfig+0x2cc>)
 8004280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004284:	f003 030c 	and.w	r3, r3, #12
 8004288:	2b0c      	cmp	r3, #12
 800428a:	d82d      	bhi.n	80042e8 <UART_SetConfig+0x14c>
 800428c:	a201      	add	r2, pc, #4	@ (adr r2, 8004294 <UART_SetConfig+0xf8>)
 800428e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004292:	bf00      	nop
 8004294:	080042c9 	.word	0x080042c9
 8004298:	080042e9 	.word	0x080042e9
 800429c:	080042e9 	.word	0x080042e9
 80042a0:	080042e9 	.word	0x080042e9
 80042a4:	080042d9 	.word	0x080042d9
 80042a8:	080042e9 	.word	0x080042e9
 80042ac:	080042e9 	.word	0x080042e9
 80042b0:	080042e9 	.word	0x080042e9
 80042b4:	080042d1 	.word	0x080042d1
 80042b8:	080042e9 	.word	0x080042e9
 80042bc:	080042e9 	.word	0x080042e9
 80042c0:	080042e9 	.word	0x080042e9
 80042c4:	080042e1 	.word	0x080042e1
 80042c8:	2300      	movs	r3, #0
 80042ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ce:	e0d8      	b.n	8004482 <UART_SetConfig+0x2e6>
 80042d0:	2302      	movs	r3, #2
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042d6:	e0d4      	b.n	8004482 <UART_SetConfig+0x2e6>
 80042d8:	2304      	movs	r3, #4
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042de:	e0d0      	b.n	8004482 <UART_SetConfig+0x2e6>
 80042e0:	2308      	movs	r3, #8
 80042e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042e6:	e0cc      	b.n	8004482 <UART_SetConfig+0x2e6>
 80042e8:	2310      	movs	r3, #16
 80042ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ee:	e0c8      	b.n	8004482 <UART_SetConfig+0x2e6>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a5e      	ldr	r2, [pc, #376]	@ (8004470 <UART_SetConfig+0x2d4>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d125      	bne.n	8004346 <UART_SetConfig+0x1aa>
 80042fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004468 <UART_SetConfig+0x2cc>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004300:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004304:	2b30      	cmp	r3, #48	@ 0x30
 8004306:	d016      	beq.n	8004336 <UART_SetConfig+0x19a>
 8004308:	2b30      	cmp	r3, #48	@ 0x30
 800430a:	d818      	bhi.n	800433e <UART_SetConfig+0x1a2>
 800430c:	2b20      	cmp	r3, #32
 800430e:	d00a      	beq.n	8004326 <UART_SetConfig+0x18a>
 8004310:	2b20      	cmp	r3, #32
 8004312:	d814      	bhi.n	800433e <UART_SetConfig+0x1a2>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <UART_SetConfig+0x182>
 8004318:	2b10      	cmp	r3, #16
 800431a:	d008      	beq.n	800432e <UART_SetConfig+0x192>
 800431c:	e00f      	b.n	800433e <UART_SetConfig+0x1a2>
 800431e:	2300      	movs	r3, #0
 8004320:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004324:	e0ad      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004326:	2302      	movs	r3, #2
 8004328:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800432c:	e0a9      	b.n	8004482 <UART_SetConfig+0x2e6>
 800432e:	2304      	movs	r3, #4
 8004330:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004334:	e0a5      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004336:	2308      	movs	r3, #8
 8004338:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800433c:	e0a1      	b.n	8004482 <UART_SetConfig+0x2e6>
 800433e:	2310      	movs	r3, #16
 8004340:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004344:	e09d      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a4a      	ldr	r2, [pc, #296]	@ (8004474 <UART_SetConfig+0x2d8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d125      	bne.n	800439c <UART_SetConfig+0x200>
 8004350:	4b45      	ldr	r3, [pc, #276]	@ (8004468 <UART_SetConfig+0x2cc>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004356:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800435a:	2bc0      	cmp	r3, #192	@ 0xc0
 800435c:	d016      	beq.n	800438c <UART_SetConfig+0x1f0>
 800435e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004360:	d818      	bhi.n	8004394 <UART_SetConfig+0x1f8>
 8004362:	2b80      	cmp	r3, #128	@ 0x80
 8004364:	d00a      	beq.n	800437c <UART_SetConfig+0x1e0>
 8004366:	2b80      	cmp	r3, #128	@ 0x80
 8004368:	d814      	bhi.n	8004394 <UART_SetConfig+0x1f8>
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <UART_SetConfig+0x1d8>
 800436e:	2b40      	cmp	r3, #64	@ 0x40
 8004370:	d008      	beq.n	8004384 <UART_SetConfig+0x1e8>
 8004372:	e00f      	b.n	8004394 <UART_SetConfig+0x1f8>
 8004374:	2300      	movs	r3, #0
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800437a:	e082      	b.n	8004482 <UART_SetConfig+0x2e6>
 800437c:	2302      	movs	r3, #2
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004382:	e07e      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004384:	2304      	movs	r3, #4
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800438a:	e07a      	b.n	8004482 <UART_SetConfig+0x2e6>
 800438c:	2308      	movs	r3, #8
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004392:	e076      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004394:	2310      	movs	r3, #16
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800439a:	e072      	b.n	8004482 <UART_SetConfig+0x2e6>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a35      	ldr	r2, [pc, #212]	@ (8004478 <UART_SetConfig+0x2dc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d12a      	bne.n	80043fc <UART_SetConfig+0x260>
 80043a6:	4b30      	ldr	r3, [pc, #192]	@ (8004468 <UART_SetConfig+0x2cc>)
 80043a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043b4:	d01a      	beq.n	80043ec <UART_SetConfig+0x250>
 80043b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ba:	d81b      	bhi.n	80043f4 <UART_SetConfig+0x258>
 80043bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043c0:	d00c      	beq.n	80043dc <UART_SetConfig+0x240>
 80043c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043c6:	d815      	bhi.n	80043f4 <UART_SetConfig+0x258>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <UART_SetConfig+0x238>
 80043cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043d0:	d008      	beq.n	80043e4 <UART_SetConfig+0x248>
 80043d2:	e00f      	b.n	80043f4 <UART_SetConfig+0x258>
 80043d4:	2300      	movs	r3, #0
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043da:	e052      	b.n	8004482 <UART_SetConfig+0x2e6>
 80043dc:	2302      	movs	r3, #2
 80043de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043e2:	e04e      	b.n	8004482 <UART_SetConfig+0x2e6>
 80043e4:	2304      	movs	r3, #4
 80043e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ea:	e04a      	b.n	8004482 <UART_SetConfig+0x2e6>
 80043ec:	2308      	movs	r3, #8
 80043ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043f2:	e046      	b.n	8004482 <UART_SetConfig+0x2e6>
 80043f4:	2310      	movs	r3, #16
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043fa:	e042      	b.n	8004482 <UART_SetConfig+0x2e6>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a17      	ldr	r2, [pc, #92]	@ (8004460 <UART_SetConfig+0x2c4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d13a      	bne.n	800447c <UART_SetConfig+0x2e0>
 8004406:	4b18      	ldr	r3, [pc, #96]	@ (8004468 <UART_SetConfig+0x2cc>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004410:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004414:	d01a      	beq.n	800444c <UART_SetConfig+0x2b0>
 8004416:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800441a:	d81b      	bhi.n	8004454 <UART_SetConfig+0x2b8>
 800441c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004420:	d00c      	beq.n	800443c <UART_SetConfig+0x2a0>
 8004422:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004426:	d815      	bhi.n	8004454 <UART_SetConfig+0x2b8>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <UART_SetConfig+0x298>
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004430:	d008      	beq.n	8004444 <UART_SetConfig+0x2a8>
 8004432:	e00f      	b.n	8004454 <UART_SetConfig+0x2b8>
 8004434:	2300      	movs	r3, #0
 8004436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800443a:	e022      	b.n	8004482 <UART_SetConfig+0x2e6>
 800443c:	2302      	movs	r3, #2
 800443e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004442:	e01e      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004444:	2304      	movs	r3, #4
 8004446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800444a:	e01a      	b.n	8004482 <UART_SetConfig+0x2e6>
 800444c:	2308      	movs	r3, #8
 800444e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004452:	e016      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004454:	2310      	movs	r3, #16
 8004456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800445a:	e012      	b.n	8004482 <UART_SetConfig+0x2e6>
 800445c:	efff69f3 	.word	0xefff69f3
 8004460:	40008000 	.word	0x40008000
 8004464:	40013800 	.word	0x40013800
 8004468:	40021000 	.word	0x40021000
 800446c:	40004400 	.word	0x40004400
 8004470:	40004800 	.word	0x40004800
 8004474:	40004c00 	.word	0x40004c00
 8004478:	40005000 	.word	0x40005000
 800447c:	2310      	movs	r3, #16
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a9f      	ldr	r2, [pc, #636]	@ (8004704 <UART_SetConfig+0x568>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d17a      	bne.n	8004582 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800448c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004490:	2b08      	cmp	r3, #8
 8004492:	d824      	bhi.n	80044de <UART_SetConfig+0x342>
 8004494:	a201      	add	r2, pc, #4	@ (adr r2, 800449c <UART_SetConfig+0x300>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044c1 	.word	0x080044c1
 80044a0:	080044df 	.word	0x080044df
 80044a4:	080044c9 	.word	0x080044c9
 80044a8:	080044df 	.word	0x080044df
 80044ac:	080044cf 	.word	0x080044cf
 80044b0:	080044df 	.word	0x080044df
 80044b4:	080044df 	.word	0x080044df
 80044b8:	080044df 	.word	0x080044df
 80044bc:	080044d7 	.word	0x080044d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c0:	f7fe fb0c 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 80044c4:	61f8      	str	r0, [r7, #28]
        break;
 80044c6:	e010      	b.n	80044ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044c8:	4b8f      	ldr	r3, [pc, #572]	@ (8004708 <UART_SetConfig+0x56c>)
 80044ca:	61fb      	str	r3, [r7, #28]
        break;
 80044cc:	e00d      	b.n	80044ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ce:	f7fe fa6d 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 80044d2:	61f8      	str	r0, [r7, #28]
        break;
 80044d4:	e009      	b.n	80044ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044da:	61fb      	str	r3, [r7, #28]
        break;
 80044dc:	e005      	b.n	80044ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80044e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80fb 	beq.w	80046e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	4413      	add	r3, r2
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d305      	bcc.n	800450e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	429a      	cmp	r2, r3
 800450c:	d903      	bls.n	8004516 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004514:	e0e8      	b.n	80046e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	2200      	movs	r2, #0
 800451a:	461c      	mov	r4, r3
 800451c:	4615      	mov	r5, r2
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	022b      	lsls	r3, r5, #8
 8004528:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800452c:	0222      	lsls	r2, r4, #8
 800452e:	68f9      	ldr	r1, [r7, #12]
 8004530:	6849      	ldr	r1, [r1, #4]
 8004532:	0849      	lsrs	r1, r1, #1
 8004534:	2000      	movs	r0, #0
 8004536:	4688      	mov	r8, r1
 8004538:	4681      	mov	r9, r0
 800453a:	eb12 0a08 	adds.w	sl, r2, r8
 800453e:	eb43 0b09 	adc.w	fp, r3, r9
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004550:	4650      	mov	r0, sl
 8004552:	4659      	mov	r1, fp
 8004554:	f7fc fa82 	bl	8000a5c <__aeabi_uldivmod>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4613      	mov	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004566:	d308      	bcc.n	800457a <UART_SetConfig+0x3de>
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800456e:	d204      	bcs.n	800457a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	60da      	str	r2, [r3, #12]
 8004578:	e0b6      	b.n	80046e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004580:	e0b2      	b.n	80046e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800458a:	d15e      	bne.n	800464a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800458c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004590:	2b08      	cmp	r3, #8
 8004592:	d828      	bhi.n	80045e6 <UART_SetConfig+0x44a>
 8004594:	a201      	add	r2, pc, #4	@ (adr r2, 800459c <UART_SetConfig+0x400>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045c9 	.word	0x080045c9
 80045a4:	080045d1 	.word	0x080045d1
 80045a8:	080045e7 	.word	0x080045e7
 80045ac:	080045d7 	.word	0x080045d7
 80045b0:	080045e7 	.word	0x080045e7
 80045b4:	080045e7 	.word	0x080045e7
 80045b8:	080045e7 	.word	0x080045e7
 80045bc:	080045df 	.word	0x080045df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c0:	f7fe fa8c 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 80045c4:	61f8      	str	r0, [r7, #28]
        break;
 80045c6:	e014      	b.n	80045f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c8:	f7fe fa9e 	bl	8002b08 <HAL_RCC_GetPCLK2Freq>
 80045cc:	61f8      	str	r0, [r7, #28]
        break;
 80045ce:	e010      	b.n	80045f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004708 <UART_SetConfig+0x56c>)
 80045d2:	61fb      	str	r3, [r7, #28]
        break;
 80045d4:	e00d      	b.n	80045f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d6:	f7fe f9e9 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 80045da:	61f8      	str	r0, [r7, #28]
        break;
 80045dc:	e009      	b.n	80045f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045e2:	61fb      	str	r3, [r7, #28]
        break;
 80045e4:	e005      	b.n	80045f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d077      	beq.n	80046e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	005a      	lsls	r2, r3, #1
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	085b      	lsrs	r3, r3, #1
 8004602:	441a      	add	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	fbb2 f3f3 	udiv	r3, r2, r3
 800460c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b0f      	cmp	r3, #15
 8004612:	d916      	bls.n	8004642 <UART_SetConfig+0x4a6>
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800461a:	d212      	bcs.n	8004642 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	b29b      	uxth	r3, r3
 8004620:	f023 030f 	bic.w	r3, r3, #15
 8004624:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	085b      	lsrs	r3, r3, #1
 800462a:	b29b      	uxth	r3, r3
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	b29a      	uxth	r2, r3
 8004632:	8afb      	ldrh	r3, [r7, #22]
 8004634:	4313      	orrs	r3, r2
 8004636:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	8afa      	ldrh	r2, [r7, #22]
 800463e:	60da      	str	r2, [r3, #12]
 8004640:	e052      	b.n	80046e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004648:	e04e      	b.n	80046e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800464a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800464e:	2b08      	cmp	r3, #8
 8004650:	d827      	bhi.n	80046a2 <UART_SetConfig+0x506>
 8004652:	a201      	add	r2, pc, #4	@ (adr r2, 8004658 <UART_SetConfig+0x4bc>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	0800467d 	.word	0x0800467d
 800465c:	08004685 	.word	0x08004685
 8004660:	0800468d 	.word	0x0800468d
 8004664:	080046a3 	.word	0x080046a3
 8004668:	08004693 	.word	0x08004693
 800466c:	080046a3 	.word	0x080046a3
 8004670:	080046a3 	.word	0x080046a3
 8004674:	080046a3 	.word	0x080046a3
 8004678:	0800469b 	.word	0x0800469b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800467c:	f7fe fa2e 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8004680:	61f8      	str	r0, [r7, #28]
        break;
 8004682:	e014      	b.n	80046ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004684:	f7fe fa40 	bl	8002b08 <HAL_RCC_GetPCLK2Freq>
 8004688:	61f8      	str	r0, [r7, #28]
        break;
 800468a:	e010      	b.n	80046ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800468c:	4b1e      	ldr	r3, [pc, #120]	@ (8004708 <UART_SetConfig+0x56c>)
 800468e:	61fb      	str	r3, [r7, #28]
        break;
 8004690:	e00d      	b.n	80046ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004692:	f7fe f98b 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8004696:	61f8      	str	r0, [r7, #28]
        break;
 8004698:	e009      	b.n	80046ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800469a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800469e:	61fb      	str	r3, [r7, #28]
        break;
 80046a0:	e005      	b.n	80046ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046ac:	bf00      	nop
    }

    if (pclk != 0U)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d019      	beq.n	80046e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	085a      	lsrs	r2, r3, #1
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	441a      	add	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2b0f      	cmp	r3, #15
 80046cc:	d909      	bls.n	80046e2 <UART_SetConfig+0x546>
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d4:	d205      	bcs.n	80046e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60da      	str	r2, [r3, #12]
 80046e0:	e002      	b.n	80046e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3728      	adds	r7, #40	@ 0x28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004702:	bf00      	nop
 8004704:	40008000 	.word	0x40008000
 8004708:	00f42400 	.word	0x00f42400

0800470c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01a      	beq.n	8004822 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800480a:	d10a      	bne.n	8004822 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	605a      	str	r2, [r3, #4]
  }
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b098      	sub	sp, #96	@ 0x60
 8004854:	af02      	add	r7, sp, #8
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004860:	f7fd f89c 	bl	800199c <HAL_GetTick>
 8004864:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b08      	cmp	r3, #8
 8004872:	d12e      	bne.n	80048d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004874:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800487c:	2200      	movs	r2, #0
 800487e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f88c 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d021      	beq.n	80048d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004896:	e853 3f00 	ldrex	r3, [r3]
 800489a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800489c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800489e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	461a      	mov	r2, r3
 80048aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048b4:	e841 2300 	strex	r3, r2, [r1]
 80048b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e6      	bne.n	800488e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e062      	b.n	8004998 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d149      	bne.n	8004974 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e8:	2200      	movs	r2, #0
 80048ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f856 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d03c      	beq.n	8004974 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004902:	e853 3f00 	ldrex	r3, [r3]
 8004906:	623b      	str	r3, [r7, #32]
   return(result);
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800490e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	461a      	mov	r2, r3
 8004916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004918:	633b      	str	r3, [r7, #48]	@ 0x30
 800491a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800491e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e6      	bne.n	80048fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3308      	adds	r3, #8
 8004932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	60fb      	str	r3, [r7, #12]
   return(result);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0301 	bic.w	r3, r3, #1
 8004942:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3308      	adds	r3, #8
 800494a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800494c:	61fa      	str	r2, [r7, #28]
 800494e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	69b9      	ldr	r1, [r7, #24]
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	617b      	str	r3, [r7, #20]
   return(result);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e5      	bne.n	800492c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e011      	b.n	8004998 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2220      	movs	r2, #32
 8004978:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2220      	movs	r2, #32
 800497e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3758      	adds	r7, #88	@ 0x58
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b0:	e04f      	b.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d04b      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ba:	f7fc ffef 	bl	800199c <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d302      	bcc.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e04e      	b.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d037      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b80      	cmp	r3, #128	@ 0x80
 80049e6:	d034      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b40      	cmp	r3, #64	@ 0x40
 80049ec:	d031      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d110      	bne.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2208      	movs	r2, #8
 8004a02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f838 	bl	8004a7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e029      	b.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a2c:	d111      	bne.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f81e 	bl	8004a7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e00f      	b.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	bf0c      	ite	eq
 8004a62:	2301      	moveq	r3, #1
 8004a64:	2300      	movne	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d0a0      	beq.n	80049b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b095      	sub	sp, #84	@ 0x54
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aa2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004aa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e6      	bne.n	8004a82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3308      	adds	r3, #8
 8004aba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	e853 3f00 	ldrex	r3, [r3]
 8004ac2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f023 0301 	bic.w	r3, r3, #1
 8004aca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ad4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ada:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004adc:	e841 2300 	strex	r3, r2, [r1]
 8004ae0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e5      	bne.n	8004ab4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d118      	bne.n	8004b22 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	e853 3f00 	ldrex	r3, [r3]
 8004afc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f023 0310 	bic.w	r3, r3, #16
 8004b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b0e:	61bb      	str	r3, [r7, #24]
 8004b10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b12:	6979      	ldr	r1, [r7, #20]
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	e841 2300 	strex	r3, r2, [r1]
 8004b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1e6      	bne.n	8004af0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b36:	bf00      	nop
 8004b38:	3754      	adds	r7, #84	@ 0x54
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b085      	sub	sp, #20
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	4603      	mov	r3, r0
 8004b4a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b54:	2b84      	cmp	r3, #132	@ 0x84
 8004b56:	d005      	beq.n	8004b64 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004b58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	3303      	adds	r3, #3
 8004b62:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004b64:	68fb      	ldr	r3, [r7, #12]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004b76:	f000 fafd 	bl	8005174 <vTaskStartScheduler>
  
  return osOK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b82:	b089      	sub	sp, #36	@ 0x24
 8004b84:	af04      	add	r7, sp, #16
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d020      	beq.n	8004bd4 <osThreadCreate+0x54>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d01c      	beq.n	8004bd4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685c      	ldr	r4, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691e      	ldr	r6, [r3, #16]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7ff ffc8 	bl	8004b42 <makeFreeRtosPriority>
 8004bb2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bbc:	9202      	str	r2, [sp, #8]
 8004bbe:	9301      	str	r3, [sp, #4]
 8004bc0:	9100      	str	r1, [sp, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	4632      	mov	r2, r6
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	4620      	mov	r0, r4
 8004bca:	f000 f8ed 	bl	8004da8 <xTaskCreateStatic>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	e01c      	b.n	8004c0e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685c      	ldr	r4, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004be0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff ffaa 	bl	8004b42 <makeFreeRtosPriority>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	f107 030c 	add.w	r3, r7, #12
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	9200      	str	r2, [sp, #0]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	4632      	mov	r2, r6
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f000 f932 	bl	8004e68 <xTaskCreate>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d001      	beq.n	8004c0e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e000      	b.n	8004c10 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c18 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <osDelay+0x16>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	e000      	b.n	8004c30 <osDelay+0x18>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fa69 	bl	8005108 <vTaskDelay>
  
  return osOK;
 8004c36:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f103 0208 	add.w	r2, r3, #8
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f04f 32ff 	mov.w	r2, #4294967295
 8004c58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f103 0208 	add.w	r2, r3, #8
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f103 0208 	add.w	r2, r3, #8
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b085      	sub	sp, #20
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	601a      	str	r2, [r3, #0]
}
 8004cd6:	bf00      	nop
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b085      	sub	sp, #20
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf8:	d103      	bne.n	8004d02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	e00c      	b.n	8004d1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3308      	adds	r3, #8
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	e002      	b.n	8004d10 <vListInsert+0x2e>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d2f6      	bcs.n	8004d0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	601a      	str	r2, [r3, #0]
}
 8004d48:	bf00      	nop
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6892      	ldr	r2, [r2, #8]
 8004d6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6852      	ldr	r2, [r2, #4]
 8004d74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d103      	bne.n	8004d88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	1e5a      	subs	r2, r3, #1
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08e      	sub	sp, #56	@ 0x38
 8004dac:	af04      	add	r7, sp, #16
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10b      	bne.n	8004dd4 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004dce:	bf00      	nop
 8004dd0:	bf00      	nop
 8004dd2:	e7fd      	b.n	8004dd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10b      	bne.n	8004df2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	61fb      	str	r3, [r7, #28]
}
 8004dec:	bf00      	nop
 8004dee:	bf00      	nop
 8004df0:	e7fd      	b.n	8004dee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004df2:	23a0      	movs	r3, #160	@ 0xa0
 8004df4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	2ba0      	cmp	r3, #160	@ 0xa0
 8004dfa:	d00b      	beq.n	8004e14 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	61bb      	str	r3, [r7, #24]
}
 8004e0e:	bf00      	nop
 8004e10:	bf00      	nop
 8004e12:	e7fd      	b.n	8004e10 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01e      	beq.n	8004e5a <xTaskCreateStatic+0xb2>
 8004e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d01b      	beq.n	8004e5a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e24:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e2a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e34:	2300      	movs	r3, #0
 8004e36:	9303      	str	r3, [sp, #12]
 8004e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3a:	9302      	str	r3, [sp, #8]
 8004e3c:	f107 0314 	add.w	r3, r7, #20
 8004e40:	9301      	str	r3, [sp, #4]
 8004e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	68b9      	ldr	r1, [r7, #8]
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f851 	bl	8004ef4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e54:	f000 f8ee 	bl	8005034 <prvAddNewTaskToReadyList>
 8004e58:	e001      	b.n	8004e5e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e5e:	697b      	ldr	r3, [r7, #20]
	}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3728      	adds	r7, #40	@ 0x28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08c      	sub	sp, #48	@ 0x30
 8004e6c:	af04      	add	r7, sp, #16
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	4613      	mov	r3, r2
 8004e76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e78:	88fb      	ldrh	r3, [r7, #6]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 ff03 	bl	8005c88 <pvPortMalloc>
 8004e82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00e      	beq.n	8004ea8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e8a:	20a0      	movs	r0, #160	@ 0xa0
 8004e8c:	f000 fefc 	bl	8005c88 <pvPortMalloc>
 8004e90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e9e:	e005      	b.n	8004eac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ea0:	6978      	ldr	r0, [r7, #20]
 8004ea2:	f000 ffbf 	bl	8005e24 <vPortFree>
 8004ea6:	e001      	b.n	8004eac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d017      	beq.n	8004ee2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004eba:	88fa      	ldrh	r2, [r7, #6]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	9303      	str	r3, [sp, #12]
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	9302      	str	r3, [sp, #8]
 8004ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 f80f 	bl	8004ef4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ed6:	69f8      	ldr	r0, [r7, #28]
 8004ed8:	f000 f8ac 	bl	8005034 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004edc:	2301      	movs	r3, #1
 8004ede:	61bb      	str	r3, [r7, #24]
 8004ee0:	e002      	b.n	8004ee8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ee8:	69bb      	ldr	r3, [r7, #24]
	}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3720      	adds	r7, #32
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	f023 0307 	bic.w	r3, r3, #7
 8004f1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00b      	beq.n	8004f3e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	617b      	str	r3, [r7, #20]
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	e7fd      	b.n	8004f3a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01f      	beq.n	8004f84 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f44:	2300      	movs	r3, #0
 8004f46:	61fb      	str	r3, [r7, #28]
 8004f48:	e012      	b.n	8004f70 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	4413      	add	r3, r2
 8004f50:	7819      	ldrb	r1, [r3, #0]
 8004f52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	4413      	add	r3, r2
 8004f58:	3334      	adds	r3, #52	@ 0x34
 8004f5a:	460a      	mov	r2, r1
 8004f5c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	4413      	add	r3, r2
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d006      	beq.n	8004f78 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	61fb      	str	r3, [r7, #28]
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	2b0f      	cmp	r3, #15
 8004f74:	d9e9      	bls.n	8004f4a <prvInitialiseNewTask+0x56>
 8004f76:	e000      	b.n	8004f7a <prvInitialiseNewTask+0x86>
			{
				break;
 8004f78:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f82:	e003      	b.n	8004f8c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8e:	2b06      	cmp	r3, #6
 8004f90:	d901      	bls.n	8004f96 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f92:	2306      	movs	r3, #6
 8004f94:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fa0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004faa:	3304      	adds	r3, #4
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff fe67 	bl	8004c80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb4:	3318      	adds	r3, #24
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff fe62 	bl	8004c80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fc0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc4:	f1c3 0207 	rsb	r2, r3, #7
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fd0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe4:	334c      	adds	r3, #76	@ 0x4c
 8004fe6:	224c      	movs	r2, #76	@ 0x4c
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	f001 f85a 	bl	80060a4 <memset>
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff2:	4a0d      	ldr	r2, [pc, #52]	@ (8005028 <prvInitialiseNewTask+0x134>)
 8004ff4:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff8:	4a0c      	ldr	r2, [pc, #48]	@ (800502c <prvInitialiseNewTask+0x138>)
 8004ffa:	655a      	str	r2, [r3, #84]	@ 0x54
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8005030 <prvInitialiseNewTask+0x13c>)
 8005000:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	68f9      	ldr	r1, [r7, #12]
 8005006:	69b8      	ldr	r0, [r7, #24]
 8005008:	f000 fc2a 	bl	8005860 <pxPortInitialiseStack>
 800500c:	4602      	mov	r2, r0
 800500e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005010:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800501a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800501c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800501e:	bf00      	nop
 8005020:	3720      	adds	r7, #32
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	200045e4 	.word	0x200045e4
 800502c:	2000464c 	.word	0x2000464c
 8005030:	200046b4 	.word	0x200046b4

08005034 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800503c:	f000 fd44 	bl	8005ac8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005040:	4b2a      	ldr	r3, [pc, #168]	@ (80050ec <prvAddNewTaskToReadyList+0xb8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3301      	adds	r3, #1
 8005046:	4a29      	ldr	r2, [pc, #164]	@ (80050ec <prvAddNewTaskToReadyList+0xb8>)
 8005048:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800504a:	4b29      	ldr	r3, [pc, #164]	@ (80050f0 <prvAddNewTaskToReadyList+0xbc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d109      	bne.n	8005066 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005052:	4a27      	ldr	r2, [pc, #156]	@ (80050f0 <prvAddNewTaskToReadyList+0xbc>)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005058:	4b24      	ldr	r3, [pc, #144]	@ (80050ec <prvAddNewTaskToReadyList+0xb8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d110      	bne.n	8005082 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005060:	f000 fad4 	bl	800560c <prvInitialiseTaskLists>
 8005064:	e00d      	b.n	8005082 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005066:	4b23      	ldr	r3, [pc, #140]	@ (80050f4 <prvAddNewTaskToReadyList+0xc0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d109      	bne.n	8005082 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800506e:	4b20      	ldr	r3, [pc, #128]	@ (80050f0 <prvAddNewTaskToReadyList+0xbc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005078:	429a      	cmp	r2, r3
 800507a:	d802      	bhi.n	8005082 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800507c:	4a1c      	ldr	r2, [pc, #112]	@ (80050f0 <prvAddNewTaskToReadyList+0xbc>)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005082:	4b1d      	ldr	r3, [pc, #116]	@ (80050f8 <prvAddNewTaskToReadyList+0xc4>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3301      	adds	r3, #1
 8005088:	4a1b      	ldr	r2, [pc, #108]	@ (80050f8 <prvAddNewTaskToReadyList+0xc4>)
 800508a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005090:	2201      	movs	r2, #1
 8005092:	409a      	lsls	r2, r3
 8005094:	4b19      	ldr	r3, [pc, #100]	@ (80050fc <prvAddNewTaskToReadyList+0xc8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4313      	orrs	r3, r2
 800509a:	4a18      	ldr	r2, [pc, #96]	@ (80050fc <prvAddNewTaskToReadyList+0xc8>)
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4a15      	ldr	r2, [pc, #84]	@ (8005100 <prvAddNewTaskToReadyList+0xcc>)
 80050ac:	441a      	add	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3304      	adds	r3, #4
 80050b2:	4619      	mov	r1, r3
 80050b4:	4610      	mov	r0, r2
 80050b6:	f7ff fdf0 	bl	8004c9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050ba:	f000 fd37 	bl	8005b2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050be:	4b0d      	ldr	r3, [pc, #52]	@ (80050f4 <prvAddNewTaskToReadyList+0xc0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00e      	beq.n	80050e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050c6:	4b0a      	ldr	r3, [pc, #40]	@ (80050f0 <prvAddNewTaskToReadyList+0xbc>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d207      	bcs.n	80050e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005104 <prvAddNewTaskToReadyList+0xd0>)
 80050d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050e4:	bf00      	nop
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	20000590 	.word	0x20000590
 80050f0:	20000490 	.word	0x20000490
 80050f4:	2000059c 	.word	0x2000059c
 80050f8:	200005ac 	.word	0x200005ac
 80050fc:	20000598 	.word	0x20000598
 8005100:	20000494 	.word	0x20000494
 8005104:	e000ed04 	.word	0xe000ed04

08005108 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d018      	beq.n	800514c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800511a:	4b14      	ldr	r3, [pc, #80]	@ (800516c <vTaskDelay+0x64>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <vTaskDelay+0x32>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	60bb      	str	r3, [r7, #8]
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop
 8005138:	e7fd      	b.n	8005136 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800513a:	f000 f885 	bl	8005248 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800513e:	2100      	movs	r1, #0
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fb27 	bl	8005794 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005146:	f000 f88d 	bl	8005264 <xTaskResumeAll>
 800514a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d107      	bne.n	8005162 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005152:	4b07      	ldr	r3, [pc, #28]	@ (8005170 <vTaskDelay+0x68>)
 8005154:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005162:	bf00      	nop
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	200005b8 	.word	0x200005b8
 8005170:	e000ed04 	.word	0xe000ed04

08005174 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b08a      	sub	sp, #40	@ 0x28
 8005178:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800517a:	2300      	movs	r3, #0
 800517c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800517e:	2300      	movs	r3, #0
 8005180:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005182:	463a      	mov	r2, r7
 8005184:	1d39      	adds	r1, r7, #4
 8005186:	f107 0308 	add.w	r3, r7, #8
 800518a:	4618      	mov	r0, r3
 800518c:	f7fb fdde 	bl	8000d4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005190:	6839      	ldr	r1, [r7, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	9202      	str	r2, [sp, #8]
 8005198:	9301      	str	r3, [sp, #4]
 800519a:	2300      	movs	r3, #0
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	2300      	movs	r3, #0
 80051a0:	460a      	mov	r2, r1
 80051a2:	4921      	ldr	r1, [pc, #132]	@ (8005228 <vTaskStartScheduler+0xb4>)
 80051a4:	4821      	ldr	r0, [pc, #132]	@ (800522c <vTaskStartScheduler+0xb8>)
 80051a6:	f7ff fdff 	bl	8004da8 <xTaskCreateStatic>
 80051aa:	4603      	mov	r3, r0
 80051ac:	4a20      	ldr	r2, [pc, #128]	@ (8005230 <vTaskStartScheduler+0xbc>)
 80051ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005230 <vTaskStartScheduler+0xbc>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051b8:	2301      	movs	r3, #1
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	e001      	b.n	80051c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d11b      	bne.n	8005200 <vTaskStartScheduler+0x8c>
	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	613b      	str	r3, [r7, #16]
}
 80051da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051dc:	4b15      	ldr	r3, [pc, #84]	@ (8005234 <vTaskStartScheduler+0xc0>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	334c      	adds	r3, #76	@ 0x4c
 80051e2:	4a15      	ldr	r2, [pc, #84]	@ (8005238 <vTaskStartScheduler+0xc4>)
 80051e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051e6:	4b15      	ldr	r3, [pc, #84]	@ (800523c <vTaskStartScheduler+0xc8>)
 80051e8:	f04f 32ff 	mov.w	r2, #4294967295
 80051ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051ee:	4b14      	ldr	r3, [pc, #80]	@ (8005240 <vTaskStartScheduler+0xcc>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80051f4:	4b13      	ldr	r3, [pc, #76]	@ (8005244 <vTaskStartScheduler+0xd0>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051fa:	f000 fbc1 	bl	8005980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051fe:	e00f      	b.n	8005220 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005206:	d10b      	bne.n	8005220 <vTaskStartScheduler+0xac>
	__asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	60fb      	str	r3, [r7, #12]
}
 800521a:	bf00      	nop
 800521c:	bf00      	nop
 800521e:	e7fd      	b.n	800521c <vTaskStartScheduler+0xa8>
}
 8005220:	bf00      	nop
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	08006aec 	.word	0x08006aec
 800522c:	080055dd 	.word	0x080055dd
 8005230:	200005b4 	.word	0x200005b4
 8005234:	20000490 	.word	0x20000490
 8005238:	20000010 	.word	0x20000010
 800523c:	200005b0 	.word	0x200005b0
 8005240:	2000059c 	.word	0x2000059c
 8005244:	20000594 	.word	0x20000594

08005248 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800524c:	4b04      	ldr	r3, [pc, #16]	@ (8005260 <vTaskSuspendAll+0x18>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3301      	adds	r3, #1
 8005252:	4a03      	ldr	r2, [pc, #12]	@ (8005260 <vTaskSuspendAll+0x18>)
 8005254:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005256:	bf00      	nop
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	200005b8 	.word	0x200005b8

08005264 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800526e:	2300      	movs	r3, #0
 8005270:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005272:	4b42      	ldr	r3, [pc, #264]	@ (800537c <xTaskResumeAll+0x118>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10b      	bne.n	8005292 <xTaskResumeAll+0x2e>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	603b      	str	r3, [r7, #0]
}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	e7fd      	b.n	800528e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005292:	f000 fc19 	bl	8005ac8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005296:	4b39      	ldr	r3, [pc, #228]	@ (800537c <xTaskResumeAll+0x118>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3b01      	subs	r3, #1
 800529c:	4a37      	ldr	r2, [pc, #220]	@ (800537c <xTaskResumeAll+0x118>)
 800529e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052a0:	4b36      	ldr	r3, [pc, #216]	@ (800537c <xTaskResumeAll+0x118>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d161      	bne.n	800536c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052a8:	4b35      	ldr	r3, [pc, #212]	@ (8005380 <xTaskResumeAll+0x11c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d05d      	beq.n	800536c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052b0:	e02e      	b.n	8005310 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b2:	4b34      	ldr	r3, [pc, #208]	@ (8005384 <xTaskResumeAll+0x120>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3318      	adds	r3, #24
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff fd48 	bl	8004d54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3304      	adds	r3, #4
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff fd43 	bl	8004d54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d2:	2201      	movs	r2, #1
 80052d4:	409a      	lsls	r2, r3
 80052d6:	4b2c      	ldr	r3, [pc, #176]	@ (8005388 <xTaskResumeAll+0x124>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4313      	orrs	r3, r2
 80052dc:	4a2a      	ldr	r2, [pc, #168]	@ (8005388 <xTaskResumeAll+0x124>)
 80052de:	6013      	str	r3, [r2, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4a27      	ldr	r2, [pc, #156]	@ (800538c <xTaskResumeAll+0x128>)
 80052ee:	441a      	add	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3304      	adds	r3, #4
 80052f4:	4619      	mov	r1, r3
 80052f6:	4610      	mov	r0, r2
 80052f8:	f7ff fccf 	bl	8004c9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005300:	4b23      	ldr	r3, [pc, #140]	@ (8005390 <xTaskResumeAll+0x12c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	429a      	cmp	r2, r3
 8005308:	d302      	bcc.n	8005310 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800530a:	4b22      	ldr	r3, [pc, #136]	@ (8005394 <xTaskResumeAll+0x130>)
 800530c:	2201      	movs	r2, #1
 800530e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005310:	4b1c      	ldr	r3, [pc, #112]	@ (8005384 <xTaskResumeAll+0x120>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1cc      	bne.n	80052b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800531e:	f000 fa19 	bl	8005754 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005322:	4b1d      	ldr	r3, [pc, #116]	@ (8005398 <xTaskResumeAll+0x134>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d010      	beq.n	8005350 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800532e:	f000 f837 	bl	80053a0 <xTaskIncrementTick>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005338:	4b16      	ldr	r3, [pc, #88]	@ (8005394 <xTaskResumeAll+0x130>)
 800533a:	2201      	movs	r2, #1
 800533c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	3b01      	subs	r3, #1
 8005342:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1f1      	bne.n	800532e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800534a:	4b13      	ldr	r3, [pc, #76]	@ (8005398 <xTaskResumeAll+0x134>)
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005350:	4b10      	ldr	r3, [pc, #64]	@ (8005394 <xTaskResumeAll+0x130>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d009      	beq.n	800536c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005358:	2301      	movs	r3, #1
 800535a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800535c:	4b0f      	ldr	r3, [pc, #60]	@ (800539c <xTaskResumeAll+0x138>)
 800535e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800536c:	f000 fbde 	bl	8005b2c <vPortExitCritical>

	return xAlreadyYielded;
 8005370:	68bb      	ldr	r3, [r7, #8]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	200005b8 	.word	0x200005b8
 8005380:	20000590 	.word	0x20000590
 8005384:	20000550 	.word	0x20000550
 8005388:	20000598 	.word	0x20000598
 800538c:	20000494 	.word	0x20000494
 8005390:	20000490 	.word	0x20000490
 8005394:	200005a4 	.word	0x200005a4
 8005398:	200005a0 	.word	0x200005a0
 800539c:	e000ed04 	.word	0xe000ed04

080053a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053a6:	2300      	movs	r3, #0
 80053a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053aa:	4b4f      	ldr	r3, [pc, #316]	@ (80054e8 <xTaskIncrementTick+0x148>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f040 808f 	bne.w	80054d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053b4:	4b4d      	ldr	r3, [pc, #308]	@ (80054ec <xTaskIncrementTick+0x14c>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3301      	adds	r3, #1
 80053ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053bc:	4a4b      	ldr	r2, [pc, #300]	@ (80054ec <xTaskIncrementTick+0x14c>)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d121      	bne.n	800540c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80053c8:	4b49      	ldr	r3, [pc, #292]	@ (80054f0 <xTaskIncrementTick+0x150>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00b      	beq.n	80053ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	603b      	str	r3, [r7, #0]
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	e7fd      	b.n	80053e6 <xTaskIncrementTick+0x46>
 80053ea:	4b41      	ldr	r3, [pc, #260]	@ (80054f0 <xTaskIncrementTick+0x150>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	4b40      	ldr	r3, [pc, #256]	@ (80054f4 <xTaskIncrementTick+0x154>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a3e      	ldr	r2, [pc, #248]	@ (80054f0 <xTaskIncrementTick+0x150>)
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	4a3e      	ldr	r2, [pc, #248]	@ (80054f4 <xTaskIncrementTick+0x154>)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	4b3e      	ldr	r3, [pc, #248]	@ (80054f8 <xTaskIncrementTick+0x158>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3301      	adds	r3, #1
 8005404:	4a3c      	ldr	r2, [pc, #240]	@ (80054f8 <xTaskIncrementTick+0x158>)
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	f000 f9a4 	bl	8005754 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800540c:	4b3b      	ldr	r3, [pc, #236]	@ (80054fc <xTaskIncrementTick+0x15c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	429a      	cmp	r2, r3
 8005414:	d348      	bcc.n	80054a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005416:	4b36      	ldr	r3, [pc, #216]	@ (80054f0 <xTaskIncrementTick+0x150>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d104      	bne.n	800542a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005420:	4b36      	ldr	r3, [pc, #216]	@ (80054fc <xTaskIncrementTick+0x15c>)
 8005422:	f04f 32ff 	mov.w	r2, #4294967295
 8005426:	601a      	str	r2, [r3, #0]
					break;
 8005428:	e03e      	b.n	80054a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800542a:	4b31      	ldr	r3, [pc, #196]	@ (80054f0 <xTaskIncrementTick+0x150>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	429a      	cmp	r2, r3
 8005440:	d203      	bcs.n	800544a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005442:	4a2e      	ldr	r2, [pc, #184]	@ (80054fc <xTaskIncrementTick+0x15c>)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005448:	e02e      	b.n	80054a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	3304      	adds	r3, #4
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff fc80 	bl	8004d54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	3318      	adds	r3, #24
 8005460:	4618      	mov	r0, r3
 8005462:	f7ff fc77 	bl	8004d54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546a:	2201      	movs	r2, #1
 800546c:	409a      	lsls	r2, r3
 800546e:	4b24      	ldr	r3, [pc, #144]	@ (8005500 <xTaskIncrementTick+0x160>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4313      	orrs	r3, r2
 8005474:	4a22      	ldr	r2, [pc, #136]	@ (8005500 <xTaskIncrementTick+0x160>)
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4a1f      	ldr	r2, [pc, #124]	@ (8005504 <xTaskIncrementTick+0x164>)
 8005486:	441a      	add	r2, r3
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	3304      	adds	r3, #4
 800548c:	4619      	mov	r1, r3
 800548e:	4610      	mov	r0, r2
 8005490:	f7ff fc03 	bl	8004c9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005498:	4b1b      	ldr	r3, [pc, #108]	@ (8005508 <xTaskIncrementTick+0x168>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549e:	429a      	cmp	r2, r3
 80054a0:	d3b9      	bcc.n	8005416 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80054a2:	2301      	movs	r3, #1
 80054a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054a6:	e7b6      	b.n	8005416 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054a8:	4b17      	ldr	r3, [pc, #92]	@ (8005508 <xTaskIncrementTick+0x168>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ae:	4915      	ldr	r1, [pc, #84]	@ (8005504 <xTaskIncrementTick+0x164>)
 80054b0:	4613      	mov	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d901      	bls.n	80054c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80054c0:	2301      	movs	r3, #1
 80054c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80054c4:	4b11      	ldr	r3, [pc, #68]	@ (800550c <xTaskIncrementTick+0x16c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d007      	beq.n	80054dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80054cc:	2301      	movs	r3, #1
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e004      	b.n	80054dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80054d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005510 <xTaskIncrementTick+0x170>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3301      	adds	r3, #1
 80054d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005510 <xTaskIncrementTick+0x170>)
 80054da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80054dc:	697b      	ldr	r3, [r7, #20]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	200005b8 	.word	0x200005b8
 80054ec:	20000594 	.word	0x20000594
 80054f0:	20000548 	.word	0x20000548
 80054f4:	2000054c 	.word	0x2000054c
 80054f8:	200005a8 	.word	0x200005a8
 80054fc:	200005b0 	.word	0x200005b0
 8005500:	20000598 	.word	0x20000598
 8005504:	20000494 	.word	0x20000494
 8005508:	20000490 	.word	0x20000490
 800550c:	200005a4 	.word	0x200005a4
 8005510:	200005a0 	.word	0x200005a0

08005514 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800551a:	4b2a      	ldr	r3, [pc, #168]	@ (80055c4 <vTaskSwitchContext+0xb0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005522:	4b29      	ldr	r3, [pc, #164]	@ (80055c8 <vTaskSwitchContext+0xb4>)
 8005524:	2201      	movs	r2, #1
 8005526:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005528:	e045      	b.n	80055b6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800552a:	4b27      	ldr	r3, [pc, #156]	@ (80055c8 <vTaskSwitchContext+0xb4>)
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005530:	4b26      	ldr	r3, [pc, #152]	@ (80055cc <vTaskSwitchContext+0xb8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	fab3 f383 	clz	r3, r3
 800553c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800553e:	7afb      	ldrb	r3, [r7, #11]
 8005540:	f1c3 031f 	rsb	r3, r3, #31
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	4922      	ldr	r1, [pc, #136]	@ (80055d0 <vTaskSwitchContext+0xbc>)
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	4613      	mov	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	440b      	add	r3, r1
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10b      	bne.n	8005572 <vTaskSwitchContext+0x5e>
	__asm volatile
 800555a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	607b      	str	r3, [r7, #4]
}
 800556c:	bf00      	nop
 800556e:	bf00      	nop
 8005570:	e7fd      	b.n	800556e <vTaskSwitchContext+0x5a>
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4a14      	ldr	r2, [pc, #80]	@ (80055d0 <vTaskSwitchContext+0xbc>)
 800557e:	4413      	add	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	605a      	str	r2, [r3, #4]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	3308      	adds	r3, #8
 8005594:	429a      	cmp	r2, r3
 8005596:	d104      	bne.n	80055a2 <vTaskSwitchContext+0x8e>
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	605a      	str	r2, [r3, #4]
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	4a0a      	ldr	r2, [pc, #40]	@ (80055d4 <vTaskSwitchContext+0xc0>)
 80055aa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055ac:	4b09      	ldr	r3, [pc, #36]	@ (80055d4 <vTaskSwitchContext+0xc0>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	334c      	adds	r3, #76	@ 0x4c
 80055b2:	4a09      	ldr	r2, [pc, #36]	@ (80055d8 <vTaskSwitchContext+0xc4>)
 80055b4:	6013      	str	r3, [r2, #0]
}
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	200005b8 	.word	0x200005b8
 80055c8:	200005a4 	.word	0x200005a4
 80055cc:	20000598 	.word	0x20000598
 80055d0:	20000494 	.word	0x20000494
 80055d4:	20000490 	.word	0x20000490
 80055d8:	20000010 	.word	0x20000010

080055dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80055e4:	f000 f852 	bl	800568c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055e8:	4b06      	ldr	r3, [pc, #24]	@ (8005604 <prvIdleTask+0x28>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d9f9      	bls.n	80055e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80055f0:	4b05      	ldr	r3, [pc, #20]	@ (8005608 <prvIdleTask+0x2c>)
 80055f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005600:	e7f0      	b.n	80055e4 <prvIdleTask+0x8>
 8005602:	bf00      	nop
 8005604:	20000494 	.word	0x20000494
 8005608:	e000ed04 	.word	0xe000ed04

0800560c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005612:	2300      	movs	r3, #0
 8005614:	607b      	str	r3, [r7, #4]
 8005616:	e00c      	b.n	8005632 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	4613      	mov	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4a12      	ldr	r2, [pc, #72]	@ (800566c <prvInitialiseTaskLists+0x60>)
 8005624:	4413      	add	r3, r2
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff fb0a 	bl	8004c40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3301      	adds	r3, #1
 8005630:	607b      	str	r3, [r7, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b06      	cmp	r3, #6
 8005636:	d9ef      	bls.n	8005618 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005638:	480d      	ldr	r0, [pc, #52]	@ (8005670 <prvInitialiseTaskLists+0x64>)
 800563a:	f7ff fb01 	bl	8004c40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800563e:	480d      	ldr	r0, [pc, #52]	@ (8005674 <prvInitialiseTaskLists+0x68>)
 8005640:	f7ff fafe 	bl	8004c40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005644:	480c      	ldr	r0, [pc, #48]	@ (8005678 <prvInitialiseTaskLists+0x6c>)
 8005646:	f7ff fafb 	bl	8004c40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800564a:	480c      	ldr	r0, [pc, #48]	@ (800567c <prvInitialiseTaskLists+0x70>)
 800564c:	f7ff faf8 	bl	8004c40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005650:	480b      	ldr	r0, [pc, #44]	@ (8005680 <prvInitialiseTaskLists+0x74>)
 8005652:	f7ff faf5 	bl	8004c40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005656:	4b0b      	ldr	r3, [pc, #44]	@ (8005684 <prvInitialiseTaskLists+0x78>)
 8005658:	4a05      	ldr	r2, [pc, #20]	@ (8005670 <prvInitialiseTaskLists+0x64>)
 800565a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800565c:	4b0a      	ldr	r3, [pc, #40]	@ (8005688 <prvInitialiseTaskLists+0x7c>)
 800565e:	4a05      	ldr	r2, [pc, #20]	@ (8005674 <prvInitialiseTaskLists+0x68>)
 8005660:	601a      	str	r2, [r3, #0]
}
 8005662:	bf00      	nop
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	20000494 	.word	0x20000494
 8005670:	20000520 	.word	0x20000520
 8005674:	20000534 	.word	0x20000534
 8005678:	20000550 	.word	0x20000550
 800567c:	20000564 	.word	0x20000564
 8005680:	2000057c 	.word	0x2000057c
 8005684:	20000548 	.word	0x20000548
 8005688:	2000054c 	.word	0x2000054c

0800568c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005692:	e019      	b.n	80056c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005694:	f000 fa18 	bl	8005ac8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005698:	4b10      	ldr	r3, [pc, #64]	@ (80056dc <prvCheckTasksWaitingTermination+0x50>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff fb55 	bl	8004d54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056aa:	4b0d      	ldr	r3, [pc, #52]	@ (80056e0 <prvCheckTasksWaitingTermination+0x54>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	4a0b      	ldr	r2, [pc, #44]	@ (80056e0 <prvCheckTasksWaitingTermination+0x54>)
 80056b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056b4:	4b0b      	ldr	r3, [pc, #44]	@ (80056e4 <prvCheckTasksWaitingTermination+0x58>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	4a0a      	ldr	r2, [pc, #40]	@ (80056e4 <prvCheckTasksWaitingTermination+0x58>)
 80056bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056be:	f000 fa35 	bl	8005b2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f810 	bl	80056e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056c8:	4b06      	ldr	r3, [pc, #24]	@ (80056e4 <prvCheckTasksWaitingTermination+0x58>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1e1      	bne.n	8005694 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056d0:	bf00      	nop
 80056d2:	bf00      	nop
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20000564 	.word	0x20000564
 80056e0:	20000590 	.word	0x20000590
 80056e4:	20000578 	.word	0x20000578

080056e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	334c      	adds	r3, #76	@ 0x4c
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 fcdd 	bl	80060b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005700:	2b00      	cmp	r3, #0
 8005702:	d108      	bne.n	8005716 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005708:	4618      	mov	r0, r3
 800570a:	f000 fb8b 	bl	8005e24 <vPortFree>
				vPortFree( pxTCB );
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fb88 	bl	8005e24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005714:	e019      	b.n	800574a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800571c:	2b01      	cmp	r3, #1
 800571e:	d103      	bne.n	8005728 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fb7f 	bl	8005e24 <vPortFree>
	}
 8005726:	e010      	b.n	800574a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800572e:	2b02      	cmp	r3, #2
 8005730:	d00b      	beq.n	800574a <prvDeleteTCB+0x62>
	__asm volatile
 8005732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	60fb      	str	r3, [r7, #12]
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop
 8005748:	e7fd      	b.n	8005746 <prvDeleteTCB+0x5e>
	}
 800574a:	bf00      	nop
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
	...

08005754 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800575a:	4b0c      	ldr	r3, [pc, #48]	@ (800578c <prvResetNextTaskUnblockTime+0x38>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d104      	bne.n	800576e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005764:	4b0a      	ldr	r3, [pc, #40]	@ (8005790 <prvResetNextTaskUnblockTime+0x3c>)
 8005766:	f04f 32ff 	mov.w	r2, #4294967295
 800576a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800576c:	e008      	b.n	8005780 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800576e:	4b07      	ldr	r3, [pc, #28]	@ (800578c <prvResetNextTaskUnblockTime+0x38>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	4a04      	ldr	r2, [pc, #16]	@ (8005790 <prvResetNextTaskUnblockTime+0x3c>)
 800577e:	6013      	str	r3, [r2, #0]
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	20000548 	.word	0x20000548
 8005790:	200005b0 	.word	0x200005b0

08005794 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800579e:	4b29      	ldr	r3, [pc, #164]	@ (8005844 <prvAddCurrentTaskToDelayedList+0xb0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057a4:	4b28      	ldr	r3, [pc, #160]	@ (8005848 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3304      	adds	r3, #4
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff fad2 	bl	8004d54 <uxListRemove>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10b      	bne.n	80057ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80057b6:	4b24      	ldr	r3, [pc, #144]	@ (8005848 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057bc:	2201      	movs	r2, #1
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	43da      	mvns	r2, r3
 80057c4:	4b21      	ldr	r3, [pc, #132]	@ (800584c <prvAddCurrentTaskToDelayedList+0xb8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4013      	ands	r3, r2
 80057ca:	4a20      	ldr	r2, [pc, #128]	@ (800584c <prvAddCurrentTaskToDelayedList+0xb8>)
 80057cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d4:	d10a      	bne.n	80057ec <prvAddCurrentTaskToDelayedList+0x58>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d007      	beq.n	80057ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005848 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3304      	adds	r3, #4
 80057e2:	4619      	mov	r1, r3
 80057e4:	481a      	ldr	r0, [pc, #104]	@ (8005850 <prvAddCurrentTaskToDelayedList+0xbc>)
 80057e6:	f7ff fa58 	bl	8004c9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057ea:	e026      	b.n	800583a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4413      	add	r3, r2
 80057f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057f4:	4b14      	ldr	r3, [pc, #80]	@ (8005848 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	429a      	cmp	r2, r3
 8005802:	d209      	bcs.n	8005818 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005804:	4b13      	ldr	r3, [pc, #76]	@ (8005854 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	4b0f      	ldr	r3, [pc, #60]	@ (8005848 <prvAddCurrentTaskToDelayedList+0xb4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3304      	adds	r3, #4
 800580e:	4619      	mov	r1, r3
 8005810:	4610      	mov	r0, r2
 8005812:	f7ff fa66 	bl	8004ce2 <vListInsert>
}
 8005816:	e010      	b.n	800583a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005818:	4b0f      	ldr	r3, [pc, #60]	@ (8005858 <prvAddCurrentTaskToDelayedList+0xc4>)
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	4b0a      	ldr	r3, [pc, #40]	@ (8005848 <prvAddCurrentTaskToDelayedList+0xb4>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3304      	adds	r3, #4
 8005822:	4619      	mov	r1, r3
 8005824:	4610      	mov	r0, r2
 8005826:	f7ff fa5c 	bl	8004ce2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800582a:	4b0c      	ldr	r3, [pc, #48]	@ (800585c <prvAddCurrentTaskToDelayedList+0xc8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	429a      	cmp	r2, r3
 8005832:	d202      	bcs.n	800583a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005834:	4a09      	ldr	r2, [pc, #36]	@ (800585c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	6013      	str	r3, [r2, #0]
}
 800583a:	bf00      	nop
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	20000594 	.word	0x20000594
 8005848:	20000490 	.word	0x20000490
 800584c:	20000598 	.word	0x20000598
 8005850:	2000057c 	.word	0x2000057c
 8005854:	2000054c 	.word	0x2000054c
 8005858:	20000548 	.word	0x20000548
 800585c:	200005b0 	.word	0x200005b0

08005860 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3b04      	subs	r3, #4
 8005870:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005878:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3b04      	subs	r3, #4
 800587e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f023 0201 	bic.w	r2, r3, #1
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3b04      	subs	r3, #4
 800588e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005890:	4a0c      	ldr	r2, [pc, #48]	@ (80058c4 <pxPortInitialiseStack+0x64>)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3b14      	subs	r3, #20
 800589a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3b04      	subs	r3, #4
 80058a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f06f 0202 	mvn.w	r2, #2
 80058ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	3b20      	subs	r3, #32
 80058b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058b6:	68fb      	ldr	r3, [r7, #12]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	080058c9 	.word	0x080058c9

080058c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058d2:	4b13      	ldr	r3, [pc, #76]	@ (8005920 <prvTaskExitError+0x58>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058da:	d00b      	beq.n	80058f4 <prvTaskExitError+0x2c>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	60fb      	str	r3, [r7, #12]
}
 80058ee:	bf00      	nop
 80058f0:	bf00      	nop
 80058f2:	e7fd      	b.n	80058f0 <prvTaskExitError+0x28>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	60bb      	str	r3, [r7, #8]
}
 8005906:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005908:	bf00      	nop
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0fc      	beq.n	800590a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005910:	bf00      	nop
 8005912:	bf00      	nop
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	2000000c 	.word	0x2000000c
	...

08005930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005930:	4b07      	ldr	r3, [pc, #28]	@ (8005950 <pxCurrentTCBConst2>)
 8005932:	6819      	ldr	r1, [r3, #0]
 8005934:	6808      	ldr	r0, [r1, #0]
 8005936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593a:	f380 8809 	msr	PSP, r0
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f04f 0000 	mov.w	r0, #0
 8005946:	f380 8811 	msr	BASEPRI, r0
 800594a:	4770      	bx	lr
 800594c:	f3af 8000 	nop.w

08005950 <pxCurrentTCBConst2>:
 8005950:	20000490 	.word	0x20000490
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005954:	bf00      	nop
 8005956:	bf00      	nop

08005958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005958:	4808      	ldr	r0, [pc, #32]	@ (800597c <prvPortStartFirstTask+0x24>)
 800595a:	6800      	ldr	r0, [r0, #0]
 800595c:	6800      	ldr	r0, [r0, #0]
 800595e:	f380 8808 	msr	MSP, r0
 8005962:	f04f 0000 	mov.w	r0, #0
 8005966:	f380 8814 	msr	CONTROL, r0
 800596a:	b662      	cpsie	i
 800596c:	b661      	cpsie	f
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	df00      	svc	0
 8005978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800597a:	bf00      	nop
 800597c:	e000ed08 	.word	0xe000ed08

08005980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005986:	4b47      	ldr	r3, [pc, #284]	@ (8005aa4 <xPortStartScheduler+0x124>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a47      	ldr	r2, [pc, #284]	@ (8005aa8 <xPortStartScheduler+0x128>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d10b      	bne.n	80059a8 <xPortStartScheduler+0x28>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	613b      	str	r3, [r7, #16]
}
 80059a2:	bf00      	nop
 80059a4:	bf00      	nop
 80059a6:	e7fd      	b.n	80059a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80059a8:	4b3e      	ldr	r3, [pc, #248]	@ (8005aa4 <xPortStartScheduler+0x124>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a3f      	ldr	r2, [pc, #252]	@ (8005aac <xPortStartScheduler+0x12c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d10b      	bne.n	80059ca <xPortStartScheduler+0x4a>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	60fb      	str	r3, [r7, #12]
}
 80059c4:	bf00      	nop
 80059c6:	bf00      	nop
 80059c8:	e7fd      	b.n	80059c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059ca:	4b39      	ldr	r3, [pc, #228]	@ (8005ab0 <xPortStartScheduler+0x130>)
 80059cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	22ff      	movs	r2, #255	@ 0xff
 80059da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059e4:	78fb      	ldrb	r3, [r7, #3]
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	4b31      	ldr	r3, [pc, #196]	@ (8005ab4 <xPortStartScheduler+0x134>)
 80059f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059f2:	4b31      	ldr	r3, [pc, #196]	@ (8005ab8 <xPortStartScheduler+0x138>)
 80059f4:	2207      	movs	r2, #7
 80059f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059f8:	e009      	b.n	8005a0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80059fa:	4b2f      	ldr	r3, [pc, #188]	@ (8005ab8 <xPortStartScheduler+0x138>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	4a2d      	ldr	r2, [pc, #180]	@ (8005ab8 <xPortStartScheduler+0x138>)
 8005a02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a0e:	78fb      	ldrb	r3, [r7, #3]
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a16:	2b80      	cmp	r3, #128	@ 0x80
 8005a18:	d0ef      	beq.n	80059fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a1a:	4b27      	ldr	r3, [pc, #156]	@ (8005ab8 <xPortStartScheduler+0x138>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f1c3 0307 	rsb	r3, r3, #7
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d00b      	beq.n	8005a3e <xPortStartScheduler+0xbe>
	__asm volatile
 8005a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	60bb      	str	r3, [r7, #8]
}
 8005a38:	bf00      	nop
 8005a3a:	bf00      	nop
 8005a3c:	e7fd      	b.n	8005a3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ab8 <xPortStartScheduler+0x138>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	021b      	lsls	r3, r3, #8
 8005a44:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab8 <xPortStartScheduler+0x138>)
 8005a46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a48:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab8 <xPortStartScheduler+0x138>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a50:	4a19      	ldr	r2, [pc, #100]	@ (8005ab8 <xPortStartScheduler+0x138>)
 8005a52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a5c:	4b17      	ldr	r3, [pc, #92]	@ (8005abc <xPortStartScheduler+0x13c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a16      	ldr	r2, [pc, #88]	@ (8005abc <xPortStartScheduler+0x13c>)
 8005a62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a68:	4b14      	ldr	r3, [pc, #80]	@ (8005abc <xPortStartScheduler+0x13c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a13      	ldr	r2, [pc, #76]	@ (8005abc <xPortStartScheduler+0x13c>)
 8005a6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005a72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a74:	f000 f8da 	bl	8005c2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a78:	4b11      	ldr	r3, [pc, #68]	@ (8005ac0 <xPortStartScheduler+0x140>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a7e:	f000 f8f9 	bl	8005c74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a82:	4b10      	ldr	r3, [pc, #64]	@ (8005ac4 <xPortStartScheduler+0x144>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a0f      	ldr	r2, [pc, #60]	@ (8005ac4 <xPortStartScheduler+0x144>)
 8005a88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005a8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a8e:	f7ff ff63 	bl	8005958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a92:	f7ff fd3f 	bl	8005514 <vTaskSwitchContext>
	prvTaskExitError();
 8005a96:	f7ff ff17 	bl	80058c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	e000ed00 	.word	0xe000ed00
 8005aa8:	410fc271 	.word	0x410fc271
 8005aac:	410fc270 	.word	0x410fc270
 8005ab0:	e000e400 	.word	0xe000e400
 8005ab4:	200005bc 	.word	0x200005bc
 8005ab8:	200005c0 	.word	0x200005c0
 8005abc:	e000ed20 	.word	0xe000ed20
 8005ac0:	2000000c 	.word	0x2000000c
 8005ac4:	e000ef34 	.word	0xe000ef34

08005ac8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	607b      	str	r3, [r7, #4]
}
 8005ae0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ae2:	4b10      	ldr	r3, [pc, #64]	@ (8005b24 <vPortEnterCritical+0x5c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	4a0e      	ldr	r2, [pc, #56]	@ (8005b24 <vPortEnterCritical+0x5c>)
 8005aea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005aec:	4b0d      	ldr	r3, [pc, #52]	@ (8005b24 <vPortEnterCritical+0x5c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d110      	bne.n	8005b16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005af4:	4b0c      	ldr	r3, [pc, #48]	@ (8005b28 <vPortEnterCritical+0x60>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00b      	beq.n	8005b16 <vPortEnterCritical+0x4e>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	603b      	str	r3, [r7, #0]
}
 8005b10:	bf00      	nop
 8005b12:	bf00      	nop
 8005b14:	e7fd      	b.n	8005b12 <vPortEnterCritical+0x4a>
	}
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	2000000c 	.word	0x2000000c
 8005b28:	e000ed04 	.word	0xe000ed04

08005b2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b32:	4b12      	ldr	r3, [pc, #72]	@ (8005b7c <vPortExitCritical+0x50>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10b      	bne.n	8005b52 <vPortExitCritical+0x26>
	__asm volatile
 8005b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	607b      	str	r3, [r7, #4]
}
 8005b4c:	bf00      	nop
 8005b4e:	bf00      	nop
 8005b50:	e7fd      	b.n	8005b4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005b52:	4b0a      	ldr	r3, [pc, #40]	@ (8005b7c <vPortExitCritical+0x50>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	4a08      	ldr	r2, [pc, #32]	@ (8005b7c <vPortExitCritical+0x50>)
 8005b5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b5c:	4b07      	ldr	r3, [pc, #28]	@ (8005b7c <vPortExitCritical+0x50>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d105      	bne.n	8005b70 <vPortExitCritical+0x44>
 8005b64:	2300      	movs	r3, #0
 8005b66:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	2000000c 	.word	0x2000000c

08005b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b80:	f3ef 8009 	mrs	r0, PSP
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	4b15      	ldr	r3, [pc, #84]	@ (8005be0 <pxCurrentTCBConst>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	f01e 0f10 	tst.w	lr, #16
 8005b90:	bf08      	it	eq
 8005b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9a:	6010      	str	r0, [r2, #0]
 8005b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ba0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005ba4:	f380 8811 	msr	BASEPRI, r0
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f7ff fcb0 	bl	8005514 <vTaskSwitchContext>
 8005bb4:	f04f 0000 	mov.w	r0, #0
 8005bb8:	f380 8811 	msr	BASEPRI, r0
 8005bbc:	bc09      	pop	{r0, r3}
 8005bbe:	6819      	ldr	r1, [r3, #0]
 8005bc0:	6808      	ldr	r0, [r1, #0]
 8005bc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc6:	f01e 0f10 	tst.w	lr, #16
 8005bca:	bf08      	it	eq
 8005bcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005bd0:	f380 8809 	msr	PSP, r0
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	f3af 8000 	nop.w

08005be0 <pxCurrentTCBConst>:
 8005be0:	20000490 	.word	0x20000490
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop

08005be8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	607b      	str	r3, [r7, #4]
}
 8005c00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c02:	f7ff fbcd 	bl	80053a0 <xTaskIncrementTick>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c0c:	4b06      	ldr	r3, [pc, #24]	@ (8005c28 <SysTick_Handler+0x40>)
 8005c0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	2300      	movs	r3, #0
 8005c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	f383 8811 	msr	BASEPRI, r3
}
 8005c1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c20:	bf00      	nop
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	e000ed04 	.word	0xe000ed04

08005c2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c30:	4b0b      	ldr	r3, [pc, #44]	@ (8005c60 <vPortSetupTimerInterrupt+0x34>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c36:	4b0b      	ldr	r3, [pc, #44]	@ (8005c64 <vPortSetupTimerInterrupt+0x38>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c68 <vPortSetupTimerInterrupt+0x3c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a0a      	ldr	r2, [pc, #40]	@ (8005c6c <vPortSetupTimerInterrupt+0x40>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	099b      	lsrs	r3, r3, #6
 8005c48:	4a09      	ldr	r2, [pc, #36]	@ (8005c70 <vPortSetupTimerInterrupt+0x44>)
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c4e:	4b04      	ldr	r3, [pc, #16]	@ (8005c60 <vPortSetupTimerInterrupt+0x34>)
 8005c50:	2207      	movs	r2, #7
 8005c52:	601a      	str	r2, [r3, #0]
}
 8005c54:	bf00      	nop
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	e000e010 	.word	0xe000e010
 8005c64:	e000e018 	.word	0xe000e018
 8005c68:	20000000 	.word	0x20000000
 8005c6c:	10624dd3 	.word	0x10624dd3
 8005c70:	e000e014 	.word	0xe000e014

08005c74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005c84 <vPortEnableVFP+0x10>
 8005c78:	6801      	ldr	r1, [r0, #0]
 8005c7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005c7e:	6001      	str	r1, [r0, #0]
 8005c80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c82:	bf00      	nop
 8005c84:	e000ed88 	.word	0xe000ed88

08005c88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08a      	sub	sp, #40	@ 0x28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c90:	2300      	movs	r3, #0
 8005c92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c94:	f7ff fad8 	bl	8005248 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c98:	4b5c      	ldr	r3, [pc, #368]	@ (8005e0c <pvPortMalloc+0x184>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ca0:	f000 f924 	bl	8005eec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ca4:	4b5a      	ldr	r3, [pc, #360]	@ (8005e10 <pvPortMalloc+0x188>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4013      	ands	r3, r2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f040 8095 	bne.w	8005ddc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d01e      	beq.n	8005cf6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005cb8:	2208      	movs	r2, #8
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d015      	beq.n	8005cf6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f023 0307 	bic.w	r3, r3, #7
 8005cd0:	3308      	adds	r3, #8
 8005cd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00b      	beq.n	8005cf6 <pvPortMalloc+0x6e>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	617b      	str	r3, [r7, #20]
}
 8005cf0:	bf00      	nop
 8005cf2:	bf00      	nop
 8005cf4:	e7fd      	b.n	8005cf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d06f      	beq.n	8005ddc <pvPortMalloc+0x154>
 8005cfc:	4b45      	ldr	r3, [pc, #276]	@ (8005e14 <pvPortMalloc+0x18c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d86a      	bhi.n	8005ddc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d06:	4b44      	ldr	r3, [pc, #272]	@ (8005e18 <pvPortMalloc+0x190>)
 8005d08:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d0a:	4b43      	ldr	r3, [pc, #268]	@ (8005e18 <pvPortMalloc+0x190>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d10:	e004      	b.n	8005d1c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d14:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d903      	bls.n	8005d2e <pvPortMalloc+0xa6>
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1f1      	bne.n	8005d12 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d2e:	4b37      	ldr	r3, [pc, #220]	@ (8005e0c <pvPortMalloc+0x184>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d051      	beq.n	8005ddc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2208      	movs	r2, #8
 8005d3e:	4413      	add	r3, r2
 8005d40:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	1ad2      	subs	r2, r2, r3
 8005d52:	2308      	movs	r3, #8
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d920      	bls.n	8005d9c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4413      	add	r3, r2
 8005d60:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00b      	beq.n	8005d84 <pvPortMalloc+0xfc>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	613b      	str	r3, [r7, #16]
}
 8005d7e:	bf00      	nop
 8005d80:	bf00      	nop
 8005d82:	e7fd      	b.n	8005d80 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	1ad2      	subs	r2, r2, r3
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d96:	69b8      	ldr	r0, [r7, #24]
 8005d98:	f000 f90a 	bl	8005fb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8005e14 <pvPortMalloc+0x18c>)
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	4a1b      	ldr	r2, [pc, #108]	@ (8005e14 <pvPortMalloc+0x18c>)
 8005da8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005daa:	4b1a      	ldr	r3, [pc, #104]	@ (8005e14 <pvPortMalloc+0x18c>)
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	4b1b      	ldr	r3, [pc, #108]	@ (8005e1c <pvPortMalloc+0x194>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d203      	bcs.n	8005dbe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005db6:	4b17      	ldr	r3, [pc, #92]	@ (8005e14 <pvPortMalloc+0x18c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a18      	ldr	r2, [pc, #96]	@ (8005e1c <pvPortMalloc+0x194>)
 8005dbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	4b13      	ldr	r3, [pc, #76]	@ (8005e10 <pvPortMalloc+0x188>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005dd2:	4b13      	ldr	r3, [pc, #76]	@ (8005e20 <pvPortMalloc+0x198>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	4a11      	ldr	r2, [pc, #68]	@ (8005e20 <pvPortMalloc+0x198>)
 8005dda:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ddc:	f7ff fa42 	bl	8005264 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00b      	beq.n	8005e02 <pvPortMalloc+0x17a>
	__asm volatile
 8005dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	60fb      	str	r3, [r7, #12]
}
 8005dfc:	bf00      	nop
 8005dfe:	bf00      	nop
 8005e00:	e7fd      	b.n	8005dfe <pvPortMalloc+0x176>
	return pvReturn;
 8005e02:	69fb      	ldr	r3, [r7, #28]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3728      	adds	r7, #40	@ 0x28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	200045cc 	.word	0x200045cc
 8005e10:	200045e0 	.word	0x200045e0
 8005e14:	200045d0 	.word	0x200045d0
 8005e18:	200045c4 	.word	0x200045c4
 8005e1c:	200045d4 	.word	0x200045d4
 8005e20:	200045d8 	.word	0x200045d8

08005e24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d04f      	beq.n	8005ed6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e36:	2308      	movs	r3, #8
 8005e38:	425b      	negs	r3, r3
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	4b25      	ldr	r3, [pc, #148]	@ (8005ee0 <vPortFree+0xbc>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10b      	bne.n	8005e6a <vPortFree+0x46>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	60fb      	str	r3, [r7, #12]
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop
 8005e68:	e7fd      	b.n	8005e66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00b      	beq.n	8005e8a <vPortFree+0x66>
	__asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	60bb      	str	r3, [r7, #8]
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop
 8005e88:	e7fd      	b.n	8005e86 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	4b14      	ldr	r3, [pc, #80]	@ (8005ee0 <vPortFree+0xbc>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4013      	ands	r3, r2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01e      	beq.n	8005ed6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d11a      	bne.n	8005ed6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee0 <vPortFree+0xbc>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	43db      	mvns	r3, r3
 8005eaa:	401a      	ands	r2, r3
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005eb0:	f7ff f9ca 	bl	8005248 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee4 <vPortFree+0xc0>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	4a09      	ldr	r2, [pc, #36]	@ (8005ee4 <vPortFree+0xc0>)
 8005ec0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ec2:	6938      	ldr	r0, [r7, #16]
 8005ec4:	f000 f874 	bl	8005fb0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ec8:	4b07      	ldr	r3, [pc, #28]	@ (8005ee8 <vPortFree+0xc4>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	4a06      	ldr	r2, [pc, #24]	@ (8005ee8 <vPortFree+0xc4>)
 8005ed0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005ed2:	f7ff f9c7 	bl	8005264 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ed6:	bf00      	nop
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	200045e0 	.word	0x200045e0
 8005ee4:	200045d0 	.word	0x200045d0
 8005ee8:	200045dc 	.word	0x200045dc

08005eec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ef2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005ef6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ef8:	4b27      	ldr	r3, [pc, #156]	@ (8005f98 <prvHeapInit+0xac>)
 8005efa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00c      	beq.n	8005f20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3307      	adds	r3, #7
 8005f0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0307 	bic.w	r3, r3, #7
 8005f12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8005f98 <prvHeapInit+0xac>)
 8005f1c:	4413      	add	r3, r2
 8005f1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f24:	4a1d      	ldr	r2, [pc, #116]	@ (8005f9c <prvHeapInit+0xb0>)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8005f9c <prvHeapInit+0xb0>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	4413      	add	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f38:	2208      	movs	r2, #8
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	1a9b      	subs	r3, r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 0307 	bic.w	r3, r3, #7
 8005f46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4a15      	ldr	r2, [pc, #84]	@ (8005fa0 <prvHeapInit+0xb4>)
 8005f4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f4e:	4b14      	ldr	r3, [pc, #80]	@ (8005fa0 <prvHeapInit+0xb4>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2200      	movs	r2, #0
 8005f54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f56:	4b12      	ldr	r3, [pc, #72]	@ (8005fa0 <prvHeapInit+0xb4>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	1ad2      	subs	r2, r2, r3
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa0 <prvHeapInit+0xb4>)
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	4a0a      	ldr	r2, [pc, #40]	@ (8005fa4 <prvHeapInit+0xb8>)
 8005f7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	4a09      	ldr	r2, [pc, #36]	@ (8005fa8 <prvHeapInit+0xbc>)
 8005f82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f84:	4b09      	ldr	r3, [pc, #36]	@ (8005fac <prvHeapInit+0xc0>)
 8005f86:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f8a:	601a      	str	r2, [r3, #0]
}
 8005f8c:	bf00      	nop
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	200005c4 	.word	0x200005c4
 8005f9c:	200045c4 	.word	0x200045c4
 8005fa0:	200045cc 	.word	0x200045cc
 8005fa4:	200045d4 	.word	0x200045d4
 8005fa8:	200045d0 	.word	0x200045d0
 8005fac:	200045e0 	.word	0x200045e0

08005fb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fb8:	4b28      	ldr	r3, [pc, #160]	@ (800605c <prvInsertBlockIntoFreeList+0xac>)
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	e002      	b.n	8005fc4 <prvInsertBlockIntoFreeList+0x14>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d8f7      	bhi.n	8005fbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	4413      	add	r3, r2
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d108      	bne.n	8005ff2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	441a      	add	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	441a      	add	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d118      	bne.n	8006038 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	4b15      	ldr	r3, [pc, #84]	@ (8006060 <prvInsertBlockIntoFreeList+0xb0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d00d      	beq.n	800602e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	441a      	add	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	e008      	b.n	8006040 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800602e:	4b0c      	ldr	r3, [pc, #48]	@ (8006060 <prvInsertBlockIntoFreeList+0xb0>)
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	e003      	b.n	8006040 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	429a      	cmp	r2, r3
 8006046:	d002      	beq.n	800604e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800604e:	bf00      	nop
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	200045c4 	.word	0x200045c4
 8006060:	200045cc 	.word	0x200045cc

08006064 <siprintf>:
 8006064:	b40e      	push	{r1, r2, r3}
 8006066:	b500      	push	{lr}
 8006068:	b09c      	sub	sp, #112	@ 0x70
 800606a:	ab1d      	add	r3, sp, #116	@ 0x74
 800606c:	9002      	str	r0, [sp, #8]
 800606e:	9006      	str	r0, [sp, #24]
 8006070:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006074:	4809      	ldr	r0, [pc, #36]	@ (800609c <siprintf+0x38>)
 8006076:	9107      	str	r1, [sp, #28]
 8006078:	9104      	str	r1, [sp, #16]
 800607a:	4909      	ldr	r1, [pc, #36]	@ (80060a0 <siprintf+0x3c>)
 800607c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006080:	9105      	str	r1, [sp, #20]
 8006082:	6800      	ldr	r0, [r0, #0]
 8006084:	9301      	str	r3, [sp, #4]
 8006086:	a902      	add	r1, sp, #8
 8006088:	f000 f9f8 	bl	800647c <_svfiprintf_r>
 800608c:	9b02      	ldr	r3, [sp, #8]
 800608e:	2200      	movs	r2, #0
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	b01c      	add	sp, #112	@ 0x70
 8006094:	f85d eb04 	ldr.w	lr, [sp], #4
 8006098:	b003      	add	sp, #12
 800609a:	4770      	bx	lr
 800609c:	20000010 	.word	0x20000010
 80060a0:	ffff0208 	.word	0xffff0208

080060a4 <memset>:
 80060a4:	4402      	add	r2, r0
 80060a6:	4603      	mov	r3, r0
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d100      	bne.n	80060ae <memset+0xa>
 80060ac:	4770      	bx	lr
 80060ae:	f803 1b01 	strb.w	r1, [r3], #1
 80060b2:	e7f9      	b.n	80060a8 <memset+0x4>

080060b4 <_reclaim_reent>:
 80060b4:	4b29      	ldr	r3, [pc, #164]	@ (800615c <_reclaim_reent+0xa8>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4283      	cmp	r3, r0
 80060ba:	b570      	push	{r4, r5, r6, lr}
 80060bc:	4604      	mov	r4, r0
 80060be:	d04b      	beq.n	8006158 <_reclaim_reent+0xa4>
 80060c0:	69c3      	ldr	r3, [r0, #28]
 80060c2:	b1ab      	cbz	r3, 80060f0 <_reclaim_reent+0x3c>
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	b16b      	cbz	r3, 80060e4 <_reclaim_reent+0x30>
 80060c8:	2500      	movs	r5, #0
 80060ca:	69e3      	ldr	r3, [r4, #28]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	5959      	ldr	r1, [r3, r5]
 80060d0:	2900      	cmp	r1, #0
 80060d2:	d13b      	bne.n	800614c <_reclaim_reent+0x98>
 80060d4:	3504      	adds	r5, #4
 80060d6:	2d80      	cmp	r5, #128	@ 0x80
 80060d8:	d1f7      	bne.n	80060ca <_reclaim_reent+0x16>
 80060da:	69e3      	ldr	r3, [r4, #28]
 80060dc:	4620      	mov	r0, r4
 80060de:	68d9      	ldr	r1, [r3, #12]
 80060e0:	f000 f878 	bl	80061d4 <_free_r>
 80060e4:	69e3      	ldr	r3, [r4, #28]
 80060e6:	6819      	ldr	r1, [r3, #0]
 80060e8:	b111      	cbz	r1, 80060f0 <_reclaim_reent+0x3c>
 80060ea:	4620      	mov	r0, r4
 80060ec:	f000 f872 	bl	80061d4 <_free_r>
 80060f0:	6961      	ldr	r1, [r4, #20]
 80060f2:	b111      	cbz	r1, 80060fa <_reclaim_reent+0x46>
 80060f4:	4620      	mov	r0, r4
 80060f6:	f000 f86d 	bl	80061d4 <_free_r>
 80060fa:	69e1      	ldr	r1, [r4, #28]
 80060fc:	b111      	cbz	r1, 8006104 <_reclaim_reent+0x50>
 80060fe:	4620      	mov	r0, r4
 8006100:	f000 f868 	bl	80061d4 <_free_r>
 8006104:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006106:	b111      	cbz	r1, 800610e <_reclaim_reent+0x5a>
 8006108:	4620      	mov	r0, r4
 800610a:	f000 f863 	bl	80061d4 <_free_r>
 800610e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006110:	b111      	cbz	r1, 8006118 <_reclaim_reent+0x64>
 8006112:	4620      	mov	r0, r4
 8006114:	f000 f85e 	bl	80061d4 <_free_r>
 8006118:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800611a:	b111      	cbz	r1, 8006122 <_reclaim_reent+0x6e>
 800611c:	4620      	mov	r0, r4
 800611e:	f000 f859 	bl	80061d4 <_free_r>
 8006122:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006124:	b111      	cbz	r1, 800612c <_reclaim_reent+0x78>
 8006126:	4620      	mov	r0, r4
 8006128:	f000 f854 	bl	80061d4 <_free_r>
 800612c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800612e:	b111      	cbz	r1, 8006136 <_reclaim_reent+0x82>
 8006130:	4620      	mov	r0, r4
 8006132:	f000 f84f 	bl	80061d4 <_free_r>
 8006136:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006138:	b111      	cbz	r1, 8006140 <_reclaim_reent+0x8c>
 800613a:	4620      	mov	r0, r4
 800613c:	f000 f84a 	bl	80061d4 <_free_r>
 8006140:	6a23      	ldr	r3, [r4, #32]
 8006142:	b14b      	cbz	r3, 8006158 <_reclaim_reent+0xa4>
 8006144:	4620      	mov	r0, r4
 8006146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800614a:	4718      	bx	r3
 800614c:	680e      	ldr	r6, [r1, #0]
 800614e:	4620      	mov	r0, r4
 8006150:	f000 f840 	bl	80061d4 <_free_r>
 8006154:	4631      	mov	r1, r6
 8006156:	e7bb      	b.n	80060d0 <_reclaim_reent+0x1c>
 8006158:	bd70      	pop	{r4, r5, r6, pc}
 800615a:	bf00      	nop
 800615c:	20000010 	.word	0x20000010

08006160 <__errno>:
 8006160:	4b01      	ldr	r3, [pc, #4]	@ (8006168 <__errno+0x8>)
 8006162:	6818      	ldr	r0, [r3, #0]
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	20000010 	.word	0x20000010

0800616c <__libc_init_array>:
 800616c:	b570      	push	{r4, r5, r6, lr}
 800616e:	4d0d      	ldr	r5, [pc, #52]	@ (80061a4 <__libc_init_array+0x38>)
 8006170:	4c0d      	ldr	r4, [pc, #52]	@ (80061a8 <__libc_init_array+0x3c>)
 8006172:	1b64      	subs	r4, r4, r5
 8006174:	10a4      	asrs	r4, r4, #2
 8006176:	2600      	movs	r6, #0
 8006178:	42a6      	cmp	r6, r4
 800617a:	d109      	bne.n	8006190 <__libc_init_array+0x24>
 800617c:	4d0b      	ldr	r5, [pc, #44]	@ (80061ac <__libc_init_array+0x40>)
 800617e:	4c0c      	ldr	r4, [pc, #48]	@ (80061b0 <__libc_init_array+0x44>)
 8006180:	f000 fc66 	bl	8006a50 <_init>
 8006184:	1b64      	subs	r4, r4, r5
 8006186:	10a4      	asrs	r4, r4, #2
 8006188:	2600      	movs	r6, #0
 800618a:	42a6      	cmp	r6, r4
 800618c:	d105      	bne.n	800619a <__libc_init_array+0x2e>
 800618e:	bd70      	pop	{r4, r5, r6, pc}
 8006190:	f855 3b04 	ldr.w	r3, [r5], #4
 8006194:	4798      	blx	r3
 8006196:	3601      	adds	r6, #1
 8006198:	e7ee      	b.n	8006178 <__libc_init_array+0xc>
 800619a:	f855 3b04 	ldr.w	r3, [r5], #4
 800619e:	4798      	blx	r3
 80061a0:	3601      	adds	r6, #1
 80061a2:	e7f2      	b.n	800618a <__libc_init_array+0x1e>
 80061a4:	08006b78 	.word	0x08006b78
 80061a8:	08006b78 	.word	0x08006b78
 80061ac:	08006b78 	.word	0x08006b78
 80061b0:	08006b7c 	.word	0x08006b7c

080061b4 <__retarget_lock_acquire_recursive>:
 80061b4:	4770      	bx	lr

080061b6 <__retarget_lock_release_recursive>:
 80061b6:	4770      	bx	lr

080061b8 <memcpy>:
 80061b8:	440a      	add	r2, r1
 80061ba:	4291      	cmp	r1, r2
 80061bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80061c0:	d100      	bne.n	80061c4 <memcpy+0xc>
 80061c2:	4770      	bx	lr
 80061c4:	b510      	push	{r4, lr}
 80061c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061ce:	4291      	cmp	r1, r2
 80061d0:	d1f9      	bne.n	80061c6 <memcpy+0xe>
 80061d2:	bd10      	pop	{r4, pc}

080061d4 <_free_r>:
 80061d4:	b538      	push	{r3, r4, r5, lr}
 80061d6:	4605      	mov	r5, r0
 80061d8:	2900      	cmp	r1, #0
 80061da:	d041      	beq.n	8006260 <_free_r+0x8c>
 80061dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061e0:	1f0c      	subs	r4, r1, #4
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	bfb8      	it	lt
 80061e6:	18e4      	addlt	r4, r4, r3
 80061e8:	f000 f8e0 	bl	80063ac <__malloc_lock>
 80061ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006264 <_free_r+0x90>)
 80061ee:	6813      	ldr	r3, [r2, #0]
 80061f0:	b933      	cbnz	r3, 8006200 <_free_r+0x2c>
 80061f2:	6063      	str	r3, [r4, #4]
 80061f4:	6014      	str	r4, [r2, #0]
 80061f6:	4628      	mov	r0, r5
 80061f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061fc:	f000 b8dc 	b.w	80063b8 <__malloc_unlock>
 8006200:	42a3      	cmp	r3, r4
 8006202:	d908      	bls.n	8006216 <_free_r+0x42>
 8006204:	6820      	ldr	r0, [r4, #0]
 8006206:	1821      	adds	r1, r4, r0
 8006208:	428b      	cmp	r3, r1
 800620a:	bf01      	itttt	eq
 800620c:	6819      	ldreq	r1, [r3, #0]
 800620e:	685b      	ldreq	r3, [r3, #4]
 8006210:	1809      	addeq	r1, r1, r0
 8006212:	6021      	streq	r1, [r4, #0]
 8006214:	e7ed      	b.n	80061f2 <_free_r+0x1e>
 8006216:	461a      	mov	r2, r3
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	b10b      	cbz	r3, 8006220 <_free_r+0x4c>
 800621c:	42a3      	cmp	r3, r4
 800621e:	d9fa      	bls.n	8006216 <_free_r+0x42>
 8006220:	6811      	ldr	r1, [r2, #0]
 8006222:	1850      	adds	r0, r2, r1
 8006224:	42a0      	cmp	r0, r4
 8006226:	d10b      	bne.n	8006240 <_free_r+0x6c>
 8006228:	6820      	ldr	r0, [r4, #0]
 800622a:	4401      	add	r1, r0
 800622c:	1850      	adds	r0, r2, r1
 800622e:	4283      	cmp	r3, r0
 8006230:	6011      	str	r1, [r2, #0]
 8006232:	d1e0      	bne.n	80061f6 <_free_r+0x22>
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	6053      	str	r3, [r2, #4]
 800623a:	4408      	add	r0, r1
 800623c:	6010      	str	r0, [r2, #0]
 800623e:	e7da      	b.n	80061f6 <_free_r+0x22>
 8006240:	d902      	bls.n	8006248 <_free_r+0x74>
 8006242:	230c      	movs	r3, #12
 8006244:	602b      	str	r3, [r5, #0]
 8006246:	e7d6      	b.n	80061f6 <_free_r+0x22>
 8006248:	6820      	ldr	r0, [r4, #0]
 800624a:	1821      	adds	r1, r4, r0
 800624c:	428b      	cmp	r3, r1
 800624e:	bf04      	itt	eq
 8006250:	6819      	ldreq	r1, [r3, #0]
 8006252:	685b      	ldreq	r3, [r3, #4]
 8006254:	6063      	str	r3, [r4, #4]
 8006256:	bf04      	itt	eq
 8006258:	1809      	addeq	r1, r1, r0
 800625a:	6021      	streq	r1, [r4, #0]
 800625c:	6054      	str	r4, [r2, #4]
 800625e:	e7ca      	b.n	80061f6 <_free_r+0x22>
 8006260:	bd38      	pop	{r3, r4, r5, pc}
 8006262:	bf00      	nop
 8006264:	20004728 	.word	0x20004728

08006268 <sbrk_aligned>:
 8006268:	b570      	push	{r4, r5, r6, lr}
 800626a:	4e0f      	ldr	r6, [pc, #60]	@ (80062a8 <sbrk_aligned+0x40>)
 800626c:	460c      	mov	r4, r1
 800626e:	6831      	ldr	r1, [r6, #0]
 8006270:	4605      	mov	r5, r0
 8006272:	b911      	cbnz	r1, 800627a <sbrk_aligned+0x12>
 8006274:	f000 fba6 	bl	80069c4 <_sbrk_r>
 8006278:	6030      	str	r0, [r6, #0]
 800627a:	4621      	mov	r1, r4
 800627c:	4628      	mov	r0, r5
 800627e:	f000 fba1 	bl	80069c4 <_sbrk_r>
 8006282:	1c43      	adds	r3, r0, #1
 8006284:	d103      	bne.n	800628e <sbrk_aligned+0x26>
 8006286:	f04f 34ff 	mov.w	r4, #4294967295
 800628a:	4620      	mov	r0, r4
 800628c:	bd70      	pop	{r4, r5, r6, pc}
 800628e:	1cc4      	adds	r4, r0, #3
 8006290:	f024 0403 	bic.w	r4, r4, #3
 8006294:	42a0      	cmp	r0, r4
 8006296:	d0f8      	beq.n	800628a <sbrk_aligned+0x22>
 8006298:	1a21      	subs	r1, r4, r0
 800629a:	4628      	mov	r0, r5
 800629c:	f000 fb92 	bl	80069c4 <_sbrk_r>
 80062a0:	3001      	adds	r0, #1
 80062a2:	d1f2      	bne.n	800628a <sbrk_aligned+0x22>
 80062a4:	e7ef      	b.n	8006286 <sbrk_aligned+0x1e>
 80062a6:	bf00      	nop
 80062a8:	20004724 	.word	0x20004724

080062ac <_malloc_r>:
 80062ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062b0:	1ccd      	adds	r5, r1, #3
 80062b2:	f025 0503 	bic.w	r5, r5, #3
 80062b6:	3508      	adds	r5, #8
 80062b8:	2d0c      	cmp	r5, #12
 80062ba:	bf38      	it	cc
 80062bc:	250c      	movcc	r5, #12
 80062be:	2d00      	cmp	r5, #0
 80062c0:	4606      	mov	r6, r0
 80062c2:	db01      	blt.n	80062c8 <_malloc_r+0x1c>
 80062c4:	42a9      	cmp	r1, r5
 80062c6:	d904      	bls.n	80062d2 <_malloc_r+0x26>
 80062c8:	230c      	movs	r3, #12
 80062ca:	6033      	str	r3, [r6, #0]
 80062cc:	2000      	movs	r0, #0
 80062ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063a8 <_malloc_r+0xfc>
 80062d6:	f000 f869 	bl	80063ac <__malloc_lock>
 80062da:	f8d8 3000 	ldr.w	r3, [r8]
 80062de:	461c      	mov	r4, r3
 80062e0:	bb44      	cbnz	r4, 8006334 <_malloc_r+0x88>
 80062e2:	4629      	mov	r1, r5
 80062e4:	4630      	mov	r0, r6
 80062e6:	f7ff ffbf 	bl	8006268 <sbrk_aligned>
 80062ea:	1c43      	adds	r3, r0, #1
 80062ec:	4604      	mov	r4, r0
 80062ee:	d158      	bne.n	80063a2 <_malloc_r+0xf6>
 80062f0:	f8d8 4000 	ldr.w	r4, [r8]
 80062f4:	4627      	mov	r7, r4
 80062f6:	2f00      	cmp	r7, #0
 80062f8:	d143      	bne.n	8006382 <_malloc_r+0xd6>
 80062fa:	2c00      	cmp	r4, #0
 80062fc:	d04b      	beq.n	8006396 <_malloc_r+0xea>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	4639      	mov	r1, r7
 8006302:	4630      	mov	r0, r6
 8006304:	eb04 0903 	add.w	r9, r4, r3
 8006308:	f000 fb5c 	bl	80069c4 <_sbrk_r>
 800630c:	4581      	cmp	r9, r0
 800630e:	d142      	bne.n	8006396 <_malloc_r+0xea>
 8006310:	6821      	ldr	r1, [r4, #0]
 8006312:	1a6d      	subs	r5, r5, r1
 8006314:	4629      	mov	r1, r5
 8006316:	4630      	mov	r0, r6
 8006318:	f7ff ffa6 	bl	8006268 <sbrk_aligned>
 800631c:	3001      	adds	r0, #1
 800631e:	d03a      	beq.n	8006396 <_malloc_r+0xea>
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	442b      	add	r3, r5
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	f8d8 3000 	ldr.w	r3, [r8]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	bb62      	cbnz	r2, 8006388 <_malloc_r+0xdc>
 800632e:	f8c8 7000 	str.w	r7, [r8]
 8006332:	e00f      	b.n	8006354 <_malloc_r+0xa8>
 8006334:	6822      	ldr	r2, [r4, #0]
 8006336:	1b52      	subs	r2, r2, r5
 8006338:	d420      	bmi.n	800637c <_malloc_r+0xd0>
 800633a:	2a0b      	cmp	r2, #11
 800633c:	d917      	bls.n	800636e <_malloc_r+0xc2>
 800633e:	1961      	adds	r1, r4, r5
 8006340:	42a3      	cmp	r3, r4
 8006342:	6025      	str	r5, [r4, #0]
 8006344:	bf18      	it	ne
 8006346:	6059      	strne	r1, [r3, #4]
 8006348:	6863      	ldr	r3, [r4, #4]
 800634a:	bf08      	it	eq
 800634c:	f8c8 1000 	streq.w	r1, [r8]
 8006350:	5162      	str	r2, [r4, r5]
 8006352:	604b      	str	r3, [r1, #4]
 8006354:	4630      	mov	r0, r6
 8006356:	f000 f82f 	bl	80063b8 <__malloc_unlock>
 800635a:	f104 000b 	add.w	r0, r4, #11
 800635e:	1d23      	adds	r3, r4, #4
 8006360:	f020 0007 	bic.w	r0, r0, #7
 8006364:	1ac2      	subs	r2, r0, r3
 8006366:	bf1c      	itt	ne
 8006368:	1a1b      	subne	r3, r3, r0
 800636a:	50a3      	strne	r3, [r4, r2]
 800636c:	e7af      	b.n	80062ce <_malloc_r+0x22>
 800636e:	6862      	ldr	r2, [r4, #4]
 8006370:	42a3      	cmp	r3, r4
 8006372:	bf0c      	ite	eq
 8006374:	f8c8 2000 	streq.w	r2, [r8]
 8006378:	605a      	strne	r2, [r3, #4]
 800637a:	e7eb      	b.n	8006354 <_malloc_r+0xa8>
 800637c:	4623      	mov	r3, r4
 800637e:	6864      	ldr	r4, [r4, #4]
 8006380:	e7ae      	b.n	80062e0 <_malloc_r+0x34>
 8006382:	463c      	mov	r4, r7
 8006384:	687f      	ldr	r7, [r7, #4]
 8006386:	e7b6      	b.n	80062f6 <_malloc_r+0x4a>
 8006388:	461a      	mov	r2, r3
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	42a3      	cmp	r3, r4
 800638e:	d1fb      	bne.n	8006388 <_malloc_r+0xdc>
 8006390:	2300      	movs	r3, #0
 8006392:	6053      	str	r3, [r2, #4]
 8006394:	e7de      	b.n	8006354 <_malloc_r+0xa8>
 8006396:	230c      	movs	r3, #12
 8006398:	6033      	str	r3, [r6, #0]
 800639a:	4630      	mov	r0, r6
 800639c:	f000 f80c 	bl	80063b8 <__malloc_unlock>
 80063a0:	e794      	b.n	80062cc <_malloc_r+0x20>
 80063a2:	6005      	str	r5, [r0, #0]
 80063a4:	e7d6      	b.n	8006354 <_malloc_r+0xa8>
 80063a6:	bf00      	nop
 80063a8:	20004728 	.word	0x20004728

080063ac <__malloc_lock>:
 80063ac:	4801      	ldr	r0, [pc, #4]	@ (80063b4 <__malloc_lock+0x8>)
 80063ae:	f7ff bf01 	b.w	80061b4 <__retarget_lock_acquire_recursive>
 80063b2:	bf00      	nop
 80063b4:	20004720 	.word	0x20004720

080063b8 <__malloc_unlock>:
 80063b8:	4801      	ldr	r0, [pc, #4]	@ (80063c0 <__malloc_unlock+0x8>)
 80063ba:	f7ff befc 	b.w	80061b6 <__retarget_lock_release_recursive>
 80063be:	bf00      	nop
 80063c0:	20004720 	.word	0x20004720

080063c4 <__ssputs_r>:
 80063c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063c8:	688e      	ldr	r6, [r1, #8]
 80063ca:	461f      	mov	r7, r3
 80063cc:	42be      	cmp	r6, r7
 80063ce:	680b      	ldr	r3, [r1, #0]
 80063d0:	4682      	mov	sl, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	4690      	mov	r8, r2
 80063d6:	d82d      	bhi.n	8006434 <__ssputs_r+0x70>
 80063d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80063dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80063e0:	d026      	beq.n	8006430 <__ssputs_r+0x6c>
 80063e2:	6965      	ldr	r5, [r4, #20]
 80063e4:	6909      	ldr	r1, [r1, #16]
 80063e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063ea:	eba3 0901 	sub.w	r9, r3, r1
 80063ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063f2:	1c7b      	adds	r3, r7, #1
 80063f4:	444b      	add	r3, r9
 80063f6:	106d      	asrs	r5, r5, #1
 80063f8:	429d      	cmp	r5, r3
 80063fa:	bf38      	it	cc
 80063fc:	461d      	movcc	r5, r3
 80063fe:	0553      	lsls	r3, r2, #21
 8006400:	d527      	bpl.n	8006452 <__ssputs_r+0x8e>
 8006402:	4629      	mov	r1, r5
 8006404:	f7ff ff52 	bl	80062ac <_malloc_r>
 8006408:	4606      	mov	r6, r0
 800640a:	b360      	cbz	r0, 8006466 <__ssputs_r+0xa2>
 800640c:	6921      	ldr	r1, [r4, #16]
 800640e:	464a      	mov	r2, r9
 8006410:	f7ff fed2 	bl	80061b8 <memcpy>
 8006414:	89a3      	ldrh	r3, [r4, #12]
 8006416:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800641a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800641e:	81a3      	strh	r3, [r4, #12]
 8006420:	6126      	str	r6, [r4, #16]
 8006422:	6165      	str	r5, [r4, #20]
 8006424:	444e      	add	r6, r9
 8006426:	eba5 0509 	sub.w	r5, r5, r9
 800642a:	6026      	str	r6, [r4, #0]
 800642c:	60a5      	str	r5, [r4, #8]
 800642e:	463e      	mov	r6, r7
 8006430:	42be      	cmp	r6, r7
 8006432:	d900      	bls.n	8006436 <__ssputs_r+0x72>
 8006434:	463e      	mov	r6, r7
 8006436:	6820      	ldr	r0, [r4, #0]
 8006438:	4632      	mov	r2, r6
 800643a:	4641      	mov	r1, r8
 800643c:	f000 faa8 	bl	8006990 <memmove>
 8006440:	68a3      	ldr	r3, [r4, #8]
 8006442:	1b9b      	subs	r3, r3, r6
 8006444:	60a3      	str	r3, [r4, #8]
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	4433      	add	r3, r6
 800644a:	6023      	str	r3, [r4, #0]
 800644c:	2000      	movs	r0, #0
 800644e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006452:	462a      	mov	r2, r5
 8006454:	f000 fac6 	bl	80069e4 <_realloc_r>
 8006458:	4606      	mov	r6, r0
 800645a:	2800      	cmp	r0, #0
 800645c:	d1e0      	bne.n	8006420 <__ssputs_r+0x5c>
 800645e:	6921      	ldr	r1, [r4, #16]
 8006460:	4650      	mov	r0, sl
 8006462:	f7ff feb7 	bl	80061d4 <_free_r>
 8006466:	230c      	movs	r3, #12
 8006468:	f8ca 3000 	str.w	r3, [sl]
 800646c:	89a3      	ldrh	r3, [r4, #12]
 800646e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006472:	81a3      	strh	r3, [r4, #12]
 8006474:	f04f 30ff 	mov.w	r0, #4294967295
 8006478:	e7e9      	b.n	800644e <__ssputs_r+0x8a>
	...

0800647c <_svfiprintf_r>:
 800647c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006480:	4698      	mov	r8, r3
 8006482:	898b      	ldrh	r3, [r1, #12]
 8006484:	061b      	lsls	r3, r3, #24
 8006486:	b09d      	sub	sp, #116	@ 0x74
 8006488:	4607      	mov	r7, r0
 800648a:	460d      	mov	r5, r1
 800648c:	4614      	mov	r4, r2
 800648e:	d510      	bpl.n	80064b2 <_svfiprintf_r+0x36>
 8006490:	690b      	ldr	r3, [r1, #16]
 8006492:	b973      	cbnz	r3, 80064b2 <_svfiprintf_r+0x36>
 8006494:	2140      	movs	r1, #64	@ 0x40
 8006496:	f7ff ff09 	bl	80062ac <_malloc_r>
 800649a:	6028      	str	r0, [r5, #0]
 800649c:	6128      	str	r0, [r5, #16]
 800649e:	b930      	cbnz	r0, 80064ae <_svfiprintf_r+0x32>
 80064a0:	230c      	movs	r3, #12
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	f04f 30ff 	mov.w	r0, #4294967295
 80064a8:	b01d      	add	sp, #116	@ 0x74
 80064aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ae:	2340      	movs	r3, #64	@ 0x40
 80064b0:	616b      	str	r3, [r5, #20]
 80064b2:	2300      	movs	r3, #0
 80064b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80064b6:	2320      	movs	r3, #32
 80064b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80064c0:	2330      	movs	r3, #48	@ 0x30
 80064c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006660 <_svfiprintf_r+0x1e4>
 80064c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064ca:	f04f 0901 	mov.w	r9, #1
 80064ce:	4623      	mov	r3, r4
 80064d0:	469a      	mov	sl, r3
 80064d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064d6:	b10a      	cbz	r2, 80064dc <_svfiprintf_r+0x60>
 80064d8:	2a25      	cmp	r2, #37	@ 0x25
 80064da:	d1f9      	bne.n	80064d0 <_svfiprintf_r+0x54>
 80064dc:	ebba 0b04 	subs.w	fp, sl, r4
 80064e0:	d00b      	beq.n	80064fa <_svfiprintf_r+0x7e>
 80064e2:	465b      	mov	r3, fp
 80064e4:	4622      	mov	r2, r4
 80064e6:	4629      	mov	r1, r5
 80064e8:	4638      	mov	r0, r7
 80064ea:	f7ff ff6b 	bl	80063c4 <__ssputs_r>
 80064ee:	3001      	adds	r0, #1
 80064f0:	f000 80a7 	beq.w	8006642 <_svfiprintf_r+0x1c6>
 80064f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064f6:	445a      	add	r2, fp
 80064f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80064fa:	f89a 3000 	ldrb.w	r3, [sl]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 809f 	beq.w	8006642 <_svfiprintf_r+0x1c6>
 8006504:	2300      	movs	r3, #0
 8006506:	f04f 32ff 	mov.w	r2, #4294967295
 800650a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800650e:	f10a 0a01 	add.w	sl, sl, #1
 8006512:	9304      	str	r3, [sp, #16]
 8006514:	9307      	str	r3, [sp, #28]
 8006516:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800651a:	931a      	str	r3, [sp, #104]	@ 0x68
 800651c:	4654      	mov	r4, sl
 800651e:	2205      	movs	r2, #5
 8006520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006524:	484e      	ldr	r0, [pc, #312]	@ (8006660 <_svfiprintf_r+0x1e4>)
 8006526:	f7f9 fe5b 	bl	80001e0 <memchr>
 800652a:	9a04      	ldr	r2, [sp, #16]
 800652c:	b9d8      	cbnz	r0, 8006566 <_svfiprintf_r+0xea>
 800652e:	06d0      	lsls	r0, r2, #27
 8006530:	bf44      	itt	mi
 8006532:	2320      	movmi	r3, #32
 8006534:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006538:	0711      	lsls	r1, r2, #28
 800653a:	bf44      	itt	mi
 800653c:	232b      	movmi	r3, #43	@ 0x2b
 800653e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006542:	f89a 3000 	ldrb.w	r3, [sl]
 8006546:	2b2a      	cmp	r3, #42	@ 0x2a
 8006548:	d015      	beq.n	8006576 <_svfiprintf_r+0xfa>
 800654a:	9a07      	ldr	r2, [sp, #28]
 800654c:	4654      	mov	r4, sl
 800654e:	2000      	movs	r0, #0
 8006550:	f04f 0c0a 	mov.w	ip, #10
 8006554:	4621      	mov	r1, r4
 8006556:	f811 3b01 	ldrb.w	r3, [r1], #1
 800655a:	3b30      	subs	r3, #48	@ 0x30
 800655c:	2b09      	cmp	r3, #9
 800655e:	d94b      	bls.n	80065f8 <_svfiprintf_r+0x17c>
 8006560:	b1b0      	cbz	r0, 8006590 <_svfiprintf_r+0x114>
 8006562:	9207      	str	r2, [sp, #28]
 8006564:	e014      	b.n	8006590 <_svfiprintf_r+0x114>
 8006566:	eba0 0308 	sub.w	r3, r0, r8
 800656a:	fa09 f303 	lsl.w	r3, r9, r3
 800656e:	4313      	orrs	r3, r2
 8006570:	9304      	str	r3, [sp, #16]
 8006572:	46a2      	mov	sl, r4
 8006574:	e7d2      	b.n	800651c <_svfiprintf_r+0xa0>
 8006576:	9b03      	ldr	r3, [sp, #12]
 8006578:	1d19      	adds	r1, r3, #4
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	9103      	str	r1, [sp, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	bfbb      	ittet	lt
 8006582:	425b      	neglt	r3, r3
 8006584:	f042 0202 	orrlt.w	r2, r2, #2
 8006588:	9307      	strge	r3, [sp, #28]
 800658a:	9307      	strlt	r3, [sp, #28]
 800658c:	bfb8      	it	lt
 800658e:	9204      	strlt	r2, [sp, #16]
 8006590:	7823      	ldrb	r3, [r4, #0]
 8006592:	2b2e      	cmp	r3, #46	@ 0x2e
 8006594:	d10a      	bne.n	80065ac <_svfiprintf_r+0x130>
 8006596:	7863      	ldrb	r3, [r4, #1]
 8006598:	2b2a      	cmp	r3, #42	@ 0x2a
 800659a:	d132      	bne.n	8006602 <_svfiprintf_r+0x186>
 800659c:	9b03      	ldr	r3, [sp, #12]
 800659e:	1d1a      	adds	r2, r3, #4
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	9203      	str	r2, [sp, #12]
 80065a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80065a8:	3402      	adds	r4, #2
 80065aa:	9305      	str	r3, [sp, #20]
 80065ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006670 <_svfiprintf_r+0x1f4>
 80065b0:	7821      	ldrb	r1, [r4, #0]
 80065b2:	2203      	movs	r2, #3
 80065b4:	4650      	mov	r0, sl
 80065b6:	f7f9 fe13 	bl	80001e0 <memchr>
 80065ba:	b138      	cbz	r0, 80065cc <_svfiprintf_r+0x150>
 80065bc:	9b04      	ldr	r3, [sp, #16]
 80065be:	eba0 000a 	sub.w	r0, r0, sl
 80065c2:	2240      	movs	r2, #64	@ 0x40
 80065c4:	4082      	lsls	r2, r0
 80065c6:	4313      	orrs	r3, r2
 80065c8:	3401      	adds	r4, #1
 80065ca:	9304      	str	r3, [sp, #16]
 80065cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065d0:	4824      	ldr	r0, [pc, #144]	@ (8006664 <_svfiprintf_r+0x1e8>)
 80065d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065d6:	2206      	movs	r2, #6
 80065d8:	f7f9 fe02 	bl	80001e0 <memchr>
 80065dc:	2800      	cmp	r0, #0
 80065de:	d036      	beq.n	800664e <_svfiprintf_r+0x1d2>
 80065e0:	4b21      	ldr	r3, [pc, #132]	@ (8006668 <_svfiprintf_r+0x1ec>)
 80065e2:	bb1b      	cbnz	r3, 800662c <_svfiprintf_r+0x1b0>
 80065e4:	9b03      	ldr	r3, [sp, #12]
 80065e6:	3307      	adds	r3, #7
 80065e8:	f023 0307 	bic.w	r3, r3, #7
 80065ec:	3308      	adds	r3, #8
 80065ee:	9303      	str	r3, [sp, #12]
 80065f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f2:	4433      	add	r3, r6
 80065f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80065f6:	e76a      	b.n	80064ce <_svfiprintf_r+0x52>
 80065f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80065fc:	460c      	mov	r4, r1
 80065fe:	2001      	movs	r0, #1
 8006600:	e7a8      	b.n	8006554 <_svfiprintf_r+0xd8>
 8006602:	2300      	movs	r3, #0
 8006604:	3401      	adds	r4, #1
 8006606:	9305      	str	r3, [sp, #20]
 8006608:	4619      	mov	r1, r3
 800660a:	f04f 0c0a 	mov.w	ip, #10
 800660e:	4620      	mov	r0, r4
 8006610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006614:	3a30      	subs	r2, #48	@ 0x30
 8006616:	2a09      	cmp	r2, #9
 8006618:	d903      	bls.n	8006622 <_svfiprintf_r+0x1a6>
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0c6      	beq.n	80065ac <_svfiprintf_r+0x130>
 800661e:	9105      	str	r1, [sp, #20]
 8006620:	e7c4      	b.n	80065ac <_svfiprintf_r+0x130>
 8006622:	fb0c 2101 	mla	r1, ip, r1, r2
 8006626:	4604      	mov	r4, r0
 8006628:	2301      	movs	r3, #1
 800662a:	e7f0      	b.n	800660e <_svfiprintf_r+0x192>
 800662c:	ab03      	add	r3, sp, #12
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	462a      	mov	r2, r5
 8006632:	4b0e      	ldr	r3, [pc, #56]	@ (800666c <_svfiprintf_r+0x1f0>)
 8006634:	a904      	add	r1, sp, #16
 8006636:	4638      	mov	r0, r7
 8006638:	f3af 8000 	nop.w
 800663c:	1c42      	adds	r2, r0, #1
 800663e:	4606      	mov	r6, r0
 8006640:	d1d6      	bne.n	80065f0 <_svfiprintf_r+0x174>
 8006642:	89ab      	ldrh	r3, [r5, #12]
 8006644:	065b      	lsls	r3, r3, #25
 8006646:	f53f af2d 	bmi.w	80064a4 <_svfiprintf_r+0x28>
 800664a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800664c:	e72c      	b.n	80064a8 <_svfiprintf_r+0x2c>
 800664e:	ab03      	add	r3, sp, #12
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	462a      	mov	r2, r5
 8006654:	4b05      	ldr	r3, [pc, #20]	@ (800666c <_svfiprintf_r+0x1f0>)
 8006656:	a904      	add	r1, sp, #16
 8006658:	4638      	mov	r0, r7
 800665a:	f000 f879 	bl	8006750 <_printf_i>
 800665e:	e7ed      	b.n	800663c <_svfiprintf_r+0x1c0>
 8006660:	08006b3c 	.word	0x08006b3c
 8006664:	08006b46 	.word	0x08006b46
 8006668:	00000000 	.word	0x00000000
 800666c:	080063c5 	.word	0x080063c5
 8006670:	08006b42 	.word	0x08006b42

08006674 <_printf_common>:
 8006674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006678:	4616      	mov	r6, r2
 800667a:	4698      	mov	r8, r3
 800667c:	688a      	ldr	r2, [r1, #8]
 800667e:	690b      	ldr	r3, [r1, #16]
 8006680:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006684:	4293      	cmp	r3, r2
 8006686:	bfb8      	it	lt
 8006688:	4613      	movlt	r3, r2
 800668a:	6033      	str	r3, [r6, #0]
 800668c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006690:	4607      	mov	r7, r0
 8006692:	460c      	mov	r4, r1
 8006694:	b10a      	cbz	r2, 800669a <_printf_common+0x26>
 8006696:	3301      	adds	r3, #1
 8006698:	6033      	str	r3, [r6, #0]
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	0699      	lsls	r1, r3, #26
 800669e:	bf42      	ittt	mi
 80066a0:	6833      	ldrmi	r3, [r6, #0]
 80066a2:	3302      	addmi	r3, #2
 80066a4:	6033      	strmi	r3, [r6, #0]
 80066a6:	6825      	ldr	r5, [r4, #0]
 80066a8:	f015 0506 	ands.w	r5, r5, #6
 80066ac:	d106      	bne.n	80066bc <_printf_common+0x48>
 80066ae:	f104 0a19 	add.w	sl, r4, #25
 80066b2:	68e3      	ldr	r3, [r4, #12]
 80066b4:	6832      	ldr	r2, [r6, #0]
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	42ab      	cmp	r3, r5
 80066ba:	dc26      	bgt.n	800670a <_printf_common+0x96>
 80066bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80066c0:	6822      	ldr	r2, [r4, #0]
 80066c2:	3b00      	subs	r3, #0
 80066c4:	bf18      	it	ne
 80066c6:	2301      	movne	r3, #1
 80066c8:	0692      	lsls	r2, r2, #26
 80066ca:	d42b      	bmi.n	8006724 <_printf_common+0xb0>
 80066cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80066d0:	4641      	mov	r1, r8
 80066d2:	4638      	mov	r0, r7
 80066d4:	47c8      	blx	r9
 80066d6:	3001      	adds	r0, #1
 80066d8:	d01e      	beq.n	8006718 <_printf_common+0xa4>
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	6922      	ldr	r2, [r4, #16]
 80066de:	f003 0306 	and.w	r3, r3, #6
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	bf02      	ittt	eq
 80066e6:	68e5      	ldreq	r5, [r4, #12]
 80066e8:	6833      	ldreq	r3, [r6, #0]
 80066ea:	1aed      	subeq	r5, r5, r3
 80066ec:	68a3      	ldr	r3, [r4, #8]
 80066ee:	bf0c      	ite	eq
 80066f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066f4:	2500      	movne	r5, #0
 80066f6:	4293      	cmp	r3, r2
 80066f8:	bfc4      	itt	gt
 80066fa:	1a9b      	subgt	r3, r3, r2
 80066fc:	18ed      	addgt	r5, r5, r3
 80066fe:	2600      	movs	r6, #0
 8006700:	341a      	adds	r4, #26
 8006702:	42b5      	cmp	r5, r6
 8006704:	d11a      	bne.n	800673c <_printf_common+0xc8>
 8006706:	2000      	movs	r0, #0
 8006708:	e008      	b.n	800671c <_printf_common+0xa8>
 800670a:	2301      	movs	r3, #1
 800670c:	4652      	mov	r2, sl
 800670e:	4641      	mov	r1, r8
 8006710:	4638      	mov	r0, r7
 8006712:	47c8      	blx	r9
 8006714:	3001      	adds	r0, #1
 8006716:	d103      	bne.n	8006720 <_printf_common+0xac>
 8006718:	f04f 30ff 	mov.w	r0, #4294967295
 800671c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006720:	3501      	adds	r5, #1
 8006722:	e7c6      	b.n	80066b2 <_printf_common+0x3e>
 8006724:	18e1      	adds	r1, r4, r3
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	2030      	movs	r0, #48	@ 0x30
 800672a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800672e:	4422      	add	r2, r4
 8006730:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006734:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006738:	3302      	adds	r3, #2
 800673a:	e7c7      	b.n	80066cc <_printf_common+0x58>
 800673c:	2301      	movs	r3, #1
 800673e:	4622      	mov	r2, r4
 8006740:	4641      	mov	r1, r8
 8006742:	4638      	mov	r0, r7
 8006744:	47c8      	blx	r9
 8006746:	3001      	adds	r0, #1
 8006748:	d0e6      	beq.n	8006718 <_printf_common+0xa4>
 800674a:	3601      	adds	r6, #1
 800674c:	e7d9      	b.n	8006702 <_printf_common+0x8e>
	...

08006750 <_printf_i>:
 8006750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006754:	7e0f      	ldrb	r7, [r1, #24]
 8006756:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006758:	2f78      	cmp	r7, #120	@ 0x78
 800675a:	4691      	mov	r9, r2
 800675c:	4680      	mov	r8, r0
 800675e:	460c      	mov	r4, r1
 8006760:	469a      	mov	sl, r3
 8006762:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006766:	d807      	bhi.n	8006778 <_printf_i+0x28>
 8006768:	2f62      	cmp	r7, #98	@ 0x62
 800676a:	d80a      	bhi.n	8006782 <_printf_i+0x32>
 800676c:	2f00      	cmp	r7, #0
 800676e:	f000 80d2 	beq.w	8006916 <_printf_i+0x1c6>
 8006772:	2f58      	cmp	r7, #88	@ 0x58
 8006774:	f000 80b9 	beq.w	80068ea <_printf_i+0x19a>
 8006778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800677c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006780:	e03a      	b.n	80067f8 <_printf_i+0xa8>
 8006782:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006786:	2b15      	cmp	r3, #21
 8006788:	d8f6      	bhi.n	8006778 <_printf_i+0x28>
 800678a:	a101      	add	r1, pc, #4	@ (adr r1, 8006790 <_printf_i+0x40>)
 800678c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006790:	080067e9 	.word	0x080067e9
 8006794:	080067fd 	.word	0x080067fd
 8006798:	08006779 	.word	0x08006779
 800679c:	08006779 	.word	0x08006779
 80067a0:	08006779 	.word	0x08006779
 80067a4:	08006779 	.word	0x08006779
 80067a8:	080067fd 	.word	0x080067fd
 80067ac:	08006779 	.word	0x08006779
 80067b0:	08006779 	.word	0x08006779
 80067b4:	08006779 	.word	0x08006779
 80067b8:	08006779 	.word	0x08006779
 80067bc:	080068fd 	.word	0x080068fd
 80067c0:	08006827 	.word	0x08006827
 80067c4:	080068b7 	.word	0x080068b7
 80067c8:	08006779 	.word	0x08006779
 80067cc:	08006779 	.word	0x08006779
 80067d0:	0800691f 	.word	0x0800691f
 80067d4:	08006779 	.word	0x08006779
 80067d8:	08006827 	.word	0x08006827
 80067dc:	08006779 	.word	0x08006779
 80067e0:	08006779 	.word	0x08006779
 80067e4:	080068bf 	.word	0x080068bf
 80067e8:	6833      	ldr	r3, [r6, #0]
 80067ea:	1d1a      	adds	r2, r3, #4
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6032      	str	r2, [r6, #0]
 80067f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067f8:	2301      	movs	r3, #1
 80067fa:	e09d      	b.n	8006938 <_printf_i+0x1e8>
 80067fc:	6833      	ldr	r3, [r6, #0]
 80067fe:	6820      	ldr	r0, [r4, #0]
 8006800:	1d19      	adds	r1, r3, #4
 8006802:	6031      	str	r1, [r6, #0]
 8006804:	0606      	lsls	r6, r0, #24
 8006806:	d501      	bpl.n	800680c <_printf_i+0xbc>
 8006808:	681d      	ldr	r5, [r3, #0]
 800680a:	e003      	b.n	8006814 <_printf_i+0xc4>
 800680c:	0645      	lsls	r5, r0, #25
 800680e:	d5fb      	bpl.n	8006808 <_printf_i+0xb8>
 8006810:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006814:	2d00      	cmp	r5, #0
 8006816:	da03      	bge.n	8006820 <_printf_i+0xd0>
 8006818:	232d      	movs	r3, #45	@ 0x2d
 800681a:	426d      	negs	r5, r5
 800681c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006820:	4859      	ldr	r0, [pc, #356]	@ (8006988 <_printf_i+0x238>)
 8006822:	230a      	movs	r3, #10
 8006824:	e011      	b.n	800684a <_printf_i+0xfa>
 8006826:	6821      	ldr	r1, [r4, #0]
 8006828:	6833      	ldr	r3, [r6, #0]
 800682a:	0608      	lsls	r0, r1, #24
 800682c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006830:	d402      	bmi.n	8006838 <_printf_i+0xe8>
 8006832:	0649      	lsls	r1, r1, #25
 8006834:	bf48      	it	mi
 8006836:	b2ad      	uxthmi	r5, r5
 8006838:	2f6f      	cmp	r7, #111	@ 0x6f
 800683a:	4853      	ldr	r0, [pc, #332]	@ (8006988 <_printf_i+0x238>)
 800683c:	6033      	str	r3, [r6, #0]
 800683e:	bf14      	ite	ne
 8006840:	230a      	movne	r3, #10
 8006842:	2308      	moveq	r3, #8
 8006844:	2100      	movs	r1, #0
 8006846:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800684a:	6866      	ldr	r6, [r4, #4]
 800684c:	60a6      	str	r6, [r4, #8]
 800684e:	2e00      	cmp	r6, #0
 8006850:	bfa2      	ittt	ge
 8006852:	6821      	ldrge	r1, [r4, #0]
 8006854:	f021 0104 	bicge.w	r1, r1, #4
 8006858:	6021      	strge	r1, [r4, #0]
 800685a:	b90d      	cbnz	r5, 8006860 <_printf_i+0x110>
 800685c:	2e00      	cmp	r6, #0
 800685e:	d04b      	beq.n	80068f8 <_printf_i+0x1a8>
 8006860:	4616      	mov	r6, r2
 8006862:	fbb5 f1f3 	udiv	r1, r5, r3
 8006866:	fb03 5711 	mls	r7, r3, r1, r5
 800686a:	5dc7      	ldrb	r7, [r0, r7]
 800686c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006870:	462f      	mov	r7, r5
 8006872:	42bb      	cmp	r3, r7
 8006874:	460d      	mov	r5, r1
 8006876:	d9f4      	bls.n	8006862 <_printf_i+0x112>
 8006878:	2b08      	cmp	r3, #8
 800687a:	d10b      	bne.n	8006894 <_printf_i+0x144>
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	07df      	lsls	r7, r3, #31
 8006880:	d508      	bpl.n	8006894 <_printf_i+0x144>
 8006882:	6923      	ldr	r3, [r4, #16]
 8006884:	6861      	ldr	r1, [r4, #4]
 8006886:	4299      	cmp	r1, r3
 8006888:	bfde      	ittt	le
 800688a:	2330      	movle	r3, #48	@ 0x30
 800688c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006890:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006894:	1b92      	subs	r2, r2, r6
 8006896:	6122      	str	r2, [r4, #16]
 8006898:	f8cd a000 	str.w	sl, [sp]
 800689c:	464b      	mov	r3, r9
 800689e:	aa03      	add	r2, sp, #12
 80068a0:	4621      	mov	r1, r4
 80068a2:	4640      	mov	r0, r8
 80068a4:	f7ff fee6 	bl	8006674 <_printf_common>
 80068a8:	3001      	adds	r0, #1
 80068aa:	d14a      	bne.n	8006942 <_printf_i+0x1f2>
 80068ac:	f04f 30ff 	mov.w	r0, #4294967295
 80068b0:	b004      	add	sp, #16
 80068b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	f043 0320 	orr.w	r3, r3, #32
 80068bc:	6023      	str	r3, [r4, #0]
 80068be:	4833      	ldr	r0, [pc, #204]	@ (800698c <_printf_i+0x23c>)
 80068c0:	2778      	movs	r7, #120	@ 0x78
 80068c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	6831      	ldr	r1, [r6, #0]
 80068ca:	061f      	lsls	r7, r3, #24
 80068cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80068d0:	d402      	bmi.n	80068d8 <_printf_i+0x188>
 80068d2:	065f      	lsls	r7, r3, #25
 80068d4:	bf48      	it	mi
 80068d6:	b2ad      	uxthmi	r5, r5
 80068d8:	6031      	str	r1, [r6, #0]
 80068da:	07d9      	lsls	r1, r3, #31
 80068dc:	bf44      	itt	mi
 80068de:	f043 0320 	orrmi.w	r3, r3, #32
 80068e2:	6023      	strmi	r3, [r4, #0]
 80068e4:	b11d      	cbz	r5, 80068ee <_printf_i+0x19e>
 80068e6:	2310      	movs	r3, #16
 80068e8:	e7ac      	b.n	8006844 <_printf_i+0xf4>
 80068ea:	4827      	ldr	r0, [pc, #156]	@ (8006988 <_printf_i+0x238>)
 80068ec:	e7e9      	b.n	80068c2 <_printf_i+0x172>
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	f023 0320 	bic.w	r3, r3, #32
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	e7f6      	b.n	80068e6 <_printf_i+0x196>
 80068f8:	4616      	mov	r6, r2
 80068fa:	e7bd      	b.n	8006878 <_printf_i+0x128>
 80068fc:	6833      	ldr	r3, [r6, #0]
 80068fe:	6825      	ldr	r5, [r4, #0]
 8006900:	6961      	ldr	r1, [r4, #20]
 8006902:	1d18      	adds	r0, r3, #4
 8006904:	6030      	str	r0, [r6, #0]
 8006906:	062e      	lsls	r6, r5, #24
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	d501      	bpl.n	8006910 <_printf_i+0x1c0>
 800690c:	6019      	str	r1, [r3, #0]
 800690e:	e002      	b.n	8006916 <_printf_i+0x1c6>
 8006910:	0668      	lsls	r0, r5, #25
 8006912:	d5fb      	bpl.n	800690c <_printf_i+0x1bc>
 8006914:	8019      	strh	r1, [r3, #0]
 8006916:	2300      	movs	r3, #0
 8006918:	6123      	str	r3, [r4, #16]
 800691a:	4616      	mov	r6, r2
 800691c:	e7bc      	b.n	8006898 <_printf_i+0x148>
 800691e:	6833      	ldr	r3, [r6, #0]
 8006920:	1d1a      	adds	r2, r3, #4
 8006922:	6032      	str	r2, [r6, #0]
 8006924:	681e      	ldr	r6, [r3, #0]
 8006926:	6862      	ldr	r2, [r4, #4]
 8006928:	2100      	movs	r1, #0
 800692a:	4630      	mov	r0, r6
 800692c:	f7f9 fc58 	bl	80001e0 <memchr>
 8006930:	b108      	cbz	r0, 8006936 <_printf_i+0x1e6>
 8006932:	1b80      	subs	r0, r0, r6
 8006934:	6060      	str	r0, [r4, #4]
 8006936:	6863      	ldr	r3, [r4, #4]
 8006938:	6123      	str	r3, [r4, #16]
 800693a:	2300      	movs	r3, #0
 800693c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006940:	e7aa      	b.n	8006898 <_printf_i+0x148>
 8006942:	6923      	ldr	r3, [r4, #16]
 8006944:	4632      	mov	r2, r6
 8006946:	4649      	mov	r1, r9
 8006948:	4640      	mov	r0, r8
 800694a:	47d0      	blx	sl
 800694c:	3001      	adds	r0, #1
 800694e:	d0ad      	beq.n	80068ac <_printf_i+0x15c>
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	079b      	lsls	r3, r3, #30
 8006954:	d413      	bmi.n	800697e <_printf_i+0x22e>
 8006956:	68e0      	ldr	r0, [r4, #12]
 8006958:	9b03      	ldr	r3, [sp, #12]
 800695a:	4298      	cmp	r0, r3
 800695c:	bfb8      	it	lt
 800695e:	4618      	movlt	r0, r3
 8006960:	e7a6      	b.n	80068b0 <_printf_i+0x160>
 8006962:	2301      	movs	r3, #1
 8006964:	4632      	mov	r2, r6
 8006966:	4649      	mov	r1, r9
 8006968:	4640      	mov	r0, r8
 800696a:	47d0      	blx	sl
 800696c:	3001      	adds	r0, #1
 800696e:	d09d      	beq.n	80068ac <_printf_i+0x15c>
 8006970:	3501      	adds	r5, #1
 8006972:	68e3      	ldr	r3, [r4, #12]
 8006974:	9903      	ldr	r1, [sp, #12]
 8006976:	1a5b      	subs	r3, r3, r1
 8006978:	42ab      	cmp	r3, r5
 800697a:	dcf2      	bgt.n	8006962 <_printf_i+0x212>
 800697c:	e7eb      	b.n	8006956 <_printf_i+0x206>
 800697e:	2500      	movs	r5, #0
 8006980:	f104 0619 	add.w	r6, r4, #25
 8006984:	e7f5      	b.n	8006972 <_printf_i+0x222>
 8006986:	bf00      	nop
 8006988:	08006b4d 	.word	0x08006b4d
 800698c:	08006b5e 	.word	0x08006b5e

08006990 <memmove>:
 8006990:	4288      	cmp	r0, r1
 8006992:	b510      	push	{r4, lr}
 8006994:	eb01 0402 	add.w	r4, r1, r2
 8006998:	d902      	bls.n	80069a0 <memmove+0x10>
 800699a:	4284      	cmp	r4, r0
 800699c:	4623      	mov	r3, r4
 800699e:	d807      	bhi.n	80069b0 <memmove+0x20>
 80069a0:	1e43      	subs	r3, r0, #1
 80069a2:	42a1      	cmp	r1, r4
 80069a4:	d008      	beq.n	80069b8 <memmove+0x28>
 80069a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069ae:	e7f8      	b.n	80069a2 <memmove+0x12>
 80069b0:	4402      	add	r2, r0
 80069b2:	4601      	mov	r1, r0
 80069b4:	428a      	cmp	r2, r1
 80069b6:	d100      	bne.n	80069ba <memmove+0x2a>
 80069b8:	bd10      	pop	{r4, pc}
 80069ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069c2:	e7f7      	b.n	80069b4 <memmove+0x24>

080069c4 <_sbrk_r>:
 80069c4:	b538      	push	{r3, r4, r5, lr}
 80069c6:	4d06      	ldr	r5, [pc, #24]	@ (80069e0 <_sbrk_r+0x1c>)
 80069c8:	2300      	movs	r3, #0
 80069ca:	4604      	mov	r4, r0
 80069cc:	4608      	mov	r0, r1
 80069ce:	602b      	str	r3, [r5, #0]
 80069d0:	f7fa ff3e 	bl	8001850 <_sbrk>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	d102      	bne.n	80069de <_sbrk_r+0x1a>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	b103      	cbz	r3, 80069de <_sbrk_r+0x1a>
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	bd38      	pop	{r3, r4, r5, pc}
 80069e0:	2000471c 	.word	0x2000471c

080069e4 <_realloc_r>:
 80069e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e8:	4680      	mov	r8, r0
 80069ea:	4615      	mov	r5, r2
 80069ec:	460c      	mov	r4, r1
 80069ee:	b921      	cbnz	r1, 80069fa <_realloc_r+0x16>
 80069f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069f4:	4611      	mov	r1, r2
 80069f6:	f7ff bc59 	b.w	80062ac <_malloc_r>
 80069fa:	b92a      	cbnz	r2, 8006a08 <_realloc_r+0x24>
 80069fc:	f7ff fbea 	bl	80061d4 <_free_r>
 8006a00:	2400      	movs	r4, #0
 8006a02:	4620      	mov	r0, r4
 8006a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a08:	f000 f81a 	bl	8006a40 <_malloc_usable_size_r>
 8006a0c:	4285      	cmp	r5, r0
 8006a0e:	4606      	mov	r6, r0
 8006a10:	d802      	bhi.n	8006a18 <_realloc_r+0x34>
 8006a12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006a16:	d8f4      	bhi.n	8006a02 <_realloc_r+0x1e>
 8006a18:	4629      	mov	r1, r5
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	f7ff fc46 	bl	80062ac <_malloc_r>
 8006a20:	4607      	mov	r7, r0
 8006a22:	2800      	cmp	r0, #0
 8006a24:	d0ec      	beq.n	8006a00 <_realloc_r+0x1c>
 8006a26:	42b5      	cmp	r5, r6
 8006a28:	462a      	mov	r2, r5
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	bf28      	it	cs
 8006a2e:	4632      	movcs	r2, r6
 8006a30:	f7ff fbc2 	bl	80061b8 <memcpy>
 8006a34:	4621      	mov	r1, r4
 8006a36:	4640      	mov	r0, r8
 8006a38:	f7ff fbcc 	bl	80061d4 <_free_r>
 8006a3c:	463c      	mov	r4, r7
 8006a3e:	e7e0      	b.n	8006a02 <_realloc_r+0x1e>

08006a40 <_malloc_usable_size_r>:
 8006a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a44:	1f18      	subs	r0, r3, #4
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	bfbc      	itt	lt
 8006a4a:	580b      	ldrlt	r3, [r1, r0]
 8006a4c:	18c0      	addlt	r0, r0, r3
 8006a4e:	4770      	bx	lr

08006a50 <_init>:
 8006a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a52:	bf00      	nop
 8006a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a56:	bc08      	pop	{r3}
 8006a58:	469e      	mov	lr, r3
 8006a5a:	4770      	bx	lr

08006a5c <_fini>:
 8006a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5e:	bf00      	nop
 8006a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a62:	bc08      	pop	{r3}
 8006a64:	469e      	mov	lr, r3
 8006a66:	4770      	bx	lr
