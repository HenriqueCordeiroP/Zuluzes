
Zuluzes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006908  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08006a98  08006a98  00007a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bb0  08006bb0  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006bb0  08006bb0  00007bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bb8  08006bb8  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bb8  08006bb8  00007bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006bbc  08006bbc  00007bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006bc0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046cc  20000060  08006c20  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000472c  08006c20  0000872c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169f9  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000302d  00000000  00000000  0001ea89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  00021ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f1c  00000000  00000000  00022e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283c2  00000000  00000000  00023d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166cc  00000000  00000000  0004c106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fadc6  00000000  00000000  000627d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d598  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005724  00000000  00000000  0015d5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00162d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a80 	.word	0x08006a80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006a80 	.word	0x08006a80

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4a07      	ldr	r2, [pc, #28]	@ (8000d78 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	4a06      	ldr	r2, [pc, #24]	@ (8000d7c <vApplicationGetIdleTaskMemory+0x30>)
 8000d62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2280      	movs	r2, #128	@ 0x80
 8000d68:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	2000007c 	.word	0x2000007c
 8000d7c:	2000011c 	.word	0x2000011c

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b5b0      	push	{r4, r5, r7, lr}
 8000d82:	b08a      	sub	sp, #40	@ 0x28
 8000d84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d86:	f000 fdf1 	bl	800196c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8a:	f000 f84f 	bl	8000e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8e:	f000 f91d 	bl	8000fcc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d92:	f000 f8eb 	bl	8000f6c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d96:	f000 f89b 	bl	8000ed0 <MX_TIM2_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  HAL_TIM_Base_Start(&htim2);
 8000d9a:	481b      	ldr	r0, [pc, #108]	@ (8000e08 <main+0x88>)
 8000d9c:	f002 fc8c 	bl	80036b8 <HAL_TIM_Base_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000da0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <main+0x8c>)
 8000da2:	1d3c      	adds	r4, r7, #4
 8000da4:	461d      	mov	r5, r3
 8000da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000daa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f003 fefe 	bl	8004bb8 <osThreadCreate>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4a14      	ldr	r2, [pc, #80]	@ (8000e10 <main+0x90>)
 8000dc0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

	  xTaskCreate(PushupCounterTask,
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	9301      	str	r3, [sp, #4]
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	2280      	movs	r2, #128	@ 0x80
 8000dce:	4911      	ldr	r1, [pc, #68]	@ (8000e14 <main+0x94>)
 8000dd0:	4811      	ldr	r0, [pc, #68]	@ (8000e18 <main+0x98>)
 8000dd2:	f004 f865 	bl	8004ea0 <xTaskCreate>
	  configMINIMAL_STACK_SIZE,
	  NULL,
	  1,
	  NULL);

	  xTaskCreate(AreButtonsPressedTask,
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	9301      	str	r3, [sp, #4]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	2300      	movs	r3, #0
 8000de0:	2280      	movs	r2, #128	@ 0x80
 8000de2:	490e      	ldr	r1, [pc, #56]	@ (8000e1c <main+0x9c>)
 8000de4:	480e      	ldr	r0, [pc, #56]	@ (8000e20 <main+0xa0>)
 8000de6:	f004 f85b 	bl	8004ea0 <xTaskCreate>
	  configMINIMAL_STACK_SIZE,
	  NULL,
	  tskIDLE_PRIORITY,
	  NULL);

	  xTaskCreate(LedCounterTask,
 8000dea:	2300      	movs	r3, #0
 8000dec:	9301      	str	r3, [sp, #4]
 8000dee:	2300      	movs	r3, #0
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2300      	movs	r3, #0
 8000df4:	2280      	movs	r2, #128	@ 0x80
 8000df6:	490b      	ldr	r1, [pc, #44]	@ (8000e24 <main+0xa4>)
 8000df8:	480b      	ldr	r0, [pc, #44]	@ (8000e28 <main+0xa8>)
 8000dfa:	f004 f851 	bl	8004ea0 <xTaskCreate>
	  NULL);

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000dfe:	f003 fed4 	bl	8004baa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e02:	bf00      	nop
 8000e04:	e7fd      	b.n	8000e02 <main+0x82>
 8000e06:	bf00      	nop
 8000e08:	2000031c 	.word	0x2000031c
 8000e0c:	08006ae0 	.word	0x08006ae0
 8000e10:	200003f0 	.word	0x200003f0
 8000e14:	08006a98 	.word	0x08006a98
 8000e18:	08001151 	.word	0x08001151
 8000e1c:	08006aac 	.word	0x08006aac
 8000e20:	080010fd 	.word	0x080010fd
 8000e24:	08006ac4 	.word	0x08006ac4
 8000e28:	0800159d 	.word	0x0800159d

08000e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b096      	sub	sp, #88	@ 0x58
 8000e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	2244      	movs	r2, #68	@ 0x44
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f005 f94a 	bl	80060d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	463b      	mov	r3, r7
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e4e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e52:	f001 f895 	bl	8001f80 <HAL_PWREx_ControlVoltageScaling>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e5c:	f000 fbd8 	bl	8001610 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e60:	2302      	movs	r3, #2
 8000e62:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e72:	2302      	movs	r3, #2
 8000e74:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000e7a:	2309      	movs	r3, #9
 8000e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e7e:	2307      	movs	r3, #7
 8000e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e82:	2302      	movs	r3, #2
 8000e84:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e86:	2302      	movs	r3, #2
 8000e88:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 f8cc 	bl	800202c <HAL_RCC_OscConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e9a:	f000 fbb9 	bl	8001610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9e:	230f      	movs	r3, #15
 8000ea0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 fc94 	bl	80027e4 <HAL_RCC_ClockConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ec2:	f000 fba5 	bl	8001610 <Error_Handler>
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	3758      	adds	r7, #88	@ 0x58
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed6:	f107 0310 	add.w	r3, r7, #16
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eee:	4b1e      	ldr	r3, [pc, #120]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000ef0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ef4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000ef8:	2247      	movs	r2, #71	@ 0x47
 8000efa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f02:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0a:	4b17      	ldr	r3, [pc, #92]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f16:	4814      	ldr	r0, [pc, #80]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f18:	f002 fb76 	bl	8003608 <HAL_TIM_Base_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f22:	f000 fb75 	bl	8001610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4619      	mov	r1, r3
 8000f32:	480d      	ldr	r0, [pc, #52]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f34:	f002 fd9f 	bl	8003a76 <HAL_TIM_ConfigClockSource>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f3e:	f000 fb67 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4806      	ldr	r0, [pc, #24]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f50:	f002 ffc2 	bl	8003ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f5a:	f000 fb59 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	3720      	adds	r7, #32
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2000031c 	.word	0x2000031c

08000f6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f70:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f72:	4a15      	ldr	r2, [pc, #84]	@ (8000fc8 <MX_USART2_UART_Init+0x5c>)
 8000f74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f76:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000fb0:	f003 f838 	bl	8004024 <HAL_UART_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fba:	f000 fb29 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000368 	.word	0x20000368
 8000fc8:	40004400 	.word	0x40004400

08000fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	@ 0x28
 8000fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	4b43      	ldr	r3, [pc, #268]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe6:	4a42      	ldr	r2, [pc, #264]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fee:	4b40      	ldr	r3, [pc, #256]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffa:	4b3d      	ldr	r3, [pc, #244]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	4a3c      	ldr	r2, [pc, #240]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8001000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001006:	4b3a      	ldr	r3, [pc, #232]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4b37      	ldr	r3, [pc, #220]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	4a36      	ldr	r2, [pc, #216]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101e:	4b34      	ldr	r3, [pc, #208]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	4b31      	ldr	r3, [pc, #196]	@ (80010f0 <MX_GPIO_Init+0x124>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	4a30      	ldr	r2, [pc, #192]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001036:	4b2e      	ldr	r3, [pc, #184]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104c:	f000 ff72 	bl	8001f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2160      	movs	r1, #96	@ 0x60
 8001054:	4827      	ldr	r0, [pc, #156]	@ (80010f4 <MX_GPIO_Init+0x128>)
 8001056:	f000 ff6d 	bl	8001f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800105a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800105e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001060:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	4821      	ldr	r0, [pc, #132]	@ (80010f8 <MX_GPIO_Init+0x12c>)
 8001072:	f000 fd9d 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8001076:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107c:	2301      	movs	r3, #1
 800107e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001092:	f000 fd8d 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001096:	2380      	movs	r3, #128	@ 0x80
 8001098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	4813      	ldr	r0, [pc, #76]	@ (80010f8 <MX_GPIO_Init+0x12c>)
 80010aa:	f000 fd81 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c6:	f000 fd73 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80010ca:	2360      	movs	r3, #96	@ 0x60
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <MX_GPIO_Init+0x128>)
 80010e2:	f000 fd65 	bl	8001bb0 <HAL_GPIO_Init>
/* USER CODE BEGIN MX_GPIO_Init_2 */
  /*
   * ON IOC CHANGE, UPDATE THE PA8 AND PA9 PINS TO GPIO_PULLUP
   */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010e6:	bf00      	nop
 80010e8:	3728      	adds	r7, #40	@ 0x28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40021000 	.word	0x40021000
 80010f4:	48000400 	.word	0x48000400
 80010f8:	48000800 	.word	0x48000800

080010fc <AreButtonsPressedTask>:
/* USER CODE BEGIN 4 */
	/*
	 * TODO use led to display counter (customizable)
	 * */

void AreButtonsPressedTask(void *argument){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	// PA8 - D7 - Button 1
	// PA9 - D8 - Button 2
	const uint16_t BUTTON_1_PIN = GPIO_PIN_8;
 8001104:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001108:	82fb      	strh	r3, [r7, #22]
	GPIO_TypeDef* BUTTON_1_PORT = GPIOA;
 800110a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800110e:	613b      	str	r3, [r7, #16]

	const uint16_t BUTTON_2_PIN = GPIO_PIN_9;
 8001110:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001114:	81fb      	strh	r3, [r7, #14]
	GPIO_TypeDef* BUTTON_2_PORT = GPIOA;
 8001116:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800111a:	60bb      	str	r3, [r7, #8]

	for(;;){
		if(HAL_GPIO_ReadPin(BUTTON_1_PORT, BUTTON_1_PIN) == GPIO_PIN_RESET  || HAL_GPIO_ReadPin(BUTTON_2_PORT, BUTTON_2_PIN) == GPIO_PIN_RESET){
 800111c:	8afb      	ldrh	r3, [r7, #22]
 800111e:	4619      	mov	r1, r3
 8001120:	6938      	ldr	r0, [r7, #16]
 8001122:	f000 feef 	bl	8001f04 <HAL_GPIO_ReadPin>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d007      	beq.n	800113c <AreButtonsPressedTask+0x40>
 800112c:	89fb      	ldrh	r3, [r7, #14]
 800112e:	4619      	mov	r1, r3
 8001130:	68b8      	ldr	r0, [r7, #8]
 8001132:	f000 fee7 	bl	8001f04 <HAL_GPIO_ReadPin>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d103      	bne.n	8001144 <AreButtonsPressedTask+0x48>
			isButtonsPressed = 1;
 800113c:	4b03      	ldr	r3, [pc, #12]	@ (800114c <AreButtonsPressedTask+0x50>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
 8001142:	e002      	b.n	800114a <AreButtonsPressedTask+0x4e>
		} else {
			isButtonsPressed = 0;
 8001144:	4b01      	ldr	r3, [pc, #4]	@ (800114c <AreButtonsPressedTask+0x50>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(BUTTON_1_PORT, BUTTON_1_PIN) == GPIO_PIN_RESET  || HAL_GPIO_ReadPin(BUTTON_2_PORT, BUTTON_2_PIN) == GPIO_PIN_RESET){
 800114a:	e7e7      	b.n	800111c <AreButtonsPressedTask+0x20>
 800114c:	20000438 	.word	0x20000438

08001150 <PushupCounterTask>:
#define TRIG_PIN GPIO_PIN_6
#define TRIG_PORT GPIOB
#define ECHO_PIN GPIO_PIN_7
#define ECHO_PORT GPIOC
void PushupCounterTask(void *argument)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
        uint8_t downOk = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]
	for(;;)
    {

        Trigger_Ultrasonic();
 800115c:	f000 f850 	bl	8001200 <Trigger_Ultrasonic>

        uint32_t distance = Get_Distance();
 8001160:	f000 f862 	bl	8001228 <Get_Distance>
 8001164:	60b8      	str	r0, [r7, #8]
        if(isButtonsPressed){
 8001166:	4b21      	ldr	r3, [pc, #132]	@ (80011ec <PushupCounterTask+0x9c>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d024      	beq.n	80011b8 <PushupCounterTask+0x68>
        	if(pushupCounter < TARGET){
 800116e:	4b20      	ldr	r3, [pc, #128]	@ (80011f0 <PushupCounterTask+0xa0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d116      	bne.n	80011a4 <PushupCounterTask+0x54>
        		if(distance <= PUSHUP_DOWN_DISTANCE_CM && !downOk ){
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2b0a      	cmp	r3, #10
 800117a:	d805      	bhi.n	8001188 <PushupCounterTask+0x38>
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d102      	bne.n	8001188 <PushupCounterTask+0x38>
        			downOk = 1;
 8001182:	2301      	movs	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	e01a      	b.n	80011be <PushupCounterTask+0x6e>
        		}
        		else if(distance >= PUSHUP_UP_DISTANCE_CM && downOk){
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2b1d      	cmp	r3, #29
 800118c:	d917      	bls.n	80011be <PushupCounterTask+0x6e>
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d014      	beq.n	80011be <PushupCounterTask+0x6e>
        			pushupCounter++;
 8001194:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <PushupCounterTask+0xa0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	4a15      	ldr	r2, [pc, #84]	@ (80011f0 <PushupCounterTask+0xa0>)
 800119c:	6013      	str	r3, [r2, #0]
        			downOk = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	e00c      	b.n	80011be <PushupCounterTask+0x6e>
        		}
        	} else {
        		handleWin();
 80011a4:	f000 f896 	bl	80012d4 <handleWin>
        		pushupCounter = 0;
 80011a8:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <PushupCounterTask+0xa0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
        		osDelay(500);
 80011ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011b2:	f003 fd4d 	bl	8004c50 <osDelay>
 80011b6:	e002      	b.n	80011be <PushupCounterTask+0x6e>
        	}
        } else {
        	pushupCounter = 0;
 80011b8:	4b0d      	ldr	r3, [pc, #52]	@ (80011f0 <PushupCounterTask+0xa0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
        }

        sprintf(ultraBuffer, "Counter: %lu Distance: %lu\r\n", pushupCounter, distance);
 80011be:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <PushupCounterTask+0xa0>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	490b      	ldr	r1, [pc, #44]	@ (80011f4 <PushupCounterTask+0xa4>)
 80011c6:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <PushupCounterTask+0xa8>)
 80011c8:	f004 ff64 	bl	8006094 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)ultraBuffer, strlen(ultraBuffer), HAL_MAX_DELAY);
 80011cc:	480a      	ldr	r0, [pc, #40]	@ (80011f8 <PushupCounterTask+0xa8>)
 80011ce:	f7fe ffff 	bl	80001d0 <strlen>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	4907      	ldr	r1, [pc, #28]	@ (80011f8 <PushupCounterTask+0xa8>)
 80011dc:	4807      	ldr	r0, [pc, #28]	@ (80011fc <PushupCounterTask+0xac>)
 80011de:	f002 ff6f 	bl	80040c0 <HAL_UART_Transmit>
        osDelay(500);
 80011e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011e6:	f003 fd33 	bl	8004c50 <osDelay>
    {
 80011ea:	e7b7      	b.n	800115c <PushupCounterTask+0xc>
 80011ec:	20000438 	.word	0x20000438
 80011f0:	20000434 	.word	0x20000434
 80011f4:	08006afc 	.word	0x08006afc
 80011f8:	20000400 	.word	0x20000400
 80011fc:	20000368 	.word	0x20000368

08001200 <Trigger_Ultrasonic>:
    }
}

void Trigger_Ultrasonic(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	// PC7 - D9 - Ultrasonic ECHO
	// PB6 - D10 - Ultrasonic Trigger

    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	2140      	movs	r1, #64	@ 0x40
 8001208:	4806      	ldr	r0, [pc, #24]	@ (8001224 <Trigger_Ultrasonic+0x24>)
 800120a:	f000 fe93 	bl	8001f34 <HAL_GPIO_WritePin>
    osDelay(1);
 800120e:	2001      	movs	r0, #1
 8001210:	f003 fd1e 	bl	8004c50 <osDelay>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	2140      	movs	r1, #64	@ 0x40
 8001218:	4802      	ldr	r0, [pc, #8]	@ (8001224 <Trigger_Ultrasonic+0x24>)
 800121a:	f000 fe8b 	bl	8001f34 <HAL_GPIO_WritePin>
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	48000400 	.word	0x48000400

08001228 <Get_Distance>:

uint32_t Get_Distance(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET);
 800122e:	bf00      	nop
 8001230:	2180      	movs	r1, #128	@ 0x80
 8001232:	4823      	ldr	r0, [pc, #140]	@ (80012c0 <Get_Distance+0x98>)
 8001234:	f000 fe66 	bl	8001f04 <HAL_GPIO_ReadPin>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0f8      	beq.n	8001230 <Get_Distance+0x8>

    echoStart = __HAL_TIM_GET_COUNTER(&htim2);
 800123e:	4b21      	ldr	r3, [pc, #132]	@ (80012c4 <Get_Distance+0x9c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001244:	4a20      	ldr	r2, [pc, #128]	@ (80012c8 <Get_Distance+0xa0>)
 8001246:	6013      	str	r3, [r2, #0]

    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET);
 8001248:	bf00      	nop
 800124a:	2180      	movs	r1, #128	@ 0x80
 800124c:	481c      	ldr	r0, [pc, #112]	@ (80012c0 <Get_Distance+0x98>)
 800124e:	f000 fe59 	bl	8001f04 <HAL_GPIO_ReadPin>
 8001252:	4603      	mov	r3, r0
 8001254:	2b01      	cmp	r3, #1
 8001256:	d0f8      	beq.n	800124a <Get_Distance+0x22>

    echoEnd = __HAL_TIM_GET_COUNTER(&htim2);
 8001258:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <Get_Distance+0x9c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125e:	4a1b      	ldr	r2, [pc, #108]	@ (80012cc <Get_Distance+0xa4>)
 8001260:	6013      	str	r3, [r2, #0]

    echoDuration = echoEnd - echoStart;
 8001262:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <Get_Distance+0xa4>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <Get_Distance+0xa0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	4a18      	ldr	r2, [pc, #96]	@ (80012d0 <Get_Distance+0xa8>)
 800126e:	6013      	str	r3, [r2, #0]

    uint32_t distance = (echoDuration * 0.0343) / 2;
 8001270:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <Get_Distance+0xa8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f945 	bl	8000504 <__aeabi_ui2d>
 800127a:	a30f      	add	r3, pc, #60	@ (adr r3, 80012b8 <Get_Distance+0x90>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	f7ff f9ba 	bl	80005f8 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001294:	f7ff fada 	bl	800084c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff fbbc 	bl	8000a1c <__aeabi_d2uiz>
 80012a4:	4603      	mov	r3, r0
 80012a6:	607b      	str	r3, [r7, #4]

    return distance;
 80012a8:	687b      	ldr	r3, [r7, #4]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	f3af 8000 	nop.w
 80012b8:	04816f00 	.word	0x04816f00
 80012bc:	3fa18fc5 	.word	0x3fa18fc5
 80012c0:	48000800 	.word	0x48000800
 80012c4:	2000031c 	.word	0x2000031c
 80012c8:	200003f4 	.word	0x200003f4
 80012cc:	200003f8 	.word	0x200003f8
 80012d0:	200003fc 	.word	0x200003fc

080012d4 <handleWin>:


void handleWin(void){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	sprintf(ultraBuffer, "WIN WIN WIN\r\n");
 80012d8:	498e      	ldr	r1, [pc, #568]	@ (8001514 <handleWin+0x240>)
 80012da:	488f      	ldr	r0, [pc, #572]	@ (8001518 <handleWin+0x244>)
 80012dc:	f004 feda 	bl	8006094 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)ultraBuffer, strlen(ultraBuffer), HAL_MAX_DELAY);
 80012e0:	488d      	ldr	r0, [pc, #564]	@ (8001518 <handleWin+0x244>)
 80012e2:	f7fe ff75 	bl	80001d0 <strlen>
 80012e6:	4603      	mov	r3, r0
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	498a      	ldr	r1, [pc, #552]	@ (8001518 <handleWin+0x244>)
 80012f0:	488a      	ldr	r0, [pc, #552]	@ (800151c <handleWin+0x248>)
 80012f2:	f002 fee5 	bl	80040c0 <HAL_UART_Transmit>

	// caza
	playSound(300, 200);
 80012f6:	21c8      	movs	r1, #200	@ 0xc8
 80012f8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80012fc:	f000 f910 	bl	8001520 <playSound>
	osDelay(20);
 8001300:	2014      	movs	r0, #20
 8001302:	f003 fca5 	bl	8004c50 <osDelay>

	playSound(300, 200);
 8001306:	21c8      	movs	r1, #200	@ 0xc8
 8001308:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800130c:	f000 f908 	bl	8001520 <playSound>
	osDelay(20);
 8001310:	2014      	movs	r0, #20
 8001312:	f003 fc9d 	bl	8004c50 <osDelay>

	osDelay(220);
 8001316:	20dc      	movs	r0, #220	@ 0xdc
 8001318:	f003 fc9a 	bl	8004c50 <osDelay>

	// caza
	playSound(300, 200);
 800131c:	21c8      	movs	r1, #200	@ 0xc8
 800131e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001322:	f000 f8fd 	bl	8001520 <playSound>
	osDelay(20);
 8001326:	2014      	movs	r0, #20
 8001328:	f003 fc92 	bl	8004c50 <osDelay>

	playSound(300, 200);
 800132c:	21c8      	movs	r1, #200	@ 0xc8
 800132e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001332:	f000 f8f5 	bl	8001520 <playSound>
	osDelay(20);
 8001336:	2014      	movs	r0, #20
 8001338:	f003 fc8a 	bl	8004c50 <osDelay>

	osDelay(220);
 800133c:	20dc      	movs	r0, #220	@ 0xdc
 800133e:	f003 fc87 	bl	8004c50 <osDelay>

	// caza caza caza
	playSound(300, 200);
 8001342:	21c8      	movs	r1, #200	@ 0xc8
 8001344:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001348:	f000 f8ea 	bl	8001520 <playSound>
	osDelay(20);
 800134c:	2014      	movs	r0, #20
 800134e:	f003 fc7f 	bl	8004c50 <osDelay>

	playSound(300, 200);
 8001352:	21c8      	movs	r1, #200	@ 0xc8
 8001354:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001358:	f000 f8e2 	bl	8001520 <playSound>
	osDelay(20);
 800135c:	2014      	movs	r0, #20
 800135e:	f003 fc77 	bl	8004c50 <osDelay>

	playSound(300, 200);
 8001362:	21c8      	movs	r1, #200	@ 0xc8
 8001364:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001368:	f000 f8da 	bl	8001520 <playSound>
	osDelay(20);
 800136c:	2014      	movs	r0, #20
 800136e:	f003 fc6f 	bl	8004c50 <osDelay>

	playSound(300, 200);
 8001372:	21c8      	movs	r1, #200	@ 0xc8
 8001374:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001378:	f000 f8d2 	bl	8001520 <playSound>
	osDelay(20);
 800137c:	2014      	movs	r0, #20
 800137e:	f003 fc67 	bl	8004c50 <osDelay>

	playSound(300, 200);
 8001382:	21c8      	movs	r1, #200	@ 0xc8
 8001384:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001388:	f000 f8ca 	bl	8001520 <playSound>
	osDelay(20);
 800138c:	2014      	movs	r0, #20
 800138e:	f003 fc5f 	bl	8004c50 <osDelay>

	playSound(300, 200);
 8001392:	21c8      	movs	r1, #200	@ 0xc8
 8001394:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001398:	f000 f8c2 	bl	8001520 <playSound>
	osDelay(20);
 800139c:	2014      	movs	r0, #20
 800139e:	f003 fc57 	bl	8004c50 <osDelay>

	playSound(300, 200);
 80013a2:	21c8      	movs	r1, #200	@ 0xc8
 80013a4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013a8:	f000 f8ba 	bl	8001520 <playSound>
	osDelay(20);
 80013ac:	2014      	movs	r0, #20
 80013ae:	f003 fc4f 	bl	8004c50 <osDelay>

	osDelay(220);
 80013b2:	20dc      	movs	r0, #220	@ 0xdc
 80013b4:	f003 fc4c 	bl	8004c50 <osDelay>

	// a turma é mesmo boa
	playSound(300, 200);
 80013b8:	21c8      	movs	r1, #200	@ 0xc8
 80013ba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013be:	f000 f8af 	bl	8001520 <playSound>
	osDelay(20);
 80013c2:	2014      	movs	r0, #20
 80013c4:	f003 fc44 	bl	8004c50 <osDelay>

	playSound(300, 200);
 80013c8:	21c8      	movs	r1, #200	@ 0xc8
 80013ca:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013ce:	f000 f8a7 	bl	8001520 <playSound>
	osDelay(20);
 80013d2:	2014      	movs	r0, #20
 80013d4:	f003 fc3c 	bl	8004c50 <osDelay>

	playSound(300, 200);
 80013d8:	21c8      	movs	r1, #200	@ 0xc8
 80013da:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013de:	f000 f89f 	bl	8001520 <playSound>
	osDelay(20);
 80013e2:	2014      	movs	r0, #20
 80013e4:	f003 fc34 	bl	8004c50 <osDelay>

	playSound(300, 200);
 80013e8:	21c8      	movs	r1, #200	@ 0xc8
 80013ea:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013ee:	f000 f897 	bl	8001520 <playSound>
	osDelay(20);
 80013f2:	2014      	movs	r0, #20
 80013f4:	f003 fc2c 	bl	8004c50 <osDelay>

	playSound(300, 200);
 80013f8:	21c8      	movs	r1, #200	@ 0xc8
 80013fa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013fe:	f000 f88f 	bl	8001520 <playSound>
	osDelay(20);
 8001402:	2014      	movs	r0, #20
 8001404:	f003 fc24 	bl	8004c50 <osDelay>

	playSound(300, 200);
 8001408:	21c8      	movs	r1, #200	@ 0xc8
 800140a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800140e:	f000 f887 	bl	8001520 <playSound>
	osDelay(20);
 8001412:	2014      	movs	r0, #20
 8001414:	f003 fc1c 	bl	8004c50 <osDelay>

	playSound(300, 200);
 8001418:	21c8      	movs	r1, #200	@ 0xc8
 800141a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800141e:	f000 f87f 	bl	8001520 <playSound>
	osDelay(20);
 8001422:	2014      	movs	r0, #20
 8001424:	f003 fc14 	bl	8004c50 <osDelay>


	osDelay(220);
 8001428:	20dc      	movs	r0, #220	@ 0xdc
 800142a:	f003 fc11 	bl	8004c50 <osDelay>

	// é mesmo da fuzaca
	playSound(300, 200);
 800142e:	21c8      	movs	r1, #200	@ 0xc8
 8001430:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001434:	f000 f874 	bl	8001520 <playSound>
	osDelay(20);
 8001438:	2014      	movs	r0, #20
 800143a:	f003 fc09 	bl	8004c50 <osDelay>

	playSound(300, 200);
 800143e:	21c8      	movs	r1, #200	@ 0xc8
 8001440:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001444:	f000 f86c 	bl	8001520 <playSound>
	osDelay(20);
 8001448:	2014      	movs	r0, #20
 800144a:	f003 fc01 	bl	8004c50 <osDelay>

	playSound(300, 200);
 800144e:	21c8      	movs	r1, #200	@ 0xc8
 8001450:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001454:	f000 f864 	bl	8001520 <playSound>
	osDelay(20);
 8001458:	2014      	movs	r0, #20
 800145a:	f003 fbf9 	bl	8004c50 <osDelay>

	playSound(300, 200);
 800145e:	21c8      	movs	r1, #200	@ 0xc8
 8001460:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001464:	f000 f85c 	bl	8001520 <playSound>
	osDelay(20);
 8001468:	2014      	movs	r0, #20
 800146a:	f003 fbf1 	bl	8004c50 <osDelay>

	playSound(300, 200);
 800146e:	21c8      	movs	r1, #200	@ 0xc8
 8001470:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001474:	f000 f854 	bl	8001520 <playSound>
	osDelay(20);
 8001478:	2014      	movs	r0, #20
 800147a:	f003 fbe9 	bl	8004c50 <osDelay>

	playSound(300, 200);
 800147e:	21c8      	movs	r1, #200	@ 0xc8
 8001480:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001484:	f000 f84c 	bl	8001520 <playSound>
	osDelay(20);
 8001488:	2014      	movs	r0, #20
 800148a:	f003 fbe1 	bl	8004c50 <osDelay>

	playSound(300, 200);
 800148e:	21c8      	movs	r1, #200	@ 0xc8
 8001490:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001494:	f000 f844 	bl	8001520 <playSound>
	osDelay(20);
 8001498:	2014      	movs	r0, #20
 800149a:	f003 fbd9 	bl	8004c50 <osDelay>

	osDelay(220);
 800149e:	20dc      	movs	r0, #220	@ 0xdc
 80014a0:	f003 fbd6 	bl	8004c50 <osDelay>

	// sport
	playSound(300, 200);
 80014a4:	21c8      	movs	r1, #200	@ 0xc8
 80014a6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014aa:	f000 f839 	bl	8001520 <playSound>
	osDelay(20);
 80014ae:	2014      	movs	r0, #20
 80014b0:	f003 fbce 	bl	8004c50 <osDelay>

	playSound(300, 200);
 80014b4:	21c8      	movs	r1, #200	@ 0xc8
 80014b6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014ba:	f000 f831 	bl	8001520 <playSound>
	osDelay(20);
 80014be:	2014      	movs	r0, #20
 80014c0:	f003 fbc6 	bl	8004c50 <osDelay>

	osDelay(220);
 80014c4:	20dc      	movs	r0, #220	@ 0xdc
 80014c6:	f003 fbc3 	bl	8004c50 <osDelay>

	// sport
	playSound(300, 200);
 80014ca:	21c8      	movs	r1, #200	@ 0xc8
 80014cc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014d0:	f000 f826 	bl	8001520 <playSound>
	osDelay(20);
 80014d4:	2014      	movs	r0, #20
 80014d6:	f003 fbbb 	bl	8004c50 <osDelay>

	playSound(300, 200);
 80014da:	21c8      	movs	r1, #200	@ 0xc8
 80014dc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014e0:	f000 f81e 	bl	8001520 <playSound>
	osDelay(20);
 80014e4:	2014      	movs	r0, #20
 80014e6:	f003 fbb3 	bl	8004c50 <osDelay>

	osDelay(220);
 80014ea:	20dc      	movs	r0, #220	@ 0xdc
 80014ec:	f003 fbb0 	bl	8004c50 <osDelay>

	// sport
	playSound(300, 200);
 80014f0:	21c8      	movs	r1, #200	@ 0xc8
 80014f2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014f6:	f000 f813 	bl	8001520 <playSound>
	osDelay(20);
 80014fa:	2014      	movs	r0, #20
 80014fc:	f003 fba8 	bl	8004c50 <osDelay>

	playSound(300, 200);
 8001500:	21c8      	movs	r1, #200	@ 0xc8
 8001502:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001506:	f000 f80b 	bl	8001520 <playSound>
	osDelay(20);
 800150a:	2014      	movs	r0, #20
 800150c:	f003 fba0 	bl	8004c50 <osDelay>
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	08006b1c 	.word	0x08006b1c
 8001518:	20000400 	.word	0x20000400
 800151c:	20000368 	.word	0x20000368

08001520 <playSound>:

void playSound(uint32_t frequency, uint32_t duration_ms){
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
	uint32_t period_us = 1000000 / frequency;
 800152a:	4a19      	ldr	r2, [pc, #100]	@ (8001590 <playSound+0x70>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
	uint32_t half_period_us = period_us / 2;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	085b      	lsrs	r3, r3, #1
 8001538:	613b      	str	r3, [r7, #16]

	uint32_t startTick = HAL_GetTick();
 800153a:	f000 fa4b 	bl	80019d4 <HAL_GetTick>
 800153e:	60f8      	str	r0, [r7, #12]

	while ((HAL_GetTick() - startTick) < duration_ms)
 8001540:	e019      	b.n	8001576 <playSound+0x56>
	{
		HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 8001542:	2201      	movs	r2, #1
 8001544:	2120      	movs	r1, #32
 8001546:	4813      	ldr	r0, [pc, #76]	@ (8001594 <playSound+0x74>)
 8001548:	f000 fcf4 	bl	8001f34 <HAL_GPIO_WritePin>
		osDelay(half_period_us / 1000);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4a12      	ldr	r2, [pc, #72]	@ (8001598 <playSound+0x78>)
 8001550:	fba2 2303 	umull	r2, r3, r2, r3
 8001554:	099b      	lsrs	r3, r3, #6
 8001556:	4618      	mov	r0, r3
 8001558:	f003 fb7a 	bl	8004c50 <osDelay>

		HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 800155c:	2200      	movs	r2, #0
 800155e:	2120      	movs	r1, #32
 8001560:	480c      	ldr	r0, [pc, #48]	@ (8001594 <playSound+0x74>)
 8001562:	f000 fce7 	bl	8001f34 <HAL_GPIO_WritePin>
		osDelay(half_period_us / 1000);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4a0b      	ldr	r2, [pc, #44]	@ (8001598 <playSound+0x78>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	099b      	lsrs	r3, r3, #6
 8001570:	4618      	mov	r0, r3
 8001572:	f003 fb6d 	bl	8004c50 <osDelay>
	while ((HAL_GetTick() - startTick) < duration_ms)
 8001576:	f000 fa2d 	bl	80019d4 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d8dd      	bhi.n	8001542 <playSound+0x22>
	}
}
 8001586:	bf00      	nop
 8001588:	bf00      	nop
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	000f4240 	.word	0x000f4240
 8001594:	48000400 	.word	0x48000400
 8001598:	10624dd3 	.word	0x10624dd3

0800159c <LedCounterTask>:

void LedCounterTask(void *argument){
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	// PA8 - D7 - Button 1
	// PA9 - D8 - Button 2


	// TODO add 5 leds and turn on with counter
	const uint16_t LED_1_PIN = GPIO_PIN_10;
 80015a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015a8:	81fb      	strh	r3, [r7, #14]
	GPIO_TypeDef* LED_1_PORT = GPIOA;
 80015aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80015ae:	60bb      	str	r3, [r7, #8]
	for(;;){
		if(pushupCounter % 2 != 0){
 80015b0:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <LedCounterTask+0x3c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d006      	beq.n	80015ca <LedCounterTask+0x2e>
			HAL_GPIO_WritePin(LED_1_PORT, LED_1_PIN, GPIO_PIN_SET);
 80015bc:	89fb      	ldrh	r3, [r7, #14]
 80015be:	2201      	movs	r2, #1
 80015c0:	4619      	mov	r1, r3
 80015c2:	68b8      	ldr	r0, [r7, #8]
 80015c4:	f000 fcb6 	bl	8001f34 <HAL_GPIO_WritePin>
 80015c8:	e7f2      	b.n	80015b0 <LedCounterTask+0x14>
		} else {
			HAL_GPIO_WritePin(LED_1_PORT, LED_1_PIN, GPIO_PIN_RESET);
 80015ca:	89fb      	ldrh	r3, [r7, #14]
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	68b8      	ldr	r0, [r7, #8]
 80015d2:	f000 fcaf 	bl	8001f34 <HAL_GPIO_WritePin>
		if(pushupCounter % 2 != 0){
 80015d6:	e7eb      	b.n	80015b0 <LedCounterTask+0x14>
 80015d8:	20000434 	.word	0x20000434

080015dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015e4:	2001      	movs	r0, #1
 80015e6:	f003 fb33 	bl	8004c50 <osDelay>
 80015ea:	e7fb      	b.n	80015e4 <StartDefaultTask+0x8>

080015ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a04      	ldr	r2, [pc, #16]	@ (800160c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d101      	bne.n	8001602 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015fe:	f000 f9d5 	bl	80019ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40012c00 	.word	0x40012c00

08001610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001614:	b672      	cpsid	i
}
 8001616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <Error_Handler+0x8>

0800161c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <HAL_MspInit+0x4c>)
 8001624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001626:	4a10      	ldr	r2, [pc, #64]	@ (8001668 <HAL_MspInit+0x4c>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6613      	str	r3, [r2, #96]	@ 0x60
 800162e:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <HAL_MspInit+0x4c>)
 8001630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <HAL_MspInit+0x4c>)
 800163c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <HAL_MspInit+0x4c>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001644:	6593      	str	r3, [r2, #88]	@ 0x58
 8001646:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <HAL_MspInit+0x4c>)
 8001648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	210f      	movs	r1, #15
 8001656:	f06f 0001 	mvn.w	r0, #1
 800165a:	f000 fa7f 	bl	8001b5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000

0800166c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800167c:	d10b      	bne.n	8001696 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800167e:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <HAL_TIM_Base_MspInit+0x38>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001682:	4a08      	ldr	r2, [pc, #32]	@ (80016a4 <HAL_TIM_Base_MspInit+0x38>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6593      	str	r3, [r2, #88]	@ 0x58
 800168a:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_TIM_Base_MspInit+0x38>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000

080016a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b0ac      	sub	sp, #176	@ 0xb0
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2288      	movs	r2, #136	@ 0x88
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f004 fd03 	bl	80060d4 <memset>
  if(huart->Instance==USART2)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a21      	ldr	r2, [pc, #132]	@ (8001758 <HAL_UART_MspInit+0xb0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d13b      	bne.n	8001750 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016d8:	2302      	movs	r3, #2
 80016da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016dc:	2300      	movs	r3, #0
 80016de:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4618      	mov	r0, r3
 80016e6:	f001 fad3 	bl	8002c90 <HAL_RCCEx_PeriphCLKConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016f0:	f7ff ff8e 	bl	8001610 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f4:	4b19      	ldr	r3, [pc, #100]	@ (800175c <HAL_UART_MspInit+0xb4>)
 80016f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f8:	4a18      	ldr	r2, [pc, #96]	@ (800175c <HAL_UART_MspInit+0xb4>)
 80016fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001700:	4b16      	ldr	r3, [pc, #88]	@ (800175c <HAL_UART_MspInit+0xb4>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170c:	4b13      	ldr	r3, [pc, #76]	@ (800175c <HAL_UART_MspInit+0xb4>)
 800170e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001710:	4a12      	ldr	r2, [pc, #72]	@ (800175c <HAL_UART_MspInit+0xb4>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001718:	4b10      	ldr	r3, [pc, #64]	@ (800175c <HAL_UART_MspInit+0xb4>)
 800171a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001724:	230c      	movs	r3, #12
 8001726:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800173c:	2307      	movs	r3, #7
 800173e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001742:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001746:	4619      	mov	r1, r3
 8001748:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800174c:	f000 fa30 	bl	8001bb0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001750:	bf00      	nop
 8001752:	37b0      	adds	r7, #176	@ 0xb0
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40004400 	.word	0x40004400
 800175c:	40021000 	.word	0x40021000

08001760 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	@ 0x30
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800176e:	4b2e      	ldr	r3, [pc, #184]	@ (8001828 <HAL_InitTick+0xc8>)
 8001770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001772:	4a2d      	ldr	r2, [pc, #180]	@ (8001828 <HAL_InitTick+0xc8>)
 8001774:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001778:	6613      	str	r3, [r2, #96]	@ 0x60
 800177a:	4b2b      	ldr	r3, [pc, #172]	@ (8001828 <HAL_InitTick+0xc8>)
 800177c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800177e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001786:	f107 020c 	add.w	r2, r7, #12
 800178a:	f107 0310 	add.w	r3, r7, #16
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f001 f9eb 	bl	8002b6c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001796:	f001 f9d3 	bl	8002b40 <HAL_RCC_GetPCLK2Freq>
 800179a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800179c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800179e:	4a23      	ldr	r2, [pc, #140]	@ (800182c <HAL_InitTick+0xcc>)
 80017a0:	fba2 2303 	umull	r2, r3, r2, r3
 80017a4:	0c9b      	lsrs	r3, r3, #18
 80017a6:	3b01      	subs	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80017aa:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <HAL_InitTick+0xd0>)
 80017ac:	4a21      	ldr	r2, [pc, #132]	@ (8001834 <HAL_InitTick+0xd4>)
 80017ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80017b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <HAL_InitTick+0xd0>)
 80017b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017b6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80017b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001830 <HAL_InitTick+0xd0>)
 80017ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017bc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80017be:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <HAL_InitTick+0xd0>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <HAL_InitTick+0xd0>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ca:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <HAL_InitTick+0xd0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80017d0:	4817      	ldr	r0, [pc, #92]	@ (8001830 <HAL_InitTick+0xd0>)
 80017d2:	f001 ff19 	bl	8003608 <HAL_TIM_Base_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80017dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d11b      	bne.n	800181c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80017e4:	4812      	ldr	r0, [pc, #72]	@ (8001830 <HAL_InitTick+0xd0>)
 80017e6:	f001 ffcf 	bl	8003788 <HAL_TIM_Base_Start_IT>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80017f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d111      	bne.n	800181c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80017f8:	2019      	movs	r0, #25
 80017fa:	f000 f9cb 	bl	8001b94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b0f      	cmp	r3, #15
 8001802:	d808      	bhi.n	8001816 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001804:	2200      	movs	r2, #0
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	2019      	movs	r0, #25
 800180a:	f000 f9a7 	bl	8001b5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800180e:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <HAL_InitTick+0xd8>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e002      	b.n	800181c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800181c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001820:	4618      	mov	r0, r3
 8001822:	3730      	adds	r7, #48	@ 0x30
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	431bde83 	.word	0x431bde83
 8001830:	2000043c 	.word	0x2000043c
 8001834:	40012c00 	.word	0x40012c00
 8001838:	20000004 	.word	0x20000004

0800183c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <NMI_Handler+0x4>

08001844 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <HardFault_Handler+0x4>

0800184c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <MemManage_Handler+0x4>

08001854 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <BusFault_Handler+0x4>

0800185c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <UsageFault_Handler+0x4>

08001864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001878:	4802      	ldr	r0, [pc, #8]	@ (8001884 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800187a:	f001 fff5 	bl	8003868 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	2000043c 	.word	0x2000043c

08001888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001890:	4a14      	ldr	r2, [pc, #80]	@ (80018e4 <_sbrk+0x5c>)
 8001892:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <_sbrk+0x60>)
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800189c:	4b13      	ldr	r3, [pc, #76]	@ (80018ec <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a4:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <_sbrk+0x64>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	@ (80018f0 <_sbrk+0x68>)
 80018a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018aa:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d207      	bcs.n	80018c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b8:	f004 fc6a 	bl	8006190 <__errno>
 80018bc:	4603      	mov	r3, r0
 80018be:	220c      	movs	r2, #12
 80018c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295
 80018c6:	e009      	b.n	80018dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c8:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ce:	4b07      	ldr	r3, [pc, #28]	@ (80018ec <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	4a05      	ldr	r2, [pc, #20]	@ (80018ec <_sbrk+0x64>)
 80018d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018da:	68fb      	ldr	r3, [r7, #12]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20018000 	.word	0x20018000
 80018e8:	00000400 	.word	0x00000400
 80018ec:	20000488 	.word	0x20000488
 80018f0:	20004730 	.word	0x20004730

080018f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <SystemInit+0x20>)
 80018fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018fe:	4a05      	ldr	r2, [pc, #20]	@ (8001914 <SystemInit+0x20>)
 8001900:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001904:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001918:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001950 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800191c:	f7ff ffea 	bl	80018f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001920:	480c      	ldr	r0, [pc, #48]	@ (8001954 <LoopForever+0x6>)
  ldr r1, =_edata
 8001922:	490d      	ldr	r1, [pc, #52]	@ (8001958 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001924:	4a0d      	ldr	r2, [pc, #52]	@ (800195c <LoopForever+0xe>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001928:	e002      	b.n	8001930 <LoopCopyDataInit>

0800192a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192e:	3304      	adds	r3, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001934:	d3f9      	bcc.n	800192a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001936:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001938:	4c0a      	ldr	r4, [pc, #40]	@ (8001964 <LoopForever+0x16>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800193c:	e001      	b.n	8001942 <LoopFillZerobss>

0800193e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001940:	3204      	adds	r2, #4

08001942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001944:	d3fb      	bcc.n	800193e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001946:	f004 fc29 	bl	800619c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800194a:	f7ff fa19 	bl	8000d80 <main>

0800194e <LoopForever>:

LoopForever:
    b LoopForever
 800194e:	e7fe      	b.n	800194e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001950:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001958:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800195c:	08006bc0 	.word	0x08006bc0
  ldr r2, =_sbss
 8001960:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001964:	2000472c 	.word	0x2000472c

08001968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC1_2_IRQHandler>
	...

0800196c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001976:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <HAL_Init+0x3c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a0b      	ldr	r2, [pc, #44]	@ (80019a8 <HAL_Init+0x3c>)
 800197c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001980:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001982:	2003      	movs	r0, #3
 8001984:	f000 f8df 	bl	8001b46 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001988:	200f      	movs	r0, #15
 800198a:	f7ff fee9 	bl	8001760 <HAL_InitTick>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d002      	beq.n	800199a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	71fb      	strb	r3, [r7, #7]
 8001998:	e001      	b.n	800199e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800199a:	f7ff fe3f 	bl	800161c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800199e:	79fb      	ldrb	r3, [r7, #7]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40022000 	.word	0x40022000

080019ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_IncTick+0x20>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <HAL_IncTick+0x24>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	4a04      	ldr	r2, [pc, #16]	@ (80019d0 <HAL_IncTick+0x24>)
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000008 	.word	0x20000008
 80019d0:	2000048c 	.word	0x2000048c

080019d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return uwTick;
 80019d8:	4b03      	ldr	r3, [pc, #12]	@ (80019e8 <HAL_GetTick+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	2000048c 	.word	0x2000048c

080019ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <__NVIC_SetPriorityGrouping+0x44>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a1e:	4a04      	ldr	r2, [pc, #16]	@ (8001a30 <__NVIC_SetPriorityGrouping+0x44>)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	60d3      	str	r3, [r2, #12]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a38:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <__NVIC_GetPriorityGrouping+0x18>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	f003 0307 	and.w	r3, r3, #7
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	db0b      	blt.n	8001a7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	f003 021f 	and.w	r2, r3, #31
 8001a68:	4907      	ldr	r1, [pc, #28]	@ (8001a88 <__NVIC_EnableIRQ+0x38>)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	095b      	lsrs	r3, r3, #5
 8001a70:	2001      	movs	r0, #1
 8001a72:	fa00 f202 	lsl.w	r2, r0, r2
 8001a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000e100 	.word	0xe000e100

08001a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	6039      	str	r1, [r7, #0]
 8001a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	db0a      	blt.n	8001ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	490c      	ldr	r1, [pc, #48]	@ (8001ad8 <__NVIC_SetPriority+0x4c>)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	0112      	lsls	r2, r2, #4
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	440b      	add	r3, r1
 8001ab0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab4:	e00a      	b.n	8001acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4908      	ldr	r1, [pc, #32]	@ (8001adc <__NVIC_SetPriority+0x50>)
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	3b04      	subs	r3, #4
 8001ac4:	0112      	lsls	r2, r2, #4
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	440b      	add	r3, r1
 8001aca:	761a      	strb	r2, [r3, #24]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000e100 	.word	0xe000e100
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b089      	sub	sp, #36	@ 0x24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f1c3 0307 	rsb	r3, r3, #7
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	bf28      	it	cs
 8001afe:	2304      	movcs	r3, #4
 8001b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3304      	adds	r3, #4
 8001b06:	2b06      	cmp	r3, #6
 8001b08:	d902      	bls.n	8001b10 <NVIC_EncodePriority+0x30>
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3b03      	subs	r3, #3
 8001b0e:	e000      	b.n	8001b12 <NVIC_EncodePriority+0x32>
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	f04f 32ff 	mov.w	r2, #4294967295
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	401a      	ands	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b28:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	43d9      	mvns	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	4313      	orrs	r3, r2
         );
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3724      	adds	r7, #36	@ 0x24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ff4c 	bl	80019ec <__NVIC_SetPriorityGrouping>
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b6e:	f7ff ff61 	bl	8001a34 <__NVIC_GetPriorityGrouping>
 8001b72:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	68b9      	ldr	r1, [r7, #8]
 8001b78:	6978      	ldr	r0, [r7, #20]
 8001b7a:	f7ff ffb1 	bl	8001ae0 <NVIC_EncodePriority>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff80 	bl	8001a8c <__NVIC_SetPriority>
}
 8001b8c:	bf00      	nop
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff54 	bl	8001a50 <__NVIC_EnableIRQ>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bbe:	e17f      	b.n	8001ec0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 8171 	beq.w	8001eba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d005      	beq.n	8001bf0 <HAL_GPIO_Init+0x40>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d130      	bne.n	8001c52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c26:	2201      	movs	r2, #1
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	091b      	lsrs	r3, r3, #4
 8001c3c:	f003 0201 	and.w	r2, r3, #1
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d118      	bne.n	8001c90 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c64:	2201      	movs	r2, #1
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	08db      	lsrs	r3, r3, #3
 8001c7a:	f003 0201 	and.w	r2, r3, #1
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d017      	beq.n	8001ccc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d123      	bne.n	8001d20 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	220f      	movs	r2, #15
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	08da      	lsrs	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3208      	adds	r2, #8
 8001d1a:	6939      	ldr	r1, [r7, #16]
 8001d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0203 	and.w	r2, r3, #3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80ac 	beq.w	8001eba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	4b5f      	ldr	r3, [pc, #380]	@ (8001ee0 <HAL_GPIO_Init+0x330>)
 8001d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d66:	4a5e      	ldr	r2, [pc, #376]	@ (8001ee0 <HAL_GPIO_Init+0x330>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d6e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ee0 <HAL_GPIO_Init+0x330>)
 8001d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d7a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ee4 <HAL_GPIO_Init+0x334>)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	3302      	adds	r3, #2
 8001d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	220f      	movs	r2, #15
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001da4:	d025      	beq.n	8001df2 <HAL_GPIO_Init+0x242>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4f      	ldr	r2, [pc, #316]	@ (8001ee8 <HAL_GPIO_Init+0x338>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d01f      	beq.n	8001dee <HAL_GPIO_Init+0x23e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4e      	ldr	r2, [pc, #312]	@ (8001eec <HAL_GPIO_Init+0x33c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d019      	beq.n	8001dea <HAL_GPIO_Init+0x23a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4d      	ldr	r2, [pc, #308]	@ (8001ef0 <HAL_GPIO_Init+0x340>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d013      	beq.n	8001de6 <HAL_GPIO_Init+0x236>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a4c      	ldr	r2, [pc, #304]	@ (8001ef4 <HAL_GPIO_Init+0x344>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d00d      	beq.n	8001de2 <HAL_GPIO_Init+0x232>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4b      	ldr	r2, [pc, #300]	@ (8001ef8 <HAL_GPIO_Init+0x348>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d007      	beq.n	8001dde <HAL_GPIO_Init+0x22e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a4a      	ldr	r2, [pc, #296]	@ (8001efc <HAL_GPIO_Init+0x34c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d101      	bne.n	8001dda <HAL_GPIO_Init+0x22a>
 8001dd6:	2306      	movs	r3, #6
 8001dd8:	e00c      	b.n	8001df4 <HAL_GPIO_Init+0x244>
 8001dda:	2307      	movs	r3, #7
 8001ddc:	e00a      	b.n	8001df4 <HAL_GPIO_Init+0x244>
 8001dde:	2305      	movs	r3, #5
 8001de0:	e008      	b.n	8001df4 <HAL_GPIO_Init+0x244>
 8001de2:	2304      	movs	r3, #4
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x244>
 8001de6:	2303      	movs	r3, #3
 8001de8:	e004      	b.n	8001df4 <HAL_GPIO_Init+0x244>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e002      	b.n	8001df4 <HAL_GPIO_Init+0x244>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_GPIO_Init+0x244>
 8001df2:	2300      	movs	r3, #0
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	f002 0203 	and.w	r2, r2, #3
 8001dfa:	0092      	lsls	r2, r2, #2
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e04:	4937      	ldr	r1, [pc, #220]	@ (8001ee4 <HAL_GPIO_Init+0x334>)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e12:	4b3b      	ldr	r3, [pc, #236]	@ (8001f00 <HAL_GPIO_Init+0x350>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e36:	4a32      	ldr	r2, [pc, #200]	@ (8001f00 <HAL_GPIO_Init+0x350>)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e3c:	4b30      	ldr	r3, [pc, #192]	@ (8001f00 <HAL_GPIO_Init+0x350>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e60:	4a27      	ldr	r2, [pc, #156]	@ (8001f00 <HAL_GPIO_Init+0x350>)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e66:	4b26      	ldr	r3, [pc, #152]	@ (8001f00 <HAL_GPIO_Init+0x350>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4013      	ands	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001f00 <HAL_GPIO_Init+0x350>)
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e90:	4b1b      	ldr	r3, [pc, #108]	@ (8001f00 <HAL_GPIO_Init+0x350>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001eb4:	4a12      	ldr	r2, [pc, #72]	@ (8001f00 <HAL_GPIO_Init+0x350>)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f47f ae78 	bne.w	8001bc0 <HAL_GPIO_Init+0x10>
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	371c      	adds	r7, #28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	48000400 	.word	0x48000400
 8001eec:	48000800 	.word	0x48000800
 8001ef0:	48000c00 	.word	0x48000c00
 8001ef4:	48001000 	.word	0x48001000
 8001ef8:	48001400 	.word	0x48001400
 8001efc:	48001800 	.word	0x48001800
 8001f00:	40010400 	.word	0x40010400

08001f04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	887b      	ldrh	r3, [r7, #2]
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	e001      	b.n	8001f26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
 8001f40:	4613      	mov	r3, r2
 8001f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f44:	787b      	ldrb	r3, [r7, #1]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f50:	e002      	b.n	8001f58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f52:	887a      	ldrh	r2, [r7, #2]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f68:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <HAL_PWREx_GetVoltageRange+0x18>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40007000 	.word	0x40007000

08001f80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f8e:	d130      	bne.n	8001ff2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f90:	4b23      	ldr	r3, [pc, #140]	@ (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f9c:	d038      	beq.n	8002010 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f9e:	4b20      	ldr	r3, [pc, #128]	@ (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fae:	4b1d      	ldr	r3, [pc, #116]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2232      	movs	r2, #50	@ 0x32
 8001fb4:	fb02 f303 	mul.w	r3, r2, r3
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8002028 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fba:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbe:	0c9b      	lsrs	r3, r3, #18
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fc4:	e002      	b.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fcc:	4b14      	ldr	r3, [pc, #80]	@ (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fd8:	d102      	bne.n	8001fe0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f2      	bne.n	8001fc6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fec:	d110      	bne.n	8002010 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e00f      	b.n	8002012 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ffe:	d007      	beq.n	8002010 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002000:	4b07      	ldr	r3, [pc, #28]	@ (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002008:	4a05      	ldr	r2, [pc, #20]	@ (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800200e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40007000 	.word	0x40007000
 8002024:	20000000 	.word	0x20000000
 8002028:	431bde83 	.word	0x431bde83

0800202c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e3ca      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203e:	4b97      	ldr	r3, [pc, #604]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002048:	4b94      	ldr	r3, [pc, #592]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 80e4 	beq.w	8002228 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <HAL_RCC_OscConfig+0x4a>
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	2b0c      	cmp	r3, #12
 800206a:	f040 808b 	bne.w	8002184 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2b01      	cmp	r3, #1
 8002072:	f040 8087 	bne.w	8002184 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002076:	4b89      	ldr	r3, [pc, #548]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_RCC_OscConfig+0x62>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e3a2      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1a      	ldr	r2, [r3, #32]
 8002092:	4b82      	ldr	r3, [pc, #520]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <HAL_RCC_OscConfig+0x7c>
 800209e:	4b7f      	ldr	r3, [pc, #508]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020a6:	e005      	b.n	80020b4 <HAL_RCC_OscConfig+0x88>
 80020a8:	4b7c      	ldr	r3, [pc, #496]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 80020aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ae:	091b      	lsrs	r3, r3, #4
 80020b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d223      	bcs.n	8002100 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 fd87 	bl	8002bd0 <RCC_SetFlashLatencyFromMSIRange>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e383      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020cc:	4b73      	ldr	r3, [pc, #460]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a72      	ldr	r2, [pc, #456]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 80020d2:	f043 0308 	orr.w	r3, r3, #8
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	4b70      	ldr	r3, [pc, #448]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	496d      	ldr	r1, [pc, #436]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ea:	4b6c      	ldr	r3, [pc, #432]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	4968      	ldr	r1, [pc, #416]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
 80020fe:	e025      	b.n	800214c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002100:	4b66      	ldr	r3, [pc, #408]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a65      	ldr	r2, [pc, #404]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 8002106:	f043 0308 	orr.w	r3, r3, #8
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b63      	ldr	r3, [pc, #396]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4960      	ldr	r1, [pc, #384]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800211e:	4b5f      	ldr	r3, [pc, #380]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	495b      	ldr	r1, [pc, #364]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fd47 	bl	8002bd0 <RCC_SetFlashLatencyFromMSIRange>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e343      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800214c:	f000 fc4a 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b52      	ldr	r3, [pc, #328]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	091b      	lsrs	r3, r3, #4
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	4950      	ldr	r1, [pc, #320]	@ (80022a0 <HAL_RCC_OscConfig+0x274>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
 8002168:	4a4e      	ldr	r2, [pc, #312]	@ (80022a4 <HAL_RCC_OscConfig+0x278>)
 800216a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800216c:	4b4e      	ldr	r3, [pc, #312]	@ (80022a8 <HAL_RCC_OscConfig+0x27c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff faf5 	bl	8001760 <HAL_InitTick>
 8002176:	4603      	mov	r3, r0
 8002178:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d052      	beq.n	8002226 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	e327      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d032      	beq.n	80021f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800218c:	4b43      	ldr	r3, [pc, #268]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a42      	ldr	r2, [pc, #264]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002198:	f7ff fc1c 	bl	80019d4 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021a0:	f7ff fc18 	bl	80019d4 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e310      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b2:	4b3a      	ldr	r3, [pc, #232]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021be:	4b37      	ldr	r3, [pc, #220]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a36      	ldr	r2, [pc, #216]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 80021c4:	f043 0308 	orr.w	r3, r3, #8
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b34      	ldr	r3, [pc, #208]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4931      	ldr	r1, [pc, #196]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021dc:	4b2f      	ldr	r3, [pc, #188]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	492c      	ldr	r1, [pc, #176]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
 80021f0:	e01a      	b.n	8002228 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021f2:	4b2a      	ldr	r3, [pc, #168]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a29      	ldr	r2, [pc, #164]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021fe:	f7ff fbe9 	bl	80019d4 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002206:	f7ff fbe5 	bl	80019d4 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e2dd      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002218:	4b20      	ldr	r3, [pc, #128]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x1da>
 8002224:	e000      	b.n	8002228 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002226:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d074      	beq.n	800231e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b08      	cmp	r3, #8
 8002238:	d005      	beq.n	8002246 <HAL_RCC_OscConfig+0x21a>
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b0c      	cmp	r3, #12
 800223e:	d10e      	bne.n	800225e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d10b      	bne.n	800225e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002246:	4b15      	ldr	r3, [pc, #84]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d064      	beq.n	800231c <HAL_RCC_OscConfig+0x2f0>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d160      	bne.n	800231c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e2ba      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x24a>
 8002268:	4b0c      	ldr	r3, [pc, #48]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0b      	ldr	r2, [pc, #44]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 800226e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	e026      	b.n	80022c4 <HAL_RCC_OscConfig+0x298>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800227e:	d115      	bne.n	80022ac <HAL_RCC_OscConfig+0x280>
 8002280:	4b06      	ldr	r3, [pc, #24]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a05      	ldr	r2, [pc, #20]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 8002286:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b03      	ldr	r3, [pc, #12]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a02      	ldr	r2, [pc, #8]	@ (800229c <HAL_RCC_OscConfig+0x270>)
 8002292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	e014      	b.n	80022c4 <HAL_RCC_OscConfig+0x298>
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	08006b34 	.word	0x08006b34
 80022a4:	20000000 	.word	0x20000000
 80022a8:	20000004 	.word	0x20000004
 80022ac:	4ba0      	ldr	r3, [pc, #640]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a9f      	ldr	r2, [pc, #636]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 80022b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b9d      	ldr	r3, [pc, #628]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a9c      	ldr	r2, [pc, #624]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 80022be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d013      	beq.n	80022f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7ff fb82 	bl	80019d4 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d4:	f7ff fb7e 	bl	80019d4 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	@ 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e276      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e6:	4b92      	ldr	r3, [pc, #584]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x2a8>
 80022f2:	e014      	b.n	800231e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7ff fb6e 	bl	80019d4 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022fc:	f7ff fb6a 	bl	80019d4 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	@ 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e262      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800230e:	4b88      	ldr	r3, [pc, #544]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x2d0>
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d060      	beq.n	80023ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2b04      	cmp	r3, #4
 800232e:	d005      	beq.n	800233c <HAL_RCC_OscConfig+0x310>
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d119      	bne.n	800236a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d116      	bne.n	800236a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800233c:	4b7c      	ldr	r3, [pc, #496]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_OscConfig+0x328>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e23f      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002354:	4b76      	ldr	r3, [pc, #472]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	061b      	lsls	r3, r3, #24
 8002362:	4973      	ldr	r1, [pc, #460]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002368:	e040      	b.n	80023ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d023      	beq.n	80023ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002372:	4b6f      	ldr	r3, [pc, #444]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6e      	ldr	r2, [pc, #440]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 8002378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800237c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7ff fb29 	bl	80019d4 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002386:	f7ff fb25 	bl	80019d4 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e21d      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002398:	4b65      	ldr	r3, [pc, #404]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a4:	4b62      	ldr	r3, [pc, #392]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	495f      	ldr	r1, [pc, #380]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
 80023b8:	e018      	b.n	80023ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a5c      	ldr	r2, [pc, #368]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 80023c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7ff fb05 	bl	80019d4 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ce:	f7ff fb01 	bl	80019d4 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e1f9      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e0:	4b53      	ldr	r3, [pc, #332]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f0      	bne.n	80023ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d03c      	beq.n	8002472 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d01c      	beq.n	800243a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002400:	4b4b      	ldr	r3, [pc, #300]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 8002402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002406:	4a4a      	ldr	r2, [pc, #296]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002410:	f7ff fae0 	bl	80019d4 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002418:	f7ff fadc 	bl	80019d4 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e1d4      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800242a:	4b41      	ldr	r3, [pc, #260]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 800242c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0ef      	beq.n	8002418 <HAL_RCC_OscConfig+0x3ec>
 8002438:	e01b      	b.n	8002472 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243a:	4b3d      	ldr	r3, [pc, #244]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 800243c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002440:	4a3b      	ldr	r2, [pc, #236]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 8002442:	f023 0301 	bic.w	r3, r3, #1
 8002446:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244a:	f7ff fac3 	bl	80019d4 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002452:	f7ff fabf 	bl	80019d4 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e1b7      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002464:	4b32      	ldr	r3, [pc, #200]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 8002466:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1ef      	bne.n	8002452 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80a6 	beq.w	80025cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002484:	4b2a      	ldr	r3, [pc, #168]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 8002486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10d      	bne.n	80024ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002490:	4b27      	ldr	r3, [pc, #156]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 8002492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002494:	4a26      	ldr	r2, [pc, #152]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 8002496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800249a:	6593      	str	r3, [r2, #88]	@ 0x58
 800249c:	4b24      	ldr	r3, [pc, #144]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 800249e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a8:	2301      	movs	r3, #1
 80024aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ac:	4b21      	ldr	r3, [pc, #132]	@ (8002534 <HAL_RCC_OscConfig+0x508>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d118      	bne.n	80024ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002534 <HAL_RCC_OscConfig+0x508>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002534 <HAL_RCC_OscConfig+0x508>)
 80024be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c4:	f7ff fa86 	bl	80019d4 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024cc:	f7ff fa82 	bl	80019d4 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e17a      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024de:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <HAL_RCC_OscConfig+0x508>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d108      	bne.n	8002504 <HAL_RCC_OscConfig+0x4d8>
 80024f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002502:	e029      	b.n	8002558 <HAL_RCC_OscConfig+0x52c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b05      	cmp	r3, #5
 800250a:	d115      	bne.n	8002538 <HAL_RCC_OscConfig+0x50c>
 800250c:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002512:	4a07      	ldr	r2, [pc, #28]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800251c:	4b04      	ldr	r3, [pc, #16]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002522:	4a03      	ldr	r2, [pc, #12]	@ (8002530 <HAL_RCC_OscConfig+0x504>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800252c:	e014      	b.n	8002558 <HAL_RCC_OscConfig+0x52c>
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000
 8002534:	40007000 	.word	0x40007000
 8002538:	4b9c      	ldr	r3, [pc, #624]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253e:	4a9b      	ldr	r2, [pc, #620]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 8002540:	f023 0301 	bic.w	r3, r3, #1
 8002544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002548:	4b98      	ldr	r3, [pc, #608]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254e:	4a97      	ldr	r2, [pc, #604]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 8002550:	f023 0304 	bic.w	r3, r3, #4
 8002554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d016      	beq.n	800258e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7ff fa38 	bl	80019d4 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002566:	e00a      	b.n	800257e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002568:	f7ff fa34 	bl	80019d4 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e12a      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257e:	4b8b      	ldr	r3, [pc, #556]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ed      	beq.n	8002568 <HAL_RCC_OscConfig+0x53c>
 800258c:	e015      	b.n	80025ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258e:	f7ff fa21 	bl	80019d4 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002594:	e00a      	b.n	80025ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002596:	f7ff fa1d 	bl	80019d4 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e113      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ac:	4b7f      	ldr	r3, [pc, #508]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1ed      	bne.n	8002596 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ba:	7ffb      	ldrb	r3, [r7, #31]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d105      	bne.n	80025cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c0:	4b7a      	ldr	r3, [pc, #488]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c4:	4a79      	ldr	r2, [pc, #484]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 80025c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ca:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 80fe 	beq.w	80027d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025da:	2b02      	cmp	r3, #2
 80025dc:	f040 80d0 	bne.w	8002780 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025e0:	4b72      	ldr	r3, [pc, #456]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f003 0203 	and.w	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d130      	bne.n	8002656 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	3b01      	subs	r3, #1
 8002600:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d127      	bne.n	8002656 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002610:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002612:	429a      	cmp	r2, r3
 8002614:	d11f      	bne.n	8002656 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002620:	2a07      	cmp	r2, #7
 8002622:	bf14      	ite	ne
 8002624:	2201      	movne	r2, #1
 8002626:	2200      	moveq	r2, #0
 8002628:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800262a:	4293      	cmp	r3, r2
 800262c:	d113      	bne.n	8002656 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	3b01      	subs	r3, #1
 800263c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d109      	bne.n	8002656 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	085b      	lsrs	r3, r3, #1
 800264e:	3b01      	subs	r3, #1
 8002650:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d06e      	beq.n	8002734 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b0c      	cmp	r3, #12
 800265a:	d069      	beq.n	8002730 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800265c:	4b53      	ldr	r3, [pc, #332]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d105      	bne.n	8002674 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002668:	4b50      	ldr	r3, [pc, #320]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0ad      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002678:	4b4c      	ldr	r3, [pc, #304]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a4b      	ldr	r2, [pc, #300]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 800267e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002682:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002684:	f7ff f9a6 	bl	80019d4 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268c:	f7ff f9a2 	bl	80019d4 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e09a      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800269e:	4b43      	ldr	r3, [pc, #268]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026aa:	4b40      	ldr	r3, [pc, #256]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	4b40      	ldr	r3, [pc, #256]	@ (80027b0 <HAL_RCC_OscConfig+0x784>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026ba:	3a01      	subs	r2, #1
 80026bc:	0112      	lsls	r2, r2, #4
 80026be:	4311      	orrs	r1, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026c4:	0212      	lsls	r2, r2, #8
 80026c6:	4311      	orrs	r1, r2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026cc:	0852      	lsrs	r2, r2, #1
 80026ce:	3a01      	subs	r2, #1
 80026d0:	0552      	lsls	r2, r2, #21
 80026d2:	4311      	orrs	r1, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026d8:	0852      	lsrs	r2, r2, #1
 80026da:	3a01      	subs	r2, #1
 80026dc:	0652      	lsls	r2, r2, #25
 80026de:	4311      	orrs	r1, r2
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026e4:	0912      	lsrs	r2, r2, #4
 80026e6:	0452      	lsls	r2, r2, #17
 80026e8:	430a      	orrs	r2, r1
 80026ea:	4930      	ldr	r1, [pc, #192]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026f0:	4b2e      	ldr	r3, [pc, #184]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2d      	ldr	r2, [pc, #180]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 80026f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026fc:	4b2b      	ldr	r3, [pc, #172]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4a2a      	ldr	r2, [pc, #168]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 8002702:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002706:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002708:	f7ff f964 	bl	80019d4 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002710:	f7ff f960 	bl	80019d4 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e058      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002722:	4b22      	ldr	r3, [pc, #136]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800272e:	e050      	b.n	80027d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e04f      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002734:	4b1d      	ldr	r3, [pc, #116]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d148      	bne.n	80027d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002740:	4b1a      	ldr	r3, [pc, #104]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a19      	ldr	r2, [pc, #100]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 8002746:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800274a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800274c:	4b17      	ldr	r3, [pc, #92]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a16      	ldr	r2, [pc, #88]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 8002752:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002756:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002758:	f7ff f93c 	bl	80019d4 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002760:	f7ff f938 	bl	80019d4 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e030      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002772:	4b0e      	ldr	r3, [pc, #56]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x734>
 800277e:	e028      	b.n	80027d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b0c      	cmp	r3, #12
 8002784:	d023      	beq.n	80027ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002786:	4b09      	ldr	r3, [pc, #36]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a08      	ldr	r2, [pc, #32]	@ (80027ac <HAL_RCC_OscConfig+0x780>)
 800278c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7ff f91f 	bl	80019d4 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002798:	e00c      	b.n	80027b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279a:	f7ff f91b 	bl	80019d4 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d905      	bls.n	80027b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e013      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
 80027ac:	40021000 	.word	0x40021000
 80027b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b4:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <HAL_RCC_OscConfig+0x7b0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ec      	bne.n	800279a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027c0:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <HAL_RCC_OscConfig+0x7b0>)
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	4905      	ldr	r1, [pc, #20]	@ (80027dc <HAL_RCC_OscConfig+0x7b0>)
 80027c6:	4b06      	ldr	r3, [pc, #24]	@ (80027e0 <HAL_RCC_OscConfig+0x7b4>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	60cb      	str	r3, [r1, #12]
 80027cc:	e001      	b.n	80027d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3720      	adds	r7, #32
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	feeefffc 	.word	0xfeeefffc

080027e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0e7      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b75      	ldr	r3, [pc, #468]	@ (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d910      	bls.n	8002828 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b72      	ldr	r3, [pc, #456]	@ (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 0207 	bic.w	r2, r3, #7
 800280e:	4970      	ldr	r1, [pc, #448]	@ (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b6e      	ldr	r3, [pc, #440]	@ (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0cf      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d010      	beq.n	8002856 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	4b66      	ldr	r3, [pc, #408]	@ (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002840:	429a      	cmp	r2, r3
 8002842:	d908      	bls.n	8002856 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002844:	4b63      	ldr	r3, [pc, #396]	@ (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4960      	ldr	r1, [pc, #384]	@ (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d04c      	beq.n	80028fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d107      	bne.n	800287a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286a:	4b5a      	ldr	r3, [pc, #360]	@ (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d121      	bne.n	80028ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e0a6      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002882:	4b54      	ldr	r3, [pc, #336]	@ (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d115      	bne.n	80028ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e09a      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800289a:	4b4e      	ldr	r3, [pc, #312]	@ (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e08e      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028aa:	4b4a      	ldr	r3, [pc, #296]	@ (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e086      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028ba:	4b46      	ldr	r3, [pc, #280]	@ (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f023 0203 	bic.w	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4943      	ldr	r1, [pc, #268]	@ (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028cc:	f7ff f882 	bl	80019d4 <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d4:	f7ff f87e 	bl	80019d4 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e06e      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ea:	4b3a      	ldr	r3, [pc, #232]	@ (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 020c 	and.w	r2, r3, #12
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d1eb      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d010      	beq.n	800292a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	4b31      	ldr	r3, [pc, #196]	@ (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002914:	429a      	cmp	r2, r3
 8002916:	d208      	bcs.n	800292a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002918:	4b2e      	ldr	r3, [pc, #184]	@ (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	492b      	ldr	r1, [pc, #172]	@ (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800292a:	4b29      	ldr	r3, [pc, #164]	@ (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d210      	bcs.n	800295a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002938:	4b25      	ldr	r3, [pc, #148]	@ (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f023 0207 	bic.w	r2, r3, #7
 8002940:	4923      	ldr	r1, [pc, #140]	@ (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	4313      	orrs	r3, r2
 8002946:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002948:	4b21      	ldr	r3, [pc, #132]	@ (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d001      	beq.n	800295a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e036      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d008      	beq.n	8002978 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002966:	4b1b      	ldr	r3, [pc, #108]	@ (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	4918      	ldr	r1, [pc, #96]	@ (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002974:	4313      	orrs	r3, r2
 8002976:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d009      	beq.n	8002998 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002984:	4b13      	ldr	r3, [pc, #76]	@ (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4910      	ldr	r1, [pc, #64]	@ (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002994:	4313      	orrs	r3, r2
 8002996:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002998:	f000 f824 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b0d      	ldr	r3, [pc, #52]	@ (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	490b      	ldr	r1, [pc, #44]	@ (80029d8 <HAL_RCC_ClockConfig+0x1f4>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
 80029b4:	4a09      	ldr	r2, [pc, #36]	@ (80029dc <HAL_RCC_ClockConfig+0x1f8>)
 80029b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029b8:	4b09      	ldr	r3, [pc, #36]	@ (80029e0 <HAL_RCC_ClockConfig+0x1fc>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe fecf 	bl	8001760 <HAL_InitTick>
 80029c2:	4603      	mov	r3, r0
 80029c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80029c6:	7afb      	ldrb	r3, [r7, #11]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40022000 	.word	0x40022000
 80029d4:	40021000 	.word	0x40021000
 80029d8:	08006b34 	.word	0x08006b34
 80029dc:	20000000 	.word	0x20000000
 80029e0:	20000004 	.word	0x20000004

080029e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b089      	sub	sp, #36	@ 0x24
 80029e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	2300      	movs	r3, #0
 80029f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029f2:	4b3e      	ldr	r3, [pc, #248]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029fc:	4b3b      	ldr	r3, [pc, #236]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_GetSysClockFreq+0x34>
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	2b0c      	cmp	r3, #12
 8002a10:	d121      	bne.n	8002a56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d11e      	bne.n	8002a56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a18:	4b34      	ldr	r3, [pc, #208]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a24:	4b31      	ldr	r3, [pc, #196]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a2a:	0a1b      	lsrs	r3, r3, #8
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	e005      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a34:	4b2d      	ldr	r3, [pc, #180]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a40:	4a2b      	ldr	r2, [pc, #172]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10d      	bne.n	8002a6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d102      	bne.n	8002a62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a5c:	4b25      	ldr	r3, [pc, #148]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	e004      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a68:	4b23      	ldr	r3, [pc, #140]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d134      	bne.n	8002adc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a72:	4b1e      	ldr	r3, [pc, #120]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d003      	beq.n	8002a8a <HAL_RCC_GetSysClockFreq+0xa6>
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d003      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0xac>
 8002a88:	e005      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a8c:	617b      	str	r3, [r7, #20]
      break;
 8002a8e:	e005      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a90:	4b19      	ldr	r3, [pc, #100]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a92:	617b      	str	r3, [r7, #20]
      break;
 8002a94:	e002      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	617b      	str	r3, [r7, #20]
      break;
 8002a9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a9c:	4b13      	ldr	r3, [pc, #76]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002aaa:	4b10      	ldr	r3, [pc, #64]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	fb03 f202 	mul.w	r2, r3, r2
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	0e5b      	lsrs	r3, r3, #25
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	3301      	adds	r3, #1
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ada:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002adc:	69bb      	ldr	r3, [r7, #24]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3724      	adds	r7, #36	@ 0x24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
 8002af0:	08006b4c 	.word	0x08006b4c
 8002af4:	00f42400 	.word	0x00f42400
 8002af8:	007a1200 	.word	0x007a1200

08002afc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b00:	4b03      	ldr	r3, [pc, #12]	@ (8002b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b02:	681b      	ldr	r3, [r3, #0]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20000000 	.word	0x20000000

08002b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b18:	f7ff fff0 	bl	8002afc <HAL_RCC_GetHCLKFreq>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	4904      	ldr	r1, [pc, #16]	@ (8002b3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b2a:	5ccb      	ldrb	r3, [r1, r3]
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	08006b44 	.word	0x08006b44

08002b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b44:	f7ff ffda 	bl	8002afc <HAL_RCC_GetHCLKFreq>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	0adb      	lsrs	r3, r3, #11
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	4904      	ldr	r1, [pc, #16]	@ (8002b68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b56:	5ccb      	ldrb	r3, [r1, r3]
 8002b58:	f003 031f 	and.w	r3, r3, #31
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40021000 	.word	0x40021000
 8002b68:	08006b44 	.word	0x08006b44

08002b6c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	220f      	movs	r2, #15
 8002b7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002b7c:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 0203 	and.w	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002b88:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002b94:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002ba0:	4b09      	ldr	r3, [pc, #36]	@ (8002bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	08db      	lsrs	r3, r3, #3
 8002ba6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002bae:	4b07      	ldr	r3, [pc, #28]	@ (8002bcc <HAL_RCC_GetClockConfig+0x60>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0207 	and.w	r2, r3, #7
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	601a      	str	r2, [r3, #0]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40022000 	.word	0x40022000

08002bd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bd8:	2300      	movs	r3, #0
 8002bda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002be8:	f7ff f9bc 	bl	8001f64 <HAL_PWREx_GetVoltageRange>
 8002bec:	6178      	str	r0, [r7, #20]
 8002bee:	e014      	b.n	8002c1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bf0:	4b25      	ldr	r3, [pc, #148]	@ (8002c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf4:	4a24      	ldr	r2, [pc, #144]	@ (8002c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bfc:	4b22      	ldr	r3, [pc, #136]	@ (8002c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c08:	f7ff f9ac 	bl	8001f64 <HAL_PWREx_GetVoltageRange>
 8002c0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c12:	4a1d      	ldr	r2, [pc, #116]	@ (8002c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c18:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c20:	d10b      	bne.n	8002c3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b80      	cmp	r3, #128	@ 0x80
 8002c26:	d919      	bls.n	8002c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c2c:	d902      	bls.n	8002c34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c2e:	2302      	movs	r3, #2
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	e013      	b.n	8002c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c34:	2301      	movs	r3, #1
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	e010      	b.n	8002c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b80      	cmp	r3, #128	@ 0x80
 8002c3e:	d902      	bls.n	8002c46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c40:	2303      	movs	r3, #3
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	e00a      	b.n	8002c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b80      	cmp	r3, #128	@ 0x80
 8002c4a:	d102      	bne.n	8002c52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	e004      	b.n	8002c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b70      	cmp	r3, #112	@ 0x70
 8002c56:	d101      	bne.n	8002c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c58:	2301      	movs	r3, #1
 8002c5a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f023 0207 	bic.w	r2, r3, #7
 8002c64:	4909      	ldr	r1, [pc, #36]	@ (8002c8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c6c:	4b07      	ldr	r3, [pc, #28]	@ (8002c8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d001      	beq.n	8002c7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40022000 	.word	0x40022000

08002c90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c98:	2300      	movs	r3, #0
 8002c9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d041      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cb0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002cb4:	d02a      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002cb6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002cba:	d824      	bhi.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cbc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002cc0:	d008      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cc2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002cc6:	d81e      	bhi.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ccc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cd0:	d010      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002cd2:	e018      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cd4:	4b86      	ldr	r3, [pc, #536]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4a85      	ldr	r2, [pc, #532]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cde:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ce0:	e015      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fabb 	bl	8003264 <RCCEx_PLLSAI1_Config>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cf2:	e00c      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3320      	adds	r3, #32
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 fba6 	bl	800344c <RCCEx_PLLSAI2_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d04:	e003      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	74fb      	strb	r3, [r7, #19]
      break;
 8002d0a:	e000      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d0e:	7cfb      	ldrb	r3, [r7, #19]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10b      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d14:	4b76      	ldr	r3, [pc, #472]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d22:	4973      	ldr	r1, [pc, #460]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d2a:	e001      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d041      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d40:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d44:	d02a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d46:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d4a:	d824      	bhi.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d50:	d008      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d56:	d81e      	bhi.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d60:	d010      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d62:	e018      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d64:	4b62      	ldr	r3, [pc, #392]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4a61      	ldr	r2, [pc, #388]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d6e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d70:	e015      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3304      	adds	r3, #4
 8002d76:	2100      	movs	r1, #0
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fa73 	bl	8003264 <RCCEx_PLLSAI1_Config>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d82:	e00c      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3320      	adds	r3, #32
 8002d88:	2100      	movs	r1, #0
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fb5e 	bl	800344c <RCCEx_PLLSAI2_Config>
 8002d90:	4603      	mov	r3, r0
 8002d92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d94:	e003      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	74fb      	strb	r3, [r7, #19]
      break;
 8002d9a:	e000      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d9e:	7cfb      	ldrb	r3, [r7, #19]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002da4:	4b52      	ldr	r3, [pc, #328]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002daa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002db2:	494f      	ldr	r1, [pc, #316]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002dba:	e001      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
 8002dbe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80a0 	beq.w	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dd2:	4b47      	ldr	r3, [pc, #284]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002de2:	2300      	movs	r3, #0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00d      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de8:	4b41      	ldr	r3, [pc, #260]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dec:	4a40      	ldr	r2, [pc, #256]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002df2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002df4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e00:	2301      	movs	r3, #1
 8002e02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e04:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a3a      	ldr	r2, [pc, #232]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e10:	f7fe fde0 	bl	80019d4 <HAL_GetTick>
 8002e14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e16:	e009      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e18:	f7fe fddc 	bl	80019d4 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d902      	bls.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	74fb      	strb	r3, [r7, #19]
        break;
 8002e2a:	e005      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e2c:	4b31      	ldr	r3, [pc, #196]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0ef      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d15c      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e3e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d01f      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d019      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e5c:	4b24      	ldr	r3, [pc, #144]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e68:	4b21      	ldr	r3, [pc, #132]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e6e:	4a20      	ldr	r2, [pc, #128]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e78:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e88:	4a19      	ldr	r2, [pc, #100]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d016      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9a:	f7fe fd9b 	bl	80019d4 <HAL_GetTick>
 8002e9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ea0:	e00b      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea2:	f7fe fd97 	bl	80019d4 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d902      	bls.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	74fb      	strb	r3, [r7, #19]
            break;
 8002eb8:	e006      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eba:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0ec      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ec8:	7cfb      	ldrb	r3, [r7, #19]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ece:	4b08      	ldr	r3, [pc, #32]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ede:	4904      	ldr	r1, [pc, #16]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ee6:	e009      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ee8:	7cfb      	ldrb	r3, [r7, #19]
 8002eea:	74bb      	strb	r3, [r7, #18]
 8002eec:	e006      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef8:	7cfb      	ldrb	r3, [r7, #19]
 8002efa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002efc:	7c7b      	ldrb	r3, [r7, #17]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d105      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f02:	4b9e      	ldr	r3, [pc, #632]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f06:	4a9d      	ldr	r2, [pc, #628]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f0c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f1a:	4b98      	ldr	r3, [pc, #608]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f20:	f023 0203 	bic.w	r2, r3, #3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f28:	4994      	ldr	r1, [pc, #592]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00a      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f3c:	4b8f      	ldr	r3, [pc, #572]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f42:	f023 020c 	bic.w	r2, r3, #12
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4a:	498c      	ldr	r1, [pc, #560]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f5e:	4b87      	ldr	r3, [pc, #540]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f64:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	4983      	ldr	r1, [pc, #524]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f80:	4b7e      	ldr	r3, [pc, #504]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f86:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8e:	497b      	ldr	r1, [pc, #492]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0310 	and.w	r3, r3, #16
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fa2:	4b76      	ldr	r3, [pc, #472]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb0:	4972      	ldr	r1, [pc, #456]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fc4:	4b6d      	ldr	r3, [pc, #436]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd2:	496a      	ldr	r1, [pc, #424]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fe6:	4b65      	ldr	r3, [pc, #404]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff4:	4961      	ldr	r1, [pc, #388]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003008:	4b5c      	ldr	r3, [pc, #368]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003016:	4959      	ldr	r1, [pc, #356]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800302a:	4b54      	ldr	r3, [pc, #336]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003030:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003038:	4950      	ldr	r1, [pc, #320]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800304c:	4b4b      	ldr	r3, [pc, #300]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003052:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800305a:	4948      	ldr	r1, [pc, #288]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800306e:	4b43      	ldr	r3, [pc, #268]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003074:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800307c:	493f      	ldr	r1, [pc, #252]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d028      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003090:	4b3a      	ldr	r3, [pc, #232]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003096:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800309e:	4937      	ldr	r1, [pc, #220]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030ae:	d106      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030b0:	4b32      	ldr	r3, [pc, #200]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4a31      	ldr	r2, [pc, #196]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030ba:	60d3      	str	r3, [r2, #12]
 80030bc:	e011      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030c6:	d10c      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3304      	adds	r3, #4
 80030cc:	2101      	movs	r1, #1
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f8c8 	bl	8003264 <RCCEx_PLLSAI1_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030d8:	7cfb      	ldrb	r3, [r7, #19]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80030de:	7cfb      	ldrb	r3, [r7, #19]
 80030e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d028      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030ee:	4b23      	ldr	r3, [pc, #140]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030fc:	491f      	ldr	r1, [pc, #124]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003108:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800310c:	d106      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800310e:	4b1b      	ldr	r3, [pc, #108]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	4a1a      	ldr	r2, [pc, #104]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003114:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003118:	60d3      	str	r3, [r2, #12]
 800311a:	e011      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003120:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003124:	d10c      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3304      	adds	r3, #4
 800312a:	2101      	movs	r1, #1
 800312c:	4618      	mov	r0, r3
 800312e:	f000 f899 	bl	8003264 <RCCEx_PLLSAI1_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003136:	7cfb      	ldrb	r3, [r7, #19]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800313c:	7cfb      	ldrb	r3, [r7, #19]
 800313e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d02b      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800314c:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003152:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800315a:	4908      	ldr	r1, [pc, #32]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003166:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800316a:	d109      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800316c:	4b03      	ldr	r3, [pc, #12]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4a02      	ldr	r2, [pc, #8]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003172:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003176:	60d3      	str	r3, [r2, #12]
 8003178:	e014      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003184:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003188:	d10c      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3304      	adds	r3, #4
 800318e:	2101      	movs	r1, #1
 8003190:	4618      	mov	r0, r3
 8003192:	f000 f867 	bl	8003264 <RCCEx_PLLSAI1_Config>
 8003196:	4603      	mov	r3, r0
 8003198:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800319a:	7cfb      	ldrb	r3, [r7, #19]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d02f      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031be:	4928      	ldr	r1, [pc, #160]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031ce:	d10d      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3304      	adds	r3, #4
 80031d4:	2102      	movs	r1, #2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 f844 	bl	8003264 <RCCEx_PLLSAI1_Config>
 80031dc:	4603      	mov	r3, r0
 80031de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031e0:	7cfb      	ldrb	r3, [r7, #19]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d014      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031e6:	7cfb      	ldrb	r3, [r7, #19]
 80031e8:	74bb      	strb	r3, [r7, #18]
 80031ea:	e011      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031f4:	d10c      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3320      	adds	r3, #32
 80031fa:	2102      	movs	r1, #2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 f925 	bl	800344c <RCCEx_PLLSAI2_Config>
 8003202:	4603      	mov	r3, r0
 8003204:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003206:	7cfb      	ldrb	r3, [r7, #19]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800320c:	7cfb      	ldrb	r3, [r7, #19]
 800320e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800321c:	4b10      	ldr	r3, [pc, #64]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003222:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800322a:	490d      	ldr	r1, [pc, #52]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800323e:	4b08      	ldr	r3, [pc, #32]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003244:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800324e:	4904      	ldr	r1, [pc, #16]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003256:	7cbb      	ldrb	r3, [r7, #18]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000

08003264 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003272:	4b75      	ldr	r3, [pc, #468]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d018      	beq.n	80032b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800327e:	4b72      	ldr	r3, [pc, #456]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f003 0203 	and.w	r2, r3, #3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d10d      	bne.n	80032aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
       ||
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003296:	4b6c      	ldr	r3, [pc, #432]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	091b      	lsrs	r3, r3, #4
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
       ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d047      	beq.n	800333a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
 80032ae:	e044      	b.n	800333a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d018      	beq.n	80032ea <RCCEx_PLLSAI1_Config+0x86>
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d825      	bhi.n	8003308 <RCCEx_PLLSAI1_Config+0xa4>
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d002      	beq.n	80032c6 <RCCEx_PLLSAI1_Config+0x62>
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d009      	beq.n	80032d8 <RCCEx_PLLSAI1_Config+0x74>
 80032c4:	e020      	b.n	8003308 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032c6:	4b60      	ldr	r3, [pc, #384]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d11d      	bne.n	800330e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d6:	e01a      	b.n	800330e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032d8:	4b5b      	ldr	r3, [pc, #364]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d116      	bne.n	8003312 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e8:	e013      	b.n	8003312 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032ea:	4b57      	ldr	r3, [pc, #348]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10f      	bne.n	8003316 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032f6:	4b54      	ldr	r3, [pc, #336]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003306:	e006      	b.n	8003316 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
      break;
 800330c:	e004      	b.n	8003318 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800330e:	bf00      	nop
 8003310:	e002      	b.n	8003318 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003312:	bf00      	nop
 8003314:	e000      	b.n	8003318 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003316:	bf00      	nop
    }

    if(status == HAL_OK)
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10d      	bne.n	800333a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800331e:	4b4a      	ldr	r3, [pc, #296]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6819      	ldr	r1, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	3b01      	subs	r3, #1
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	430b      	orrs	r3, r1
 8003334:	4944      	ldr	r1, [pc, #272]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003336:	4313      	orrs	r3, r2
 8003338:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d17d      	bne.n	800343c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003340:	4b41      	ldr	r3, [pc, #260]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a40      	ldr	r2, [pc, #256]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003346:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800334a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800334c:	f7fe fb42 	bl	80019d4 <HAL_GetTick>
 8003350:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003352:	e009      	b.n	8003368 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003354:	f7fe fb3e 	bl	80019d4 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d902      	bls.n	8003368 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	73fb      	strb	r3, [r7, #15]
        break;
 8003366:	e005      	b.n	8003374 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003368:	4b37      	ldr	r3, [pc, #220]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1ef      	bne.n	8003354 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003374:	7bfb      	ldrb	r3, [r7, #15]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d160      	bne.n	800343c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d111      	bne.n	80033a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003380:	4b31      	ldr	r3, [pc, #196]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6892      	ldr	r2, [r2, #8]
 8003390:	0211      	lsls	r1, r2, #8
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68d2      	ldr	r2, [r2, #12]
 8003396:	0912      	lsrs	r2, r2, #4
 8003398:	0452      	lsls	r2, r2, #17
 800339a:	430a      	orrs	r2, r1
 800339c:	492a      	ldr	r1, [pc, #168]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	610b      	str	r3, [r1, #16]
 80033a2:	e027      	b.n	80033f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d112      	bne.n	80033d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033aa:	4b27      	ldr	r3, [pc, #156]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80033b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6892      	ldr	r2, [r2, #8]
 80033ba:	0211      	lsls	r1, r2, #8
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6912      	ldr	r2, [r2, #16]
 80033c0:	0852      	lsrs	r2, r2, #1
 80033c2:	3a01      	subs	r2, #1
 80033c4:	0552      	lsls	r2, r2, #21
 80033c6:	430a      	orrs	r2, r1
 80033c8:	491f      	ldr	r1, [pc, #124]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	610b      	str	r3, [r1, #16]
 80033ce:	e011      	b.n	80033f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80033d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6892      	ldr	r2, [r2, #8]
 80033e0:	0211      	lsls	r1, r2, #8
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6952      	ldr	r2, [r2, #20]
 80033e6:	0852      	lsrs	r2, r2, #1
 80033e8:	3a01      	subs	r2, #1
 80033ea:	0652      	lsls	r2, r2, #25
 80033ec:	430a      	orrs	r2, r1
 80033ee:	4916      	ldr	r1, [pc, #88]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80033f4:	4b14      	ldr	r3, [pc, #80]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a13      	ldr	r2, [pc, #76]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003400:	f7fe fae8 	bl	80019d4 <HAL_GetTick>
 8003404:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003406:	e009      	b.n	800341c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003408:	f7fe fae4 	bl	80019d4 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d902      	bls.n	800341c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	73fb      	strb	r3, [r7, #15]
          break;
 800341a:	e005      	b.n	8003428 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800341c:	4b0a      	ldr	r3, [pc, #40]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0ef      	beq.n	8003408 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800342e:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	4904      	ldr	r1, [pc, #16]	@ (8003448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003438:	4313      	orrs	r3, r2
 800343a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800343c:	7bfb      	ldrb	r3, [r7, #15]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000

0800344c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800345a:	4b6a      	ldr	r3, [pc, #424]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d018      	beq.n	8003498 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003466:	4b67      	ldr	r3, [pc, #412]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f003 0203 	and.w	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d10d      	bne.n	8003492 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
       ||
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800347e:	4b61      	ldr	r3, [pc, #388]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	091b      	lsrs	r3, r3, #4
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
       ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d047      	beq.n	8003522 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	73fb      	strb	r3, [r7, #15]
 8003496:	e044      	b.n	8003522 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b03      	cmp	r3, #3
 800349e:	d018      	beq.n	80034d2 <RCCEx_PLLSAI2_Config+0x86>
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d825      	bhi.n	80034f0 <RCCEx_PLLSAI2_Config+0xa4>
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d002      	beq.n	80034ae <RCCEx_PLLSAI2_Config+0x62>
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d009      	beq.n	80034c0 <RCCEx_PLLSAI2_Config+0x74>
 80034ac:	e020      	b.n	80034f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034ae:	4b55      	ldr	r3, [pc, #340]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d11d      	bne.n	80034f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034be:	e01a      	b.n	80034f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034c0:	4b50      	ldr	r3, [pc, #320]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d116      	bne.n	80034fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d0:	e013      	b.n	80034fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10f      	bne.n	80034fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034de:	4b49      	ldr	r3, [pc, #292]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034ee:	e006      	b.n	80034fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
      break;
 80034f4:	e004      	b.n	8003500 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034f6:	bf00      	nop
 80034f8:	e002      	b.n	8003500 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034fa:	bf00      	nop
 80034fc:	e000      	b.n	8003500 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10d      	bne.n	8003522 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003506:	4b3f      	ldr	r3, [pc, #252]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6819      	ldr	r1, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	3b01      	subs	r3, #1
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	430b      	orrs	r3, r1
 800351c:	4939      	ldr	r1, [pc, #228]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 800351e:	4313      	orrs	r3, r2
 8003520:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d167      	bne.n	80035f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003528:	4b36      	ldr	r3, [pc, #216]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a35      	ldr	r2, [pc, #212]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 800352e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003534:	f7fe fa4e 	bl	80019d4 <HAL_GetTick>
 8003538:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800353a:	e009      	b.n	8003550 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800353c:	f7fe fa4a 	bl	80019d4 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d902      	bls.n	8003550 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	73fb      	strb	r3, [r7, #15]
        break;
 800354e:	e005      	b.n	800355c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003550:	4b2c      	ldr	r3, [pc, #176]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1ef      	bne.n	800353c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d14a      	bne.n	80035f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d111      	bne.n	800358c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003568:	4b26      	ldr	r3, [pc, #152]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003570:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6892      	ldr	r2, [r2, #8]
 8003578:	0211      	lsls	r1, r2, #8
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68d2      	ldr	r2, [r2, #12]
 800357e:	0912      	lsrs	r2, r2, #4
 8003580:	0452      	lsls	r2, r2, #17
 8003582:	430a      	orrs	r2, r1
 8003584:	491f      	ldr	r1, [pc, #124]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003586:	4313      	orrs	r3, r2
 8003588:	614b      	str	r3, [r1, #20]
 800358a:	e011      	b.n	80035b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800358c:	4b1d      	ldr	r3, [pc, #116]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003594:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6892      	ldr	r2, [r2, #8]
 800359c:	0211      	lsls	r1, r2, #8
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6912      	ldr	r2, [r2, #16]
 80035a2:	0852      	lsrs	r2, r2, #1
 80035a4:	3a01      	subs	r2, #1
 80035a6:	0652      	lsls	r2, r2, #25
 80035a8:	430a      	orrs	r2, r1
 80035aa:	4916      	ldr	r1, [pc, #88]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035b0:	4b14      	ldr	r3, [pc, #80]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a13      	ldr	r2, [pc, #76]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035bc:	f7fe fa0a 	bl	80019d4 <HAL_GetTick>
 80035c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035c2:	e009      	b.n	80035d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035c4:	f7fe fa06 	bl	80019d4 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d902      	bls.n	80035d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	73fb      	strb	r3, [r7, #15]
          break;
 80035d6:	e005      	b.n	80035e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0ef      	beq.n	80035c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80035ea:	4b06      	ldr	r3, [pc, #24]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	4904      	ldr	r1, [pc, #16]	@ (8003604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000

08003608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e049      	b.n	80036ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fe f81c 	bl	800166c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3304      	adds	r3, #4
 8003644:	4619      	mov	r1, r3
 8003646:	4610      	mov	r0, r2
 8003648:	f000 fb06 	bl	8003c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d001      	beq.n	80036d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e047      	b.n	8003760 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a23      	ldr	r2, [pc, #140]	@ (800376c <HAL_TIM_Base_Start+0xb4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d01d      	beq.n	800371e <HAL_TIM_Base_Start+0x66>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ea:	d018      	beq.n	800371e <HAL_TIM_Base_Start+0x66>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003770 <HAL_TIM_Base_Start+0xb8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <HAL_TIM_Base_Start+0x66>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003774 <HAL_TIM_Base_Start+0xbc>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00e      	beq.n	800371e <HAL_TIM_Base_Start+0x66>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1c      	ldr	r2, [pc, #112]	@ (8003778 <HAL_TIM_Base_Start+0xc0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d009      	beq.n	800371e <HAL_TIM_Base_Start+0x66>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a1b      	ldr	r2, [pc, #108]	@ (800377c <HAL_TIM_Base_Start+0xc4>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d004      	beq.n	800371e <HAL_TIM_Base_Start+0x66>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a19      	ldr	r2, [pc, #100]	@ (8003780 <HAL_TIM_Base_Start+0xc8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d115      	bne.n	800374a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	4b17      	ldr	r3, [pc, #92]	@ (8003784 <HAL_TIM_Base_Start+0xcc>)
 8003726:	4013      	ands	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b06      	cmp	r3, #6
 800372e:	d015      	beq.n	800375c <HAL_TIM_Base_Start+0xa4>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003736:	d011      	beq.n	800375c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003748:	e008      	b.n	800375c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0201 	orr.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	e000      	b.n	800375e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	40012c00 	.word	0x40012c00
 8003770:	40000400 	.word	0x40000400
 8003774:	40000800 	.word	0x40000800
 8003778:	40000c00 	.word	0x40000c00
 800377c:	40013400 	.word	0x40013400
 8003780:	40014000 	.word	0x40014000
 8003784:	00010007 	.word	0x00010007

08003788 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b01      	cmp	r3, #1
 800379a:	d001      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e04f      	b.n	8003840 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a23      	ldr	r2, [pc, #140]	@ (800384c <HAL_TIM_Base_Start_IT+0xc4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01d      	beq.n	80037fe <HAL_TIM_Base_Start_IT+0x76>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ca:	d018      	beq.n	80037fe <HAL_TIM_Base_Start_IT+0x76>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003850 <HAL_TIM_Base_Start_IT+0xc8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d013      	beq.n	80037fe <HAL_TIM_Base_Start_IT+0x76>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1e      	ldr	r2, [pc, #120]	@ (8003854 <HAL_TIM_Base_Start_IT+0xcc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00e      	beq.n	80037fe <HAL_TIM_Base_Start_IT+0x76>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003858 <HAL_TIM_Base_Start_IT+0xd0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d009      	beq.n	80037fe <HAL_TIM_Base_Start_IT+0x76>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1b      	ldr	r2, [pc, #108]	@ (800385c <HAL_TIM_Base_Start_IT+0xd4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d004      	beq.n	80037fe <HAL_TIM_Base_Start_IT+0x76>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a19      	ldr	r2, [pc, #100]	@ (8003860 <HAL_TIM_Base_Start_IT+0xd8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d115      	bne.n	800382a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	4b17      	ldr	r3, [pc, #92]	@ (8003864 <HAL_TIM_Base_Start_IT+0xdc>)
 8003806:	4013      	ands	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2b06      	cmp	r3, #6
 800380e:	d015      	beq.n	800383c <HAL_TIM_Base_Start_IT+0xb4>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003816:	d011      	beq.n	800383c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003828:	e008      	b.n	800383c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 0201 	orr.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	e000      	b.n	800383e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800383c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	40012c00 	.word	0x40012c00
 8003850:	40000400 	.word	0x40000400
 8003854:	40000800 	.word	0x40000800
 8003858:	40000c00 	.word	0x40000c00
 800385c:	40013400 	.word	0x40013400
 8003860:	40014000 	.word	0x40014000
 8003864:	00010007 	.word	0x00010007

08003868 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d020      	beq.n	80038cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01b      	beq.n	80038cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0202 	mvn.w	r2, #2
 800389c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f9b2 	bl	8003c1c <HAL_TIM_IC_CaptureCallback>
 80038b8:	e005      	b.n	80038c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f9a4 	bl	8003c08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f9b5 	bl	8003c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d020      	beq.n	8003918 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01b      	beq.n	8003918 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f06f 0204 	mvn.w	r2, #4
 80038e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f98c 	bl	8003c1c <HAL_TIM_IC_CaptureCallback>
 8003904:	e005      	b.n	8003912 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f97e 	bl	8003c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f98f 	bl	8003c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d020      	beq.n	8003964 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01b      	beq.n	8003964 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0208 	mvn.w	r2, #8
 8003934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2204      	movs	r2, #4
 800393a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f966 	bl	8003c1c <HAL_TIM_IC_CaptureCallback>
 8003950:	e005      	b.n	800395e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f958 	bl	8003c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f969 	bl	8003c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f003 0310 	and.w	r3, r3, #16
 800396a:	2b00      	cmp	r3, #0
 800396c:	d020      	beq.n	80039b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01b      	beq.n	80039b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0210 	mvn.w	r2, #16
 8003980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2208      	movs	r2, #8
 8003986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f940 	bl	8003c1c <HAL_TIM_IC_CaptureCallback>
 800399c:	e005      	b.n	80039aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f932 	bl	8003c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f943 	bl	8003c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00c      	beq.n	80039d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0201 	mvn.w	r2, #1
 80039cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fd fe0c 	bl	80015ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d104      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00c      	beq.n	8003a02 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d007      	beq.n	8003a02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80039fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fafd 	bl	8003ffc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00c      	beq.n	8003a26 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d007      	beq.n	8003a26 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 faf5 	bl	8004010 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00c      	beq.n	8003a4a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d007      	beq.n	8003a4a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f8fd 	bl	8003c44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00c      	beq.n	8003a6e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f06f 0220 	mvn.w	r2, #32
 8003a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fabd 	bl	8003fe8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a6e:	bf00      	nop
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_TIM_ConfigClockSource+0x1c>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e0b6      	b.n	8003c00 <HAL_TIM_ConfigClockSource+0x18a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ab0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ab4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003abc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ace:	d03e      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0xd8>
 8003ad0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ad4:	f200 8087 	bhi.w	8003be6 <HAL_TIM_ConfigClockSource+0x170>
 8003ad8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003adc:	f000 8086 	beq.w	8003bec <HAL_TIM_ConfigClockSource+0x176>
 8003ae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ae4:	d87f      	bhi.n	8003be6 <HAL_TIM_ConfigClockSource+0x170>
 8003ae6:	2b70      	cmp	r3, #112	@ 0x70
 8003ae8:	d01a      	beq.n	8003b20 <HAL_TIM_ConfigClockSource+0xaa>
 8003aea:	2b70      	cmp	r3, #112	@ 0x70
 8003aec:	d87b      	bhi.n	8003be6 <HAL_TIM_ConfigClockSource+0x170>
 8003aee:	2b60      	cmp	r3, #96	@ 0x60
 8003af0:	d050      	beq.n	8003b94 <HAL_TIM_ConfigClockSource+0x11e>
 8003af2:	2b60      	cmp	r3, #96	@ 0x60
 8003af4:	d877      	bhi.n	8003be6 <HAL_TIM_ConfigClockSource+0x170>
 8003af6:	2b50      	cmp	r3, #80	@ 0x50
 8003af8:	d03c      	beq.n	8003b74 <HAL_TIM_ConfigClockSource+0xfe>
 8003afa:	2b50      	cmp	r3, #80	@ 0x50
 8003afc:	d873      	bhi.n	8003be6 <HAL_TIM_ConfigClockSource+0x170>
 8003afe:	2b40      	cmp	r3, #64	@ 0x40
 8003b00:	d058      	beq.n	8003bb4 <HAL_TIM_ConfigClockSource+0x13e>
 8003b02:	2b40      	cmp	r3, #64	@ 0x40
 8003b04:	d86f      	bhi.n	8003be6 <HAL_TIM_ConfigClockSource+0x170>
 8003b06:	2b30      	cmp	r3, #48	@ 0x30
 8003b08:	d064      	beq.n	8003bd4 <HAL_TIM_ConfigClockSource+0x15e>
 8003b0a:	2b30      	cmp	r3, #48	@ 0x30
 8003b0c:	d86b      	bhi.n	8003be6 <HAL_TIM_ConfigClockSource+0x170>
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d060      	beq.n	8003bd4 <HAL_TIM_ConfigClockSource+0x15e>
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	d867      	bhi.n	8003be6 <HAL_TIM_ConfigClockSource+0x170>
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d05c      	beq.n	8003bd4 <HAL_TIM_ConfigClockSource+0x15e>
 8003b1a:	2b10      	cmp	r3, #16
 8003b1c:	d05a      	beq.n	8003bd4 <HAL_TIM_ConfigClockSource+0x15e>
 8003b1e:	e062      	b.n	8003be6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b30:	f000 f9b2 	bl	8003e98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b42:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	609a      	str	r2, [r3, #8]
      break;
 8003b4c:	e04f      	b.n	8003bee <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b5e:	f000 f99b 	bl	8003e98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b70:	609a      	str	r2, [r3, #8]
      break;
 8003b72:	e03c      	b.n	8003bee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b80:	461a      	mov	r2, r3
 8003b82:	f000 f90f 	bl	8003da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2150      	movs	r1, #80	@ 0x50
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 f968 	bl	8003e62 <TIM_ITRx_SetConfig>
      break;
 8003b92:	e02c      	b.n	8003bee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f000 f92e 	bl	8003e02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2160      	movs	r1, #96	@ 0x60
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 f958 	bl	8003e62 <TIM_ITRx_SetConfig>
      break;
 8003bb2:	e01c      	b.n	8003bee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	f000 f8ef 	bl	8003da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2140      	movs	r1, #64	@ 0x40
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 f948 	bl	8003e62 <TIM_ITRx_SetConfig>
      break;
 8003bd2:	e00c      	b.n	8003bee <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4610      	mov	r0, r2
 8003be0:	f000 f93f 	bl	8003e62 <TIM_ITRx_SetConfig>
      break;
 8003be4:	e003      	b.n	8003bee <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
      break;
 8003bea:	e000      	b.n	8003bee <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003bec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a46      	ldr	r2, [pc, #280]	@ (8003d84 <TIM_Base_SetConfig+0x12c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d013      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c76:	d00f      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a43      	ldr	r2, [pc, #268]	@ (8003d88 <TIM_Base_SetConfig+0x130>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00b      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a42      	ldr	r2, [pc, #264]	@ (8003d8c <TIM_Base_SetConfig+0x134>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d007      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a41      	ldr	r2, [pc, #260]	@ (8003d90 <TIM_Base_SetConfig+0x138>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a40      	ldr	r2, [pc, #256]	@ (8003d94 <TIM_Base_SetConfig+0x13c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d108      	bne.n	8003caa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a35      	ldr	r2, [pc, #212]	@ (8003d84 <TIM_Base_SetConfig+0x12c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d01f      	beq.n	8003cf2 <TIM_Base_SetConfig+0x9a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cb8:	d01b      	beq.n	8003cf2 <TIM_Base_SetConfig+0x9a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a32      	ldr	r2, [pc, #200]	@ (8003d88 <TIM_Base_SetConfig+0x130>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d017      	beq.n	8003cf2 <TIM_Base_SetConfig+0x9a>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a31      	ldr	r2, [pc, #196]	@ (8003d8c <TIM_Base_SetConfig+0x134>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d013      	beq.n	8003cf2 <TIM_Base_SetConfig+0x9a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a30      	ldr	r2, [pc, #192]	@ (8003d90 <TIM_Base_SetConfig+0x138>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00f      	beq.n	8003cf2 <TIM_Base_SetConfig+0x9a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a2f      	ldr	r2, [pc, #188]	@ (8003d94 <TIM_Base_SetConfig+0x13c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00b      	beq.n	8003cf2 <TIM_Base_SetConfig+0x9a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8003d98 <TIM_Base_SetConfig+0x140>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d007      	beq.n	8003cf2 <TIM_Base_SetConfig+0x9a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a2d      	ldr	r2, [pc, #180]	@ (8003d9c <TIM_Base_SetConfig+0x144>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d003      	beq.n	8003cf2 <TIM_Base_SetConfig+0x9a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a2c      	ldr	r2, [pc, #176]	@ (8003da0 <TIM_Base_SetConfig+0x148>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d108      	bne.n	8003d04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a16      	ldr	r2, [pc, #88]	@ (8003d84 <TIM_Base_SetConfig+0x12c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00f      	beq.n	8003d50 <TIM_Base_SetConfig+0xf8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a18      	ldr	r2, [pc, #96]	@ (8003d94 <TIM_Base_SetConfig+0x13c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00b      	beq.n	8003d50 <TIM_Base_SetConfig+0xf8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a17      	ldr	r2, [pc, #92]	@ (8003d98 <TIM_Base_SetConfig+0x140>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d007      	beq.n	8003d50 <TIM_Base_SetConfig+0xf8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a16      	ldr	r2, [pc, #88]	@ (8003d9c <TIM_Base_SetConfig+0x144>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_Base_SetConfig+0xf8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a15      	ldr	r2, [pc, #84]	@ (8003da0 <TIM_Base_SetConfig+0x148>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d103      	bne.n	8003d58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d105      	bne.n	8003d76 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f023 0201 	bic.w	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	611a      	str	r2, [r3, #16]
  }
}
 8003d76:	bf00      	nop
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40012c00 	.word	0x40012c00
 8003d88:	40000400 	.word	0x40000400
 8003d8c:	40000800 	.word	0x40000800
 8003d90:	40000c00 	.word	0x40000c00
 8003d94:	40013400 	.word	0x40013400
 8003d98:	40014000 	.word	0x40014000
 8003d9c:	40014400 	.word	0x40014400
 8003da0:	40014800 	.word	0x40014800

08003da4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f023 0201 	bic.w	r2, r3, #1
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f023 030a 	bic.w	r3, r3, #10
 8003de0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	621a      	str	r2, [r3, #32]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b087      	sub	sp, #28
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	f023 0210 	bic.w	r2, r3, #16
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	031b      	lsls	r3, r3, #12
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	621a      	str	r2, [r3, #32]
}
 8003e56:	bf00      	nop
 8003e58:	371c      	adds	r7, #28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b085      	sub	sp, #20
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f043 0307 	orr.w	r3, r3, #7
 8003e84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	609a      	str	r2, [r3, #8]
}
 8003e8c:	bf00      	nop
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003eb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	021a      	lsls	r2, r3, #8
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	609a      	str	r2, [r3, #8]
}
 8003ecc:	bf00      	nop
 8003ece:	371c      	adds	r7, #28
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e068      	b.n	8003fc2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a2e      	ldr	r2, [pc, #184]	@ (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d004      	beq.n	8003f24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d108      	bne.n	8003f36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003f2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1e      	ldr	r2, [pc, #120]	@ (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d01d      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f62:	d018      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1b      	ldr	r2, [pc, #108]	@ (8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d013      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1a      	ldr	r2, [pc, #104]	@ (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00e      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a18      	ldr	r2, [pc, #96]	@ (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d009      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a13      	ldr	r2, [pc, #76]	@ (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d004      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a14      	ldr	r2, [pc, #80]	@ (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d10c      	bne.n	8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40012c00 	.word	0x40012c00
 8003fd4:	40013400 	.word	0x40013400
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	40000800 	.word	0x40000800
 8003fe0:	40000c00 	.word	0x40000c00
 8003fe4:	40014000 	.word	0x40014000

08003fe8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e040      	b.n	80040b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fd fb2e 	bl	80016a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2224      	movs	r2, #36	@ 0x24
 8004050:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0201 	bic.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fb6a 	bl	8004744 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f8af 	bl	80041d4 <UART_SetConfig>
 8004076:	4603      	mov	r3, r0
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e01b      	b.n	80040b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800408e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800409e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0201 	orr.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fbe9 	bl	8004888 <UART_CheckIdleState>
 80040b6:	4603      	mov	r3, r0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08a      	sub	sp, #40	@ 0x28
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	603b      	str	r3, [r7, #0]
 80040cc:	4613      	mov	r3, r2
 80040ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d177      	bne.n	80041c8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_UART_Transmit+0x24>
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e070      	b.n	80041ca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2221      	movs	r2, #33	@ 0x21
 80040f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040f6:	f7fd fc6d 	bl	80019d4 <HAL_GetTick>
 80040fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	88fa      	ldrh	r2, [r7, #6]
 8004100:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	88fa      	ldrh	r2, [r7, #6]
 8004108:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004114:	d108      	bne.n	8004128 <HAL_UART_Transmit+0x68>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d104      	bne.n	8004128 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	61bb      	str	r3, [r7, #24]
 8004126:	e003      	b.n	8004130 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800412c:	2300      	movs	r3, #0
 800412e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004130:	e02f      	b.n	8004192 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2200      	movs	r2, #0
 800413a:	2180      	movs	r1, #128	@ 0x80
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 fc4b 	bl	80049d8 <UART_WaitOnFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d004      	beq.n	8004152 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2220      	movs	r2, #32
 800414c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e03b      	b.n	80041ca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	881a      	ldrh	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004164:	b292      	uxth	r2, r2
 8004166:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	3302      	adds	r3, #2
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	e007      	b.n	8004180 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	781a      	ldrb	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3301      	adds	r3, #1
 800417e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1c9      	bne.n	8004132 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2200      	movs	r2, #0
 80041a6:	2140      	movs	r1, #64	@ 0x40
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 fc15 	bl	80049d8 <UART_WaitOnFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d004      	beq.n	80041be <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e005      	b.n	80041ca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	e000      	b.n	80041ca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80041c8:	2302      	movs	r3, #2
  }
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3720      	adds	r7, #32
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d8:	b08a      	sub	sp, #40	@ 0x28
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	431a      	orrs	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4ba4      	ldr	r3, [pc, #656]	@ (8004494 <UART_SetConfig+0x2c0>)
 8004204:	4013      	ands	r3, r2
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800420c:	430b      	orrs	r3, r1
 800420e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a99      	ldr	r2, [pc, #612]	@ (8004498 <UART_SetConfig+0x2c4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d004      	beq.n	8004240 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800423c:	4313      	orrs	r3, r2
 800423e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004250:	430a      	orrs	r2, r1
 8004252:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a90      	ldr	r2, [pc, #576]	@ (800449c <UART_SetConfig+0x2c8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d126      	bne.n	80042ac <UART_SetConfig+0xd8>
 800425e:	4b90      	ldr	r3, [pc, #576]	@ (80044a0 <UART_SetConfig+0x2cc>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	2b03      	cmp	r3, #3
 800426a:	d81b      	bhi.n	80042a4 <UART_SetConfig+0xd0>
 800426c:	a201      	add	r2, pc, #4	@ (adr r2, 8004274 <UART_SetConfig+0xa0>)
 800426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004272:	bf00      	nop
 8004274:	08004285 	.word	0x08004285
 8004278:	08004295 	.word	0x08004295
 800427c:	0800428d 	.word	0x0800428d
 8004280:	0800429d 	.word	0x0800429d
 8004284:	2301      	movs	r3, #1
 8004286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800428a:	e116      	b.n	80044ba <UART_SetConfig+0x2e6>
 800428c:	2302      	movs	r3, #2
 800428e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004292:	e112      	b.n	80044ba <UART_SetConfig+0x2e6>
 8004294:	2304      	movs	r3, #4
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800429a:	e10e      	b.n	80044ba <UART_SetConfig+0x2e6>
 800429c:	2308      	movs	r3, #8
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042a2:	e10a      	b.n	80044ba <UART_SetConfig+0x2e6>
 80042a4:	2310      	movs	r3, #16
 80042a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042aa:	e106      	b.n	80044ba <UART_SetConfig+0x2e6>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a7c      	ldr	r2, [pc, #496]	@ (80044a4 <UART_SetConfig+0x2d0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d138      	bne.n	8004328 <UART_SetConfig+0x154>
 80042b6:	4b7a      	ldr	r3, [pc, #488]	@ (80044a0 <UART_SetConfig+0x2cc>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042bc:	f003 030c 	and.w	r3, r3, #12
 80042c0:	2b0c      	cmp	r3, #12
 80042c2:	d82d      	bhi.n	8004320 <UART_SetConfig+0x14c>
 80042c4:	a201      	add	r2, pc, #4	@ (adr r2, 80042cc <UART_SetConfig+0xf8>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	08004301 	.word	0x08004301
 80042d0:	08004321 	.word	0x08004321
 80042d4:	08004321 	.word	0x08004321
 80042d8:	08004321 	.word	0x08004321
 80042dc:	08004311 	.word	0x08004311
 80042e0:	08004321 	.word	0x08004321
 80042e4:	08004321 	.word	0x08004321
 80042e8:	08004321 	.word	0x08004321
 80042ec:	08004309 	.word	0x08004309
 80042f0:	08004321 	.word	0x08004321
 80042f4:	08004321 	.word	0x08004321
 80042f8:	08004321 	.word	0x08004321
 80042fc:	08004319 	.word	0x08004319
 8004300:	2300      	movs	r3, #0
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004306:	e0d8      	b.n	80044ba <UART_SetConfig+0x2e6>
 8004308:	2302      	movs	r3, #2
 800430a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800430e:	e0d4      	b.n	80044ba <UART_SetConfig+0x2e6>
 8004310:	2304      	movs	r3, #4
 8004312:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004316:	e0d0      	b.n	80044ba <UART_SetConfig+0x2e6>
 8004318:	2308      	movs	r3, #8
 800431a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800431e:	e0cc      	b.n	80044ba <UART_SetConfig+0x2e6>
 8004320:	2310      	movs	r3, #16
 8004322:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004326:	e0c8      	b.n	80044ba <UART_SetConfig+0x2e6>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a5e      	ldr	r2, [pc, #376]	@ (80044a8 <UART_SetConfig+0x2d4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d125      	bne.n	800437e <UART_SetConfig+0x1aa>
 8004332:	4b5b      	ldr	r3, [pc, #364]	@ (80044a0 <UART_SetConfig+0x2cc>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004338:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800433c:	2b30      	cmp	r3, #48	@ 0x30
 800433e:	d016      	beq.n	800436e <UART_SetConfig+0x19a>
 8004340:	2b30      	cmp	r3, #48	@ 0x30
 8004342:	d818      	bhi.n	8004376 <UART_SetConfig+0x1a2>
 8004344:	2b20      	cmp	r3, #32
 8004346:	d00a      	beq.n	800435e <UART_SetConfig+0x18a>
 8004348:	2b20      	cmp	r3, #32
 800434a:	d814      	bhi.n	8004376 <UART_SetConfig+0x1a2>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <UART_SetConfig+0x182>
 8004350:	2b10      	cmp	r3, #16
 8004352:	d008      	beq.n	8004366 <UART_SetConfig+0x192>
 8004354:	e00f      	b.n	8004376 <UART_SetConfig+0x1a2>
 8004356:	2300      	movs	r3, #0
 8004358:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800435c:	e0ad      	b.n	80044ba <UART_SetConfig+0x2e6>
 800435e:	2302      	movs	r3, #2
 8004360:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004364:	e0a9      	b.n	80044ba <UART_SetConfig+0x2e6>
 8004366:	2304      	movs	r3, #4
 8004368:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800436c:	e0a5      	b.n	80044ba <UART_SetConfig+0x2e6>
 800436e:	2308      	movs	r3, #8
 8004370:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004374:	e0a1      	b.n	80044ba <UART_SetConfig+0x2e6>
 8004376:	2310      	movs	r3, #16
 8004378:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800437c:	e09d      	b.n	80044ba <UART_SetConfig+0x2e6>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a4a      	ldr	r2, [pc, #296]	@ (80044ac <UART_SetConfig+0x2d8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d125      	bne.n	80043d4 <UART_SetConfig+0x200>
 8004388:	4b45      	ldr	r3, [pc, #276]	@ (80044a0 <UART_SetConfig+0x2cc>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004392:	2bc0      	cmp	r3, #192	@ 0xc0
 8004394:	d016      	beq.n	80043c4 <UART_SetConfig+0x1f0>
 8004396:	2bc0      	cmp	r3, #192	@ 0xc0
 8004398:	d818      	bhi.n	80043cc <UART_SetConfig+0x1f8>
 800439a:	2b80      	cmp	r3, #128	@ 0x80
 800439c:	d00a      	beq.n	80043b4 <UART_SetConfig+0x1e0>
 800439e:	2b80      	cmp	r3, #128	@ 0x80
 80043a0:	d814      	bhi.n	80043cc <UART_SetConfig+0x1f8>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <UART_SetConfig+0x1d8>
 80043a6:	2b40      	cmp	r3, #64	@ 0x40
 80043a8:	d008      	beq.n	80043bc <UART_SetConfig+0x1e8>
 80043aa:	e00f      	b.n	80043cc <UART_SetConfig+0x1f8>
 80043ac:	2300      	movs	r3, #0
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043b2:	e082      	b.n	80044ba <UART_SetConfig+0x2e6>
 80043b4:	2302      	movs	r3, #2
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ba:	e07e      	b.n	80044ba <UART_SetConfig+0x2e6>
 80043bc:	2304      	movs	r3, #4
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043c2:	e07a      	b.n	80044ba <UART_SetConfig+0x2e6>
 80043c4:	2308      	movs	r3, #8
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ca:	e076      	b.n	80044ba <UART_SetConfig+0x2e6>
 80043cc:	2310      	movs	r3, #16
 80043ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043d2:	e072      	b.n	80044ba <UART_SetConfig+0x2e6>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a35      	ldr	r2, [pc, #212]	@ (80044b0 <UART_SetConfig+0x2dc>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d12a      	bne.n	8004434 <UART_SetConfig+0x260>
 80043de:	4b30      	ldr	r3, [pc, #192]	@ (80044a0 <UART_SetConfig+0x2cc>)
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ec:	d01a      	beq.n	8004424 <UART_SetConfig+0x250>
 80043ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043f2:	d81b      	bhi.n	800442c <UART_SetConfig+0x258>
 80043f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043f8:	d00c      	beq.n	8004414 <UART_SetConfig+0x240>
 80043fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043fe:	d815      	bhi.n	800442c <UART_SetConfig+0x258>
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <UART_SetConfig+0x238>
 8004404:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004408:	d008      	beq.n	800441c <UART_SetConfig+0x248>
 800440a:	e00f      	b.n	800442c <UART_SetConfig+0x258>
 800440c:	2300      	movs	r3, #0
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004412:	e052      	b.n	80044ba <UART_SetConfig+0x2e6>
 8004414:	2302      	movs	r3, #2
 8004416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800441a:	e04e      	b.n	80044ba <UART_SetConfig+0x2e6>
 800441c:	2304      	movs	r3, #4
 800441e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004422:	e04a      	b.n	80044ba <UART_SetConfig+0x2e6>
 8004424:	2308      	movs	r3, #8
 8004426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800442a:	e046      	b.n	80044ba <UART_SetConfig+0x2e6>
 800442c:	2310      	movs	r3, #16
 800442e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004432:	e042      	b.n	80044ba <UART_SetConfig+0x2e6>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a17      	ldr	r2, [pc, #92]	@ (8004498 <UART_SetConfig+0x2c4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d13a      	bne.n	80044b4 <UART_SetConfig+0x2e0>
 800443e:	4b18      	ldr	r3, [pc, #96]	@ (80044a0 <UART_SetConfig+0x2cc>)
 8004440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004444:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004448:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800444c:	d01a      	beq.n	8004484 <UART_SetConfig+0x2b0>
 800444e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004452:	d81b      	bhi.n	800448c <UART_SetConfig+0x2b8>
 8004454:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004458:	d00c      	beq.n	8004474 <UART_SetConfig+0x2a0>
 800445a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800445e:	d815      	bhi.n	800448c <UART_SetConfig+0x2b8>
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <UART_SetConfig+0x298>
 8004464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004468:	d008      	beq.n	800447c <UART_SetConfig+0x2a8>
 800446a:	e00f      	b.n	800448c <UART_SetConfig+0x2b8>
 800446c:	2300      	movs	r3, #0
 800446e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004472:	e022      	b.n	80044ba <UART_SetConfig+0x2e6>
 8004474:	2302      	movs	r3, #2
 8004476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800447a:	e01e      	b.n	80044ba <UART_SetConfig+0x2e6>
 800447c:	2304      	movs	r3, #4
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004482:	e01a      	b.n	80044ba <UART_SetConfig+0x2e6>
 8004484:	2308      	movs	r3, #8
 8004486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800448a:	e016      	b.n	80044ba <UART_SetConfig+0x2e6>
 800448c:	2310      	movs	r3, #16
 800448e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004492:	e012      	b.n	80044ba <UART_SetConfig+0x2e6>
 8004494:	efff69f3 	.word	0xefff69f3
 8004498:	40008000 	.word	0x40008000
 800449c:	40013800 	.word	0x40013800
 80044a0:	40021000 	.word	0x40021000
 80044a4:	40004400 	.word	0x40004400
 80044a8:	40004800 	.word	0x40004800
 80044ac:	40004c00 	.word	0x40004c00
 80044b0:	40005000 	.word	0x40005000
 80044b4:	2310      	movs	r3, #16
 80044b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a9f      	ldr	r2, [pc, #636]	@ (800473c <UART_SetConfig+0x568>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d17a      	bne.n	80045ba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d824      	bhi.n	8004516 <UART_SetConfig+0x342>
 80044cc:	a201      	add	r2, pc, #4	@ (adr r2, 80044d4 <UART_SetConfig+0x300>)
 80044ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d2:	bf00      	nop
 80044d4:	080044f9 	.word	0x080044f9
 80044d8:	08004517 	.word	0x08004517
 80044dc:	08004501 	.word	0x08004501
 80044e0:	08004517 	.word	0x08004517
 80044e4:	08004507 	.word	0x08004507
 80044e8:	08004517 	.word	0x08004517
 80044ec:	08004517 	.word	0x08004517
 80044f0:	08004517 	.word	0x08004517
 80044f4:	0800450f 	.word	0x0800450f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f8:	f7fe fb0c 	bl	8002b14 <HAL_RCC_GetPCLK1Freq>
 80044fc:	61f8      	str	r0, [r7, #28]
        break;
 80044fe:	e010      	b.n	8004522 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004500:	4b8f      	ldr	r3, [pc, #572]	@ (8004740 <UART_SetConfig+0x56c>)
 8004502:	61fb      	str	r3, [r7, #28]
        break;
 8004504:	e00d      	b.n	8004522 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004506:	f7fe fa6d 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 800450a:	61f8      	str	r0, [r7, #28]
        break;
 800450c:	e009      	b.n	8004522 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800450e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004512:	61fb      	str	r3, [r7, #28]
        break;
 8004514:	e005      	b.n	8004522 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004520:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80fb 	beq.w	8004720 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	4413      	add	r3, r2
 8004534:	69fa      	ldr	r2, [r7, #28]
 8004536:	429a      	cmp	r2, r3
 8004538:	d305      	bcc.n	8004546 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004540:	69fa      	ldr	r2, [r7, #28]
 8004542:	429a      	cmp	r2, r3
 8004544:	d903      	bls.n	800454e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800454c:	e0e8      	b.n	8004720 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	2200      	movs	r2, #0
 8004552:	461c      	mov	r4, r3
 8004554:	4615      	mov	r5, r2
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	022b      	lsls	r3, r5, #8
 8004560:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004564:	0222      	lsls	r2, r4, #8
 8004566:	68f9      	ldr	r1, [r7, #12]
 8004568:	6849      	ldr	r1, [r1, #4]
 800456a:	0849      	lsrs	r1, r1, #1
 800456c:	2000      	movs	r0, #0
 800456e:	4688      	mov	r8, r1
 8004570:	4681      	mov	r9, r0
 8004572:	eb12 0a08 	adds.w	sl, r2, r8
 8004576:	eb43 0b09 	adc.w	fp, r3, r9
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004588:	4650      	mov	r0, sl
 800458a:	4659      	mov	r1, fp
 800458c:	f7fc fa66 	bl	8000a5c <__aeabi_uldivmod>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4613      	mov	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800459e:	d308      	bcc.n	80045b2 <UART_SetConfig+0x3de>
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045a6:	d204      	bcs.n	80045b2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	60da      	str	r2, [r3, #12]
 80045b0:	e0b6      	b.n	8004720 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80045b8:	e0b2      	b.n	8004720 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045c2:	d15e      	bne.n	8004682 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80045c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d828      	bhi.n	800461e <UART_SetConfig+0x44a>
 80045cc:	a201      	add	r2, pc, #4	@ (adr r2, 80045d4 <UART_SetConfig+0x400>)
 80045ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d2:	bf00      	nop
 80045d4:	080045f9 	.word	0x080045f9
 80045d8:	08004601 	.word	0x08004601
 80045dc:	08004609 	.word	0x08004609
 80045e0:	0800461f 	.word	0x0800461f
 80045e4:	0800460f 	.word	0x0800460f
 80045e8:	0800461f 	.word	0x0800461f
 80045ec:	0800461f 	.word	0x0800461f
 80045f0:	0800461f 	.word	0x0800461f
 80045f4:	08004617 	.word	0x08004617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045f8:	f7fe fa8c 	bl	8002b14 <HAL_RCC_GetPCLK1Freq>
 80045fc:	61f8      	str	r0, [r7, #28]
        break;
 80045fe:	e014      	b.n	800462a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004600:	f7fe fa9e 	bl	8002b40 <HAL_RCC_GetPCLK2Freq>
 8004604:	61f8      	str	r0, [r7, #28]
        break;
 8004606:	e010      	b.n	800462a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004608:	4b4d      	ldr	r3, [pc, #308]	@ (8004740 <UART_SetConfig+0x56c>)
 800460a:	61fb      	str	r3, [r7, #28]
        break;
 800460c:	e00d      	b.n	800462a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800460e:	f7fe f9e9 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 8004612:	61f8      	str	r0, [r7, #28]
        break;
 8004614:	e009      	b.n	800462a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004616:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800461a:	61fb      	str	r3, [r7, #28]
        break;
 800461c:	e005      	b.n	800462a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004628:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d077      	beq.n	8004720 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	005a      	lsls	r2, r3, #1
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	085b      	lsrs	r3, r3, #1
 800463a:	441a      	add	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	fbb2 f3f3 	udiv	r3, r2, r3
 8004644:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b0f      	cmp	r3, #15
 800464a:	d916      	bls.n	800467a <UART_SetConfig+0x4a6>
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004652:	d212      	bcs.n	800467a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	b29b      	uxth	r3, r3
 8004658:	f023 030f 	bic.w	r3, r3, #15
 800465c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	085b      	lsrs	r3, r3, #1
 8004662:	b29b      	uxth	r3, r3
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	b29a      	uxth	r2, r3
 800466a:	8afb      	ldrh	r3, [r7, #22]
 800466c:	4313      	orrs	r3, r2
 800466e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	8afa      	ldrh	r2, [r7, #22]
 8004676:	60da      	str	r2, [r3, #12]
 8004678:	e052      	b.n	8004720 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004680:	e04e      	b.n	8004720 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004682:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004686:	2b08      	cmp	r3, #8
 8004688:	d827      	bhi.n	80046da <UART_SetConfig+0x506>
 800468a:	a201      	add	r2, pc, #4	@ (adr r2, 8004690 <UART_SetConfig+0x4bc>)
 800468c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004690:	080046b5 	.word	0x080046b5
 8004694:	080046bd 	.word	0x080046bd
 8004698:	080046c5 	.word	0x080046c5
 800469c:	080046db 	.word	0x080046db
 80046a0:	080046cb 	.word	0x080046cb
 80046a4:	080046db 	.word	0x080046db
 80046a8:	080046db 	.word	0x080046db
 80046ac:	080046db 	.word	0x080046db
 80046b0:	080046d3 	.word	0x080046d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b4:	f7fe fa2e 	bl	8002b14 <HAL_RCC_GetPCLK1Freq>
 80046b8:	61f8      	str	r0, [r7, #28]
        break;
 80046ba:	e014      	b.n	80046e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046bc:	f7fe fa40 	bl	8002b40 <HAL_RCC_GetPCLK2Freq>
 80046c0:	61f8      	str	r0, [r7, #28]
        break;
 80046c2:	e010      	b.n	80046e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004740 <UART_SetConfig+0x56c>)
 80046c6:	61fb      	str	r3, [r7, #28]
        break;
 80046c8:	e00d      	b.n	80046e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ca:	f7fe f98b 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 80046ce:	61f8      	str	r0, [r7, #28]
        break;
 80046d0:	e009      	b.n	80046e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046d6:	61fb      	str	r3, [r7, #28]
        break;
 80046d8:	e005      	b.n	80046e6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046e4:	bf00      	nop
    }

    if (pclk != 0U)
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d019      	beq.n	8004720 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	085a      	lsrs	r2, r3, #1
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	441a      	add	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	2b0f      	cmp	r3, #15
 8004704:	d909      	bls.n	800471a <UART_SetConfig+0x546>
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800470c:	d205      	bcs.n	800471a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	60da      	str	r2, [r3, #12]
 8004718:	e002      	b.n	8004720 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800472c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004730:	4618      	mov	r0, r3
 8004732:	3728      	adds	r7, #40	@ 0x28
 8004734:	46bd      	mov	sp, r7
 8004736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800473a:	bf00      	nop
 800473c:	40008000 	.word	0x40008000
 8004740:	00f42400 	.word	0x00f42400

08004744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01a      	beq.n	800485a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004842:	d10a      	bne.n	800485a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	605a      	str	r2, [r3, #4]
  }
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b098      	sub	sp, #96	@ 0x60
 800488c:	af02      	add	r7, sp, #8
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004898:	f7fd f89c 	bl	80019d4 <HAL_GetTick>
 800489c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d12e      	bne.n	800490a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b4:	2200      	movs	r2, #0
 80048b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f88c 	bl	80049d8 <UART_WaitOnFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d021      	beq.n	800490a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048da:	653b      	str	r3, [r7, #80]	@ 0x50
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	461a      	mov	r2, r3
 80048e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80048e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e6      	bne.n	80048c6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e062      	b.n	80049d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b04      	cmp	r3, #4
 8004916:	d149      	bne.n	80049ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004918:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004920:	2200      	movs	r2, #0
 8004922:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f856 	bl	80049d8 <UART_WaitOnFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d03c      	beq.n	80049ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	623b      	str	r3, [r7, #32]
   return(result);
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004946:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004950:	633b      	str	r3, [r7, #48]	@ 0x30
 8004952:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800495e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e6      	bne.n	8004932 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3308      	adds	r3, #8
 800496a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	e853 3f00 	ldrex	r3, [r3]
 8004972:	60fb      	str	r3, [r7, #12]
   return(result);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0301 	bic.w	r3, r3, #1
 800497a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3308      	adds	r3, #8
 8004982:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004984:	61fa      	str	r2, [r7, #28]
 8004986:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004988:	69b9      	ldr	r1, [r7, #24]
 800498a:	69fa      	ldr	r2, [r7, #28]
 800498c:	e841 2300 	strex	r3, r2, [r1]
 8004990:	617b      	str	r3, [r7, #20]
   return(result);
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e5      	bne.n	8004964 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e011      	b.n	80049d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3758      	adds	r7, #88	@ 0x58
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	4613      	mov	r3, r2
 80049e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e8:	e04f      	b.n	8004a8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f0:	d04b      	beq.n	8004a8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f2:	f7fc ffef 	bl	80019d4 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d302      	bcc.n	8004a08 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e04e      	b.n	8004aaa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d037      	beq.n	8004a8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b80      	cmp	r3, #128	@ 0x80
 8004a1e:	d034      	beq.n	8004a8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b40      	cmp	r3, #64	@ 0x40
 8004a24:	d031      	beq.n	8004a8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d110      	bne.n	8004a56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2208      	movs	r2, #8
 8004a3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 f838 	bl	8004ab2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2208      	movs	r2, #8
 8004a46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e029      	b.n	8004aaa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a64:	d111      	bne.n	8004a8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 f81e 	bl	8004ab2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e00f      	b.n	8004aaa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69da      	ldr	r2, [r3, #28]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4013      	ands	r3, r2
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	bf0c      	ite	eq
 8004a9a:	2301      	moveq	r3, #1
 8004a9c:	2300      	movne	r3, #0
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d0a0      	beq.n	80049ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b095      	sub	sp, #84	@ 0x54
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac2:	e853 3f00 	ldrex	r3, [r3]
 8004ac6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ad8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ada:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004adc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ade:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ae0:	e841 2300 	strex	r3, r2, [r1]
 8004ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e6      	bne.n	8004aba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3308      	adds	r3, #8
 8004af2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	f023 0301 	bic.w	r3, r3, #1
 8004b02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e5      	bne.n	8004aec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d118      	bne.n	8004b5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f023 0310 	bic.w	r3, r3, #16
 8004b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b46:	61bb      	str	r3, [r7, #24]
 8004b48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	6979      	ldr	r1, [r7, #20]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	613b      	str	r3, [r7, #16]
   return(result);
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e6      	bne.n	8004b28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b6e:	bf00      	nop
 8004b70:	3754      	adds	r7, #84	@ 0x54
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b085      	sub	sp, #20
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	4603      	mov	r3, r0
 8004b82:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004b84:	2300      	movs	r3, #0
 8004b86:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004b88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b8c:	2b84      	cmp	r3, #132	@ 0x84
 8004b8e:	d005      	beq.n	8004b9c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004b90:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	3303      	adds	r3, #3
 8004b9a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004bae:	f000 fafd 	bl	80051ac <vTaskStartScheduler>
  
  return osOK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bba:	b089      	sub	sp, #36	@ 0x24
 8004bbc:	af04      	add	r7, sp, #16
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d020      	beq.n	8004c0c <osThreadCreate+0x54>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d01c      	beq.n	8004c0c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685c      	ldr	r4, [r3, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691e      	ldr	r6, [r3, #16]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff ffc8 	bl	8004b7a <makeFreeRtosPriority>
 8004bea:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bf4:	9202      	str	r2, [sp, #8]
 8004bf6:	9301      	str	r3, [sp, #4]
 8004bf8:	9100      	str	r1, [sp, #0]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	4632      	mov	r2, r6
 8004bfe:	4629      	mov	r1, r5
 8004c00:	4620      	mov	r0, r4
 8004c02:	f000 f8ed 	bl	8004de0 <xTaskCreateStatic>
 8004c06:	4603      	mov	r3, r0
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	e01c      	b.n	8004c46 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685c      	ldr	r4, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c18:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff ffaa 	bl	8004b7a <makeFreeRtosPriority>
 8004c26:	4602      	mov	r2, r0
 8004c28:	f107 030c 	add.w	r3, r7, #12
 8004c2c:	9301      	str	r3, [sp, #4]
 8004c2e:	9200      	str	r2, [sp, #0]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	4632      	mov	r2, r6
 8004c34:	4629      	mov	r1, r5
 8004c36:	4620      	mov	r0, r4
 8004c38:	f000 f932 	bl	8004ea0 <xTaskCreate>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d001      	beq.n	8004c46 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e000      	b.n	8004c48 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004c46:	68fb      	ldr	r3, [r7, #12]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c50 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <osDelay+0x16>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	e000      	b.n	8004c68 <osDelay+0x18>
 8004c66:	2301      	movs	r3, #1
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fa69 	bl	8005140 <vTaskDelay>
  
  return osOK;
 8004c6e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f103 0208 	add.w	r2, r3, #8
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f103 0208 	add.w	r2, r3, #8
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f103 0208 	add.w	r2, r3, #8
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b085      	sub	sp, #20
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	601a      	str	r2, [r3, #0]
}
 8004d0e:	bf00      	nop
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d30:	d103      	bne.n	8004d3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	e00c      	b.n	8004d54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	e002      	b.n	8004d48 <vListInsert+0x2e>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d2f6      	bcs.n	8004d42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	601a      	str	r2, [r3, #0]
}
 8004d80:	bf00      	nop
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	6892      	ldr	r2, [r2, #8]
 8004da2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6852      	ldr	r2, [r2, #4]
 8004dac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d103      	bne.n	8004dc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	1e5a      	subs	r2, r3, #1
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08e      	sub	sp, #56	@ 0x38
 8004de4:	af04      	add	r7, sp, #16
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e06:	bf00      	nop
 8004e08:	bf00      	nop
 8004e0a:	e7fd      	b.n	8004e08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10b      	bne.n	8004e2a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	61fb      	str	r3, [r7, #28]
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop
 8004e28:	e7fd      	b.n	8004e26 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e2a:	23a0      	movs	r3, #160	@ 0xa0
 8004e2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2ba0      	cmp	r3, #160	@ 0xa0
 8004e32:	d00b      	beq.n	8004e4c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	61bb      	str	r3, [r7, #24]
}
 8004e46:	bf00      	nop
 8004e48:	bf00      	nop
 8004e4a:	e7fd      	b.n	8004e48 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d01e      	beq.n	8004e92 <xTaskCreateStatic+0xb2>
 8004e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01b      	beq.n	8004e92 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e62:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	9303      	str	r3, [sp, #12]
 8004e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e72:	9302      	str	r3, [sp, #8]
 8004e74:	f107 0314 	add.w	r3, r7, #20
 8004e78:	9301      	str	r3, [sp, #4]
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f851 	bl	8004f2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e8c:	f000 f8ee 	bl	800506c <prvAddNewTaskToReadyList>
 8004e90:	e001      	b.n	8004e96 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e96:	697b      	ldr	r3, [r7, #20]
	}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3728      	adds	r7, #40	@ 0x28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08c      	sub	sp, #48	@ 0x30
 8004ea4:	af04      	add	r7, sp, #16
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	4613      	mov	r3, r2
 8004eae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004eb0:	88fb      	ldrh	r3, [r7, #6]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 feff 	bl	8005cb8 <pvPortMalloc>
 8004eba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00e      	beq.n	8004ee0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ec2:	20a0      	movs	r0, #160	@ 0xa0
 8004ec4:	f000 fef8 	bl	8005cb8 <pvPortMalloc>
 8004ec8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ed6:	e005      	b.n	8004ee4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ed8:	6978      	ldr	r0, [r7, #20]
 8004eda:	f000 ffbb 	bl	8005e54 <vPortFree>
 8004ede:	e001      	b.n	8004ee4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d017      	beq.n	8004f1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ef2:	88fa      	ldrh	r2, [r7, #6]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	9303      	str	r3, [sp, #12]
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	9302      	str	r3, [sp, #8]
 8004efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efe:	9301      	str	r3, [sp, #4]
 8004f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 f80f 	bl	8004f2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f0e:	69f8      	ldr	r0, [r7, #28]
 8004f10:	f000 f8ac 	bl	800506c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f14:	2301      	movs	r3, #1
 8004f16:	61bb      	str	r3, [r7, #24]
 8004f18:	e002      	b.n	8004f20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f20:	69bb      	ldr	r3, [r7, #24]
	}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f44:	3b01      	subs	r3, #1
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	f023 0307 	bic.w	r3, r3, #7
 8004f52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00b      	beq.n	8004f76 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	617b      	str	r3, [r7, #20]
}
 8004f70:	bf00      	nop
 8004f72:	bf00      	nop
 8004f74:	e7fd      	b.n	8004f72 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01f      	beq.n	8004fbc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61fb      	str	r3, [r7, #28]
 8004f80:	e012      	b.n	8004fa8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	4413      	add	r3, r2
 8004f88:	7819      	ldrb	r1, [r3, #0]
 8004f8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	4413      	add	r3, r2
 8004f90:	3334      	adds	r3, #52	@ 0x34
 8004f92:	460a      	mov	r2, r1
 8004f94:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d006      	beq.n	8004fb0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	61fb      	str	r3, [r7, #28]
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	2b0f      	cmp	r3, #15
 8004fac:	d9e9      	bls.n	8004f82 <prvInitialiseNewTask+0x56>
 8004fae:	e000      	b.n	8004fb2 <prvInitialiseNewTask+0x86>
			{
				break;
 8004fb0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fba:	e003      	b.n	8004fc4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc6:	2b06      	cmp	r3, #6
 8004fc8:	d901      	bls.n	8004fce <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fca:	2306      	movs	r3, #6
 8004fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fd8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fdc:	2200      	movs	r2, #0
 8004fde:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff fe67 	bl	8004cb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fec:	3318      	adds	r3, #24
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff fe62 	bl	8004cb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ff8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffc:	f1c3 0207 	rsb	r2, r3, #7
 8005000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005002:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005008:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800500a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500c:	2200      	movs	r2, #0
 800500e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005014:	2200      	movs	r2, #0
 8005016:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800501a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501c:	334c      	adds	r3, #76	@ 0x4c
 800501e:	224c      	movs	r2, #76	@ 0x4c
 8005020:	2100      	movs	r1, #0
 8005022:	4618      	mov	r0, r3
 8005024:	f001 f856 	bl	80060d4 <memset>
 8005028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502a:	4a0d      	ldr	r2, [pc, #52]	@ (8005060 <prvInitialiseNewTask+0x134>)
 800502c:	651a      	str	r2, [r3, #80]	@ 0x50
 800502e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005030:	4a0c      	ldr	r2, [pc, #48]	@ (8005064 <prvInitialiseNewTask+0x138>)
 8005032:	655a      	str	r2, [r3, #84]	@ 0x54
 8005034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005036:	4a0c      	ldr	r2, [pc, #48]	@ (8005068 <prvInitialiseNewTask+0x13c>)
 8005038:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	68f9      	ldr	r1, [r7, #12]
 800503e:	69b8      	ldr	r0, [r7, #24]
 8005040:	f000 fc2a 	bl	8005898 <pxPortInitialiseStack>
 8005044:	4602      	mov	r2, r0
 8005046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005048:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800504a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005056:	bf00      	nop
 8005058:	3720      	adds	r7, #32
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	200045e4 	.word	0x200045e4
 8005064:	2000464c 	.word	0x2000464c
 8005068:	200046b4 	.word	0x200046b4

0800506c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005074:	f000 fd40 	bl	8005af8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005078:	4b2a      	ldr	r3, [pc, #168]	@ (8005124 <prvAddNewTaskToReadyList+0xb8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3301      	adds	r3, #1
 800507e:	4a29      	ldr	r2, [pc, #164]	@ (8005124 <prvAddNewTaskToReadyList+0xb8>)
 8005080:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005082:	4b29      	ldr	r3, [pc, #164]	@ (8005128 <prvAddNewTaskToReadyList+0xbc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d109      	bne.n	800509e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800508a:	4a27      	ldr	r2, [pc, #156]	@ (8005128 <prvAddNewTaskToReadyList+0xbc>)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005090:	4b24      	ldr	r3, [pc, #144]	@ (8005124 <prvAddNewTaskToReadyList+0xb8>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d110      	bne.n	80050ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005098:	f000 fad4 	bl	8005644 <prvInitialiseTaskLists>
 800509c:	e00d      	b.n	80050ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800509e:	4b23      	ldr	r3, [pc, #140]	@ (800512c <prvAddNewTaskToReadyList+0xc0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d109      	bne.n	80050ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050a6:	4b20      	ldr	r3, [pc, #128]	@ (8005128 <prvAddNewTaskToReadyList+0xbc>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d802      	bhi.n	80050ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005128 <prvAddNewTaskToReadyList+0xbc>)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005130 <prvAddNewTaskToReadyList+0xc4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3301      	adds	r3, #1
 80050c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005130 <prvAddNewTaskToReadyList+0xc4>)
 80050c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c8:	2201      	movs	r2, #1
 80050ca:	409a      	lsls	r2, r3
 80050cc:	4b19      	ldr	r3, [pc, #100]	@ (8005134 <prvAddNewTaskToReadyList+0xc8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	4a18      	ldr	r2, [pc, #96]	@ (8005134 <prvAddNewTaskToReadyList+0xc8>)
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050da:	4613      	mov	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4a15      	ldr	r2, [pc, #84]	@ (8005138 <prvAddNewTaskToReadyList+0xcc>)
 80050e4:	441a      	add	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	3304      	adds	r3, #4
 80050ea:	4619      	mov	r1, r3
 80050ec:	4610      	mov	r0, r2
 80050ee:	f7ff fdf0 	bl	8004cd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050f2:	f000 fd33 	bl	8005b5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050f6:	4b0d      	ldr	r3, [pc, #52]	@ (800512c <prvAddNewTaskToReadyList+0xc0>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00e      	beq.n	800511c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005128 <prvAddNewTaskToReadyList+0xbc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005108:	429a      	cmp	r2, r3
 800510a:	d207      	bcs.n	800511c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800510c:	4b0b      	ldr	r3, [pc, #44]	@ (800513c <prvAddNewTaskToReadyList+0xd0>)
 800510e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800511c:	bf00      	nop
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	20000590 	.word	0x20000590
 8005128:	20000490 	.word	0x20000490
 800512c:	2000059c 	.word	0x2000059c
 8005130:	200005ac 	.word	0x200005ac
 8005134:	20000598 	.word	0x20000598
 8005138:	20000494 	.word	0x20000494
 800513c:	e000ed04 	.word	0xe000ed04

08005140 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005148:	2300      	movs	r3, #0
 800514a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d018      	beq.n	8005184 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005152:	4b14      	ldr	r3, [pc, #80]	@ (80051a4 <vTaskDelay+0x64>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00b      	beq.n	8005172 <vTaskDelay+0x32>
	__asm volatile
 800515a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	60bb      	str	r3, [r7, #8]
}
 800516c:	bf00      	nop
 800516e:	bf00      	nop
 8005170:	e7fd      	b.n	800516e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005172:	f000 f885 	bl	8005280 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005176:	2100      	movs	r1, #0
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fb27 	bl	80057cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800517e:	f000 f88d 	bl	800529c <xTaskResumeAll>
 8005182:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d107      	bne.n	800519a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800518a:	4b07      	ldr	r3, [pc, #28]	@ (80051a8 <vTaskDelay+0x68>)
 800518c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800519a:	bf00      	nop
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	200005b8 	.word	0x200005b8
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08a      	sub	sp, #40	@ 0x28
 80051b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051ba:	463a      	mov	r2, r7
 80051bc:	1d39      	adds	r1, r7, #4
 80051be:	f107 0308 	add.w	r3, r7, #8
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fb fdc2 	bl	8000d4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80051c8:	6839      	ldr	r1, [r7, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	9202      	str	r2, [sp, #8]
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	2300      	movs	r3, #0
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	2300      	movs	r3, #0
 80051d8:	460a      	mov	r2, r1
 80051da:	4921      	ldr	r1, [pc, #132]	@ (8005260 <vTaskStartScheduler+0xb4>)
 80051dc:	4821      	ldr	r0, [pc, #132]	@ (8005264 <vTaskStartScheduler+0xb8>)
 80051de:	f7ff fdff 	bl	8004de0 <xTaskCreateStatic>
 80051e2:	4603      	mov	r3, r0
 80051e4:	4a20      	ldr	r2, [pc, #128]	@ (8005268 <vTaskStartScheduler+0xbc>)
 80051e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051e8:	4b1f      	ldr	r3, [pc, #124]	@ (8005268 <vTaskStartScheduler+0xbc>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051f0:	2301      	movs	r3, #1
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	e001      	b.n	80051fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d11b      	bne.n	8005238 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	613b      	str	r3, [r7, #16]
}
 8005212:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005214:	4b15      	ldr	r3, [pc, #84]	@ (800526c <vTaskStartScheduler+0xc0>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	334c      	adds	r3, #76	@ 0x4c
 800521a:	4a15      	ldr	r2, [pc, #84]	@ (8005270 <vTaskStartScheduler+0xc4>)
 800521c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800521e:	4b15      	ldr	r3, [pc, #84]	@ (8005274 <vTaskStartScheduler+0xc8>)
 8005220:	f04f 32ff 	mov.w	r2, #4294967295
 8005224:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005226:	4b14      	ldr	r3, [pc, #80]	@ (8005278 <vTaskStartScheduler+0xcc>)
 8005228:	2201      	movs	r2, #1
 800522a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800522c:	4b13      	ldr	r3, [pc, #76]	@ (800527c <vTaskStartScheduler+0xd0>)
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005232:	f000 fbbd 	bl	80059b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005236:	e00f      	b.n	8005258 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523e:	d10b      	bne.n	8005258 <vTaskStartScheduler+0xac>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	60fb      	str	r3, [r7, #12]
}
 8005252:	bf00      	nop
 8005254:	bf00      	nop
 8005256:	e7fd      	b.n	8005254 <vTaskStartScheduler+0xa8>
}
 8005258:	bf00      	nop
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	08006b2c 	.word	0x08006b2c
 8005264:	08005615 	.word	0x08005615
 8005268:	200005b4 	.word	0x200005b4
 800526c:	20000490 	.word	0x20000490
 8005270:	20000010 	.word	0x20000010
 8005274:	200005b0 	.word	0x200005b0
 8005278:	2000059c 	.word	0x2000059c
 800527c:	20000594 	.word	0x20000594

08005280 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005284:	4b04      	ldr	r3, [pc, #16]	@ (8005298 <vTaskSuspendAll+0x18>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3301      	adds	r3, #1
 800528a:	4a03      	ldr	r2, [pc, #12]	@ (8005298 <vTaskSuspendAll+0x18>)
 800528c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800528e:	bf00      	nop
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	200005b8 	.word	0x200005b8

0800529c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052a6:	2300      	movs	r3, #0
 80052a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052aa:	4b42      	ldr	r3, [pc, #264]	@ (80053b4 <xTaskResumeAll+0x118>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10b      	bne.n	80052ca <xTaskResumeAll+0x2e>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	603b      	str	r3, [r7, #0]
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	e7fd      	b.n	80052c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052ca:	f000 fc15 	bl	8005af8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052ce:	4b39      	ldr	r3, [pc, #228]	@ (80053b4 <xTaskResumeAll+0x118>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	4a37      	ldr	r2, [pc, #220]	@ (80053b4 <xTaskResumeAll+0x118>)
 80052d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052d8:	4b36      	ldr	r3, [pc, #216]	@ (80053b4 <xTaskResumeAll+0x118>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d161      	bne.n	80053a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052e0:	4b35      	ldr	r3, [pc, #212]	@ (80053b8 <xTaskResumeAll+0x11c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d05d      	beq.n	80053a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052e8:	e02e      	b.n	8005348 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ea:	4b34      	ldr	r3, [pc, #208]	@ (80053bc <xTaskResumeAll+0x120>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3318      	adds	r3, #24
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff fd48 	bl	8004d8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	3304      	adds	r3, #4
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff fd43 	bl	8004d8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530a:	2201      	movs	r2, #1
 800530c:	409a      	lsls	r2, r3
 800530e:	4b2c      	ldr	r3, [pc, #176]	@ (80053c0 <xTaskResumeAll+0x124>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4313      	orrs	r3, r2
 8005314:	4a2a      	ldr	r2, [pc, #168]	@ (80053c0 <xTaskResumeAll+0x124>)
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800531c:	4613      	mov	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4a27      	ldr	r2, [pc, #156]	@ (80053c4 <xTaskResumeAll+0x128>)
 8005326:	441a      	add	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3304      	adds	r3, #4
 800532c:	4619      	mov	r1, r3
 800532e:	4610      	mov	r0, r2
 8005330:	f7ff fccf 	bl	8004cd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005338:	4b23      	ldr	r3, [pc, #140]	@ (80053c8 <xTaskResumeAll+0x12c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533e:	429a      	cmp	r2, r3
 8005340:	d302      	bcc.n	8005348 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005342:	4b22      	ldr	r3, [pc, #136]	@ (80053cc <xTaskResumeAll+0x130>)
 8005344:	2201      	movs	r2, #1
 8005346:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005348:	4b1c      	ldr	r3, [pc, #112]	@ (80053bc <xTaskResumeAll+0x120>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1cc      	bne.n	80052ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005356:	f000 fa19 	bl	800578c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800535a:	4b1d      	ldr	r3, [pc, #116]	@ (80053d0 <xTaskResumeAll+0x134>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d010      	beq.n	8005388 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005366:	f000 f837 	bl	80053d8 <xTaskIncrementTick>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005370:	4b16      	ldr	r3, [pc, #88]	@ (80053cc <xTaskResumeAll+0x130>)
 8005372:	2201      	movs	r2, #1
 8005374:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3b01      	subs	r3, #1
 800537a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f1      	bne.n	8005366 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005382:	4b13      	ldr	r3, [pc, #76]	@ (80053d0 <xTaskResumeAll+0x134>)
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005388:	4b10      	ldr	r3, [pc, #64]	@ (80053cc <xTaskResumeAll+0x130>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d009      	beq.n	80053a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005390:	2301      	movs	r3, #1
 8005392:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005394:	4b0f      	ldr	r3, [pc, #60]	@ (80053d4 <xTaskResumeAll+0x138>)
 8005396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053a4:	f000 fbda 	bl	8005b5c <vPortExitCritical>

	return xAlreadyYielded;
 80053a8:	68bb      	ldr	r3, [r7, #8]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	200005b8 	.word	0x200005b8
 80053b8:	20000590 	.word	0x20000590
 80053bc:	20000550 	.word	0x20000550
 80053c0:	20000598 	.word	0x20000598
 80053c4:	20000494 	.word	0x20000494
 80053c8:	20000490 	.word	0x20000490
 80053cc:	200005a4 	.word	0x200005a4
 80053d0:	200005a0 	.word	0x200005a0
 80053d4:	e000ed04 	.word	0xe000ed04

080053d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053de:	2300      	movs	r3, #0
 80053e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053e2:	4b4f      	ldr	r3, [pc, #316]	@ (8005520 <xTaskIncrementTick+0x148>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f040 808f 	bne.w	800550a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053ec:	4b4d      	ldr	r3, [pc, #308]	@ (8005524 <xTaskIncrementTick+0x14c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3301      	adds	r3, #1
 80053f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053f4:	4a4b      	ldr	r2, [pc, #300]	@ (8005524 <xTaskIncrementTick+0x14c>)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d121      	bne.n	8005444 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005400:	4b49      	ldr	r3, [pc, #292]	@ (8005528 <xTaskIncrementTick+0x150>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00b      	beq.n	8005422 <xTaskIncrementTick+0x4a>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	603b      	str	r3, [r7, #0]
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	e7fd      	b.n	800541e <xTaskIncrementTick+0x46>
 8005422:	4b41      	ldr	r3, [pc, #260]	@ (8005528 <xTaskIncrementTick+0x150>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	4b40      	ldr	r3, [pc, #256]	@ (800552c <xTaskIncrementTick+0x154>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a3e      	ldr	r2, [pc, #248]	@ (8005528 <xTaskIncrementTick+0x150>)
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	4a3e      	ldr	r2, [pc, #248]	@ (800552c <xTaskIncrementTick+0x154>)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	4b3e      	ldr	r3, [pc, #248]	@ (8005530 <xTaskIncrementTick+0x158>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3301      	adds	r3, #1
 800543c:	4a3c      	ldr	r2, [pc, #240]	@ (8005530 <xTaskIncrementTick+0x158>)
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	f000 f9a4 	bl	800578c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005444:	4b3b      	ldr	r3, [pc, #236]	@ (8005534 <xTaskIncrementTick+0x15c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	429a      	cmp	r2, r3
 800544c:	d348      	bcc.n	80054e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800544e:	4b36      	ldr	r3, [pc, #216]	@ (8005528 <xTaskIncrementTick+0x150>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d104      	bne.n	8005462 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005458:	4b36      	ldr	r3, [pc, #216]	@ (8005534 <xTaskIncrementTick+0x15c>)
 800545a:	f04f 32ff 	mov.w	r2, #4294967295
 800545e:	601a      	str	r2, [r3, #0]
					break;
 8005460:	e03e      	b.n	80054e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005462:	4b31      	ldr	r3, [pc, #196]	@ (8005528 <xTaskIncrementTick+0x150>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	429a      	cmp	r2, r3
 8005478:	d203      	bcs.n	8005482 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800547a:	4a2e      	ldr	r2, [pc, #184]	@ (8005534 <xTaskIncrementTick+0x15c>)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005480:	e02e      	b.n	80054e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	3304      	adds	r3, #4
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff fc80 	bl	8004d8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005490:	2b00      	cmp	r3, #0
 8005492:	d004      	beq.n	800549e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	3318      	adds	r3, #24
 8005498:	4618      	mov	r0, r3
 800549a:	f7ff fc77 	bl	8004d8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a2:	2201      	movs	r2, #1
 80054a4:	409a      	lsls	r2, r3
 80054a6:	4b24      	ldr	r3, [pc, #144]	@ (8005538 <xTaskIncrementTick+0x160>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	4a22      	ldr	r2, [pc, #136]	@ (8005538 <xTaskIncrementTick+0x160>)
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b4:	4613      	mov	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4a1f      	ldr	r2, [pc, #124]	@ (800553c <xTaskIncrementTick+0x164>)
 80054be:	441a      	add	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	3304      	adds	r3, #4
 80054c4:	4619      	mov	r1, r3
 80054c6:	4610      	mov	r0, r2
 80054c8:	f7ff fc03 	bl	8004cd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005540 <xTaskIncrementTick+0x168>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d3b9      	bcc.n	800544e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80054da:	2301      	movs	r3, #1
 80054dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054de:	e7b6      	b.n	800544e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054e0:	4b17      	ldr	r3, [pc, #92]	@ (8005540 <xTaskIncrementTick+0x168>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054e6:	4915      	ldr	r1, [pc, #84]	@ (800553c <xTaskIncrementTick+0x164>)
 80054e8:	4613      	mov	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	440b      	add	r3, r1
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d901      	bls.n	80054fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80054f8:	2301      	movs	r3, #1
 80054fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80054fc:	4b11      	ldr	r3, [pc, #68]	@ (8005544 <xTaskIncrementTick+0x16c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d007      	beq.n	8005514 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005504:	2301      	movs	r3, #1
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	e004      	b.n	8005514 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800550a:	4b0f      	ldr	r3, [pc, #60]	@ (8005548 <xTaskIncrementTick+0x170>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3301      	adds	r3, #1
 8005510:	4a0d      	ldr	r2, [pc, #52]	@ (8005548 <xTaskIncrementTick+0x170>)
 8005512:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005514:	697b      	ldr	r3, [r7, #20]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	200005b8 	.word	0x200005b8
 8005524:	20000594 	.word	0x20000594
 8005528:	20000548 	.word	0x20000548
 800552c:	2000054c 	.word	0x2000054c
 8005530:	200005a8 	.word	0x200005a8
 8005534:	200005b0 	.word	0x200005b0
 8005538:	20000598 	.word	0x20000598
 800553c:	20000494 	.word	0x20000494
 8005540:	20000490 	.word	0x20000490
 8005544:	200005a4 	.word	0x200005a4
 8005548:	200005a0 	.word	0x200005a0

0800554c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005552:	4b2a      	ldr	r3, [pc, #168]	@ (80055fc <vTaskSwitchContext+0xb0>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800555a:	4b29      	ldr	r3, [pc, #164]	@ (8005600 <vTaskSwitchContext+0xb4>)
 800555c:	2201      	movs	r2, #1
 800555e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005560:	e045      	b.n	80055ee <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005562:	4b27      	ldr	r3, [pc, #156]	@ (8005600 <vTaskSwitchContext+0xb4>)
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005568:	4b26      	ldr	r3, [pc, #152]	@ (8005604 <vTaskSwitchContext+0xb8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	fab3 f383 	clz	r3, r3
 8005574:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005576:	7afb      	ldrb	r3, [r7, #11]
 8005578:	f1c3 031f 	rsb	r3, r3, #31
 800557c:	617b      	str	r3, [r7, #20]
 800557e:	4922      	ldr	r1, [pc, #136]	@ (8005608 <vTaskSwitchContext+0xbc>)
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10b      	bne.n	80055aa <vTaskSwitchContext+0x5e>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	607b      	str	r3, [r7, #4]
}
 80055a4:	bf00      	nop
 80055a6:	bf00      	nop
 80055a8:	e7fd      	b.n	80055a6 <vTaskSwitchContext+0x5a>
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4613      	mov	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4a14      	ldr	r2, [pc, #80]	@ (8005608 <vTaskSwitchContext+0xbc>)
 80055b6:	4413      	add	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	605a      	str	r2, [r3, #4]
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	3308      	adds	r3, #8
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d104      	bne.n	80055da <vTaskSwitchContext+0x8e>
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	605a      	str	r2, [r3, #4]
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	4a0a      	ldr	r2, [pc, #40]	@ (800560c <vTaskSwitchContext+0xc0>)
 80055e2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055e4:	4b09      	ldr	r3, [pc, #36]	@ (800560c <vTaskSwitchContext+0xc0>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	334c      	adds	r3, #76	@ 0x4c
 80055ea:	4a09      	ldr	r2, [pc, #36]	@ (8005610 <vTaskSwitchContext+0xc4>)
 80055ec:	6013      	str	r3, [r2, #0]
}
 80055ee:	bf00      	nop
 80055f0:	371c      	adds	r7, #28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	200005b8 	.word	0x200005b8
 8005600:	200005a4 	.word	0x200005a4
 8005604:	20000598 	.word	0x20000598
 8005608:	20000494 	.word	0x20000494
 800560c:	20000490 	.word	0x20000490
 8005610:	20000010 	.word	0x20000010

08005614 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800561c:	f000 f852 	bl	80056c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005620:	4b06      	ldr	r3, [pc, #24]	@ (800563c <prvIdleTask+0x28>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d9f9      	bls.n	800561c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005628:	4b05      	ldr	r3, [pc, #20]	@ (8005640 <prvIdleTask+0x2c>)
 800562a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005638:	e7f0      	b.n	800561c <prvIdleTask+0x8>
 800563a:	bf00      	nop
 800563c:	20000494 	.word	0x20000494
 8005640:	e000ed04 	.word	0xe000ed04

08005644 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800564a:	2300      	movs	r3, #0
 800564c:	607b      	str	r3, [r7, #4]
 800564e:	e00c      	b.n	800566a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4a12      	ldr	r2, [pc, #72]	@ (80056a4 <prvInitialiseTaskLists+0x60>)
 800565c:	4413      	add	r3, r2
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff fb0a 	bl	8004c78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3301      	adds	r3, #1
 8005668:	607b      	str	r3, [r7, #4]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b06      	cmp	r3, #6
 800566e:	d9ef      	bls.n	8005650 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005670:	480d      	ldr	r0, [pc, #52]	@ (80056a8 <prvInitialiseTaskLists+0x64>)
 8005672:	f7ff fb01 	bl	8004c78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005676:	480d      	ldr	r0, [pc, #52]	@ (80056ac <prvInitialiseTaskLists+0x68>)
 8005678:	f7ff fafe 	bl	8004c78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800567c:	480c      	ldr	r0, [pc, #48]	@ (80056b0 <prvInitialiseTaskLists+0x6c>)
 800567e:	f7ff fafb 	bl	8004c78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005682:	480c      	ldr	r0, [pc, #48]	@ (80056b4 <prvInitialiseTaskLists+0x70>)
 8005684:	f7ff faf8 	bl	8004c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005688:	480b      	ldr	r0, [pc, #44]	@ (80056b8 <prvInitialiseTaskLists+0x74>)
 800568a:	f7ff faf5 	bl	8004c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800568e:	4b0b      	ldr	r3, [pc, #44]	@ (80056bc <prvInitialiseTaskLists+0x78>)
 8005690:	4a05      	ldr	r2, [pc, #20]	@ (80056a8 <prvInitialiseTaskLists+0x64>)
 8005692:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005694:	4b0a      	ldr	r3, [pc, #40]	@ (80056c0 <prvInitialiseTaskLists+0x7c>)
 8005696:	4a05      	ldr	r2, [pc, #20]	@ (80056ac <prvInitialiseTaskLists+0x68>)
 8005698:	601a      	str	r2, [r3, #0]
}
 800569a:	bf00      	nop
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20000494 	.word	0x20000494
 80056a8:	20000520 	.word	0x20000520
 80056ac:	20000534 	.word	0x20000534
 80056b0:	20000550 	.word	0x20000550
 80056b4:	20000564 	.word	0x20000564
 80056b8:	2000057c 	.word	0x2000057c
 80056bc:	20000548 	.word	0x20000548
 80056c0:	2000054c 	.word	0x2000054c

080056c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056ca:	e019      	b.n	8005700 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056cc:	f000 fa14 	bl	8005af8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056d0:	4b10      	ldr	r3, [pc, #64]	@ (8005714 <prvCheckTasksWaitingTermination+0x50>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3304      	adds	r3, #4
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff fb55 	bl	8004d8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005718 <prvCheckTasksWaitingTermination+0x54>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	4a0b      	ldr	r2, [pc, #44]	@ (8005718 <prvCheckTasksWaitingTermination+0x54>)
 80056ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056ec:	4b0b      	ldr	r3, [pc, #44]	@ (800571c <prvCheckTasksWaitingTermination+0x58>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	4a0a      	ldr	r2, [pc, #40]	@ (800571c <prvCheckTasksWaitingTermination+0x58>)
 80056f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056f6:	f000 fa31 	bl	8005b5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f810 	bl	8005720 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005700:	4b06      	ldr	r3, [pc, #24]	@ (800571c <prvCheckTasksWaitingTermination+0x58>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e1      	bne.n	80056cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005708:	bf00      	nop
 800570a:	bf00      	nop
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20000564 	.word	0x20000564
 8005718:	20000590 	.word	0x20000590
 800571c:	20000578 	.word	0x20000578

08005720 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	334c      	adds	r3, #76	@ 0x4c
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fcd9 	bl	80060e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005738:	2b00      	cmp	r3, #0
 800573a:	d108      	bne.n	800574e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005740:	4618      	mov	r0, r3
 8005742:	f000 fb87 	bl	8005e54 <vPortFree>
				vPortFree( pxTCB );
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fb84 	bl	8005e54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800574c:	e019      	b.n	8005782 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005754:	2b01      	cmp	r3, #1
 8005756:	d103      	bne.n	8005760 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fb7b 	bl	8005e54 <vPortFree>
	}
 800575e:	e010      	b.n	8005782 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005766:	2b02      	cmp	r3, #2
 8005768:	d00b      	beq.n	8005782 <prvDeleteTCB+0x62>
	__asm volatile
 800576a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	60fb      	str	r3, [r7, #12]
}
 800577c:	bf00      	nop
 800577e:	bf00      	nop
 8005780:	e7fd      	b.n	800577e <prvDeleteTCB+0x5e>
	}
 8005782:	bf00      	nop
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005792:	4b0c      	ldr	r3, [pc, #48]	@ (80057c4 <prvResetNextTaskUnblockTime+0x38>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d104      	bne.n	80057a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800579c:	4b0a      	ldr	r3, [pc, #40]	@ (80057c8 <prvResetNextTaskUnblockTime+0x3c>)
 800579e:	f04f 32ff 	mov.w	r2, #4294967295
 80057a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057a4:	e008      	b.n	80057b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057a6:	4b07      	ldr	r3, [pc, #28]	@ (80057c4 <prvResetNextTaskUnblockTime+0x38>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	4a04      	ldr	r2, [pc, #16]	@ (80057c8 <prvResetNextTaskUnblockTime+0x3c>)
 80057b6:	6013      	str	r3, [r2, #0]
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	20000548 	.word	0x20000548
 80057c8:	200005b0 	.word	0x200005b0

080057cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057d6:	4b29      	ldr	r3, [pc, #164]	@ (800587c <prvAddCurrentTaskToDelayedList+0xb0>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057dc:	4b28      	ldr	r3, [pc, #160]	@ (8005880 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3304      	adds	r3, #4
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff fad2 	bl	8004d8c <uxListRemove>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10b      	bne.n	8005806 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80057ee:	4b24      	ldr	r3, [pc, #144]	@ (8005880 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f4:	2201      	movs	r2, #1
 80057f6:	fa02 f303 	lsl.w	r3, r2, r3
 80057fa:	43da      	mvns	r2, r3
 80057fc:	4b21      	ldr	r3, [pc, #132]	@ (8005884 <prvAddCurrentTaskToDelayedList+0xb8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4013      	ands	r3, r2
 8005802:	4a20      	ldr	r2, [pc, #128]	@ (8005884 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005804:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580c:	d10a      	bne.n	8005824 <prvAddCurrentTaskToDelayedList+0x58>
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d007      	beq.n	8005824 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005814:	4b1a      	ldr	r3, [pc, #104]	@ (8005880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3304      	adds	r3, #4
 800581a:	4619      	mov	r1, r3
 800581c:	481a      	ldr	r0, [pc, #104]	@ (8005888 <prvAddCurrentTaskToDelayedList+0xbc>)
 800581e:	f7ff fa58 	bl	8004cd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005822:	e026      	b.n	8005872 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4413      	add	r3, r2
 800582a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800582c:	4b14      	ldr	r3, [pc, #80]	@ (8005880 <prvAddCurrentTaskToDelayedList+0xb4>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	429a      	cmp	r2, r3
 800583a:	d209      	bcs.n	8005850 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800583c:	4b13      	ldr	r3, [pc, #76]	@ (800588c <prvAddCurrentTaskToDelayedList+0xc0>)
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	4b0f      	ldr	r3, [pc, #60]	@ (8005880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3304      	adds	r3, #4
 8005846:	4619      	mov	r1, r3
 8005848:	4610      	mov	r0, r2
 800584a:	f7ff fa66 	bl	8004d1a <vListInsert>
}
 800584e:	e010      	b.n	8005872 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005850:	4b0f      	ldr	r3, [pc, #60]	@ (8005890 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	4b0a      	ldr	r3, [pc, #40]	@ (8005880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3304      	adds	r3, #4
 800585a:	4619      	mov	r1, r3
 800585c:	4610      	mov	r0, r2
 800585e:	f7ff fa5c 	bl	8004d1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005862:	4b0c      	ldr	r3, [pc, #48]	@ (8005894 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	429a      	cmp	r2, r3
 800586a:	d202      	bcs.n	8005872 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800586c:	4a09      	ldr	r2, [pc, #36]	@ (8005894 <prvAddCurrentTaskToDelayedList+0xc8>)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	6013      	str	r3, [r2, #0]
}
 8005872:	bf00      	nop
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20000594 	.word	0x20000594
 8005880:	20000490 	.word	0x20000490
 8005884:	20000598 	.word	0x20000598
 8005888:	2000057c 	.word	0x2000057c
 800588c:	2000054c 	.word	0x2000054c
 8005890:	20000548 	.word	0x20000548
 8005894:	200005b0 	.word	0x200005b0

08005898 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	3b04      	subs	r3, #4
 80058a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80058b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3b04      	subs	r3, #4
 80058b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f023 0201 	bic.w	r2, r3, #1
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3b04      	subs	r3, #4
 80058c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058c8:	4a0c      	ldr	r2, [pc, #48]	@ (80058fc <pxPortInitialiseStack+0x64>)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3b14      	subs	r3, #20
 80058d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3b04      	subs	r3, #4
 80058de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f06f 0202 	mvn.w	r2, #2
 80058e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3b20      	subs	r3, #32
 80058ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058ee:	68fb      	ldr	r3, [r7, #12]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	08005901 	.word	0x08005901

08005900 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005906:	2300      	movs	r3, #0
 8005908:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800590a:	4b13      	ldr	r3, [pc, #76]	@ (8005958 <prvTaskExitError+0x58>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005912:	d00b      	beq.n	800592c <prvTaskExitError+0x2c>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	60fb      	str	r3, [r7, #12]
}
 8005926:	bf00      	nop
 8005928:	bf00      	nop
 800592a:	e7fd      	b.n	8005928 <prvTaskExitError+0x28>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	60bb      	str	r3, [r7, #8]
}
 800593e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005940:	bf00      	nop
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0fc      	beq.n	8005942 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005948:	bf00      	nop
 800594a:	bf00      	nop
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	2000000c 	.word	0x2000000c
 800595c:	00000000 	.word	0x00000000

08005960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005960:	4b07      	ldr	r3, [pc, #28]	@ (8005980 <pxCurrentTCBConst2>)
 8005962:	6819      	ldr	r1, [r3, #0]
 8005964:	6808      	ldr	r0, [r1, #0]
 8005966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596a:	f380 8809 	msr	PSP, r0
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f04f 0000 	mov.w	r0, #0
 8005976:	f380 8811 	msr	BASEPRI, r0
 800597a:	4770      	bx	lr
 800597c:	f3af 8000 	nop.w

08005980 <pxCurrentTCBConst2>:
 8005980:	20000490 	.word	0x20000490
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop

08005988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005988:	4808      	ldr	r0, [pc, #32]	@ (80059ac <prvPortStartFirstTask+0x24>)
 800598a:	6800      	ldr	r0, [r0, #0]
 800598c:	6800      	ldr	r0, [r0, #0]
 800598e:	f380 8808 	msr	MSP, r0
 8005992:	f04f 0000 	mov.w	r0, #0
 8005996:	f380 8814 	msr	CONTROL, r0
 800599a:	b662      	cpsie	i
 800599c:	b661      	cpsie	f
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	df00      	svc	0
 80059a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80059aa:	bf00      	nop
 80059ac:	e000ed08 	.word	0xe000ed08

080059b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059b6:	4b47      	ldr	r3, [pc, #284]	@ (8005ad4 <xPortStartScheduler+0x124>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a47      	ldr	r2, [pc, #284]	@ (8005ad8 <xPortStartScheduler+0x128>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d10b      	bne.n	80059d8 <xPortStartScheduler+0x28>
	__asm volatile
 80059c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	613b      	str	r3, [r7, #16]
}
 80059d2:	bf00      	nop
 80059d4:	bf00      	nop
 80059d6:	e7fd      	b.n	80059d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80059d8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ad4 <xPortStartScheduler+0x124>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a3f      	ldr	r2, [pc, #252]	@ (8005adc <xPortStartScheduler+0x12c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d10b      	bne.n	80059fa <xPortStartScheduler+0x4a>
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	60fb      	str	r3, [r7, #12]
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop
 80059f8:	e7fd      	b.n	80059f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059fa:	4b39      	ldr	r3, [pc, #228]	@ (8005ae0 <xPortStartScheduler+0x130>)
 80059fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	22ff      	movs	r2, #255	@ 0xff
 8005a0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a14:	78fb      	ldrb	r3, [r7, #3]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	4b31      	ldr	r3, [pc, #196]	@ (8005ae4 <xPortStartScheduler+0x134>)
 8005a20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a22:	4b31      	ldr	r3, [pc, #196]	@ (8005ae8 <xPortStartScheduler+0x138>)
 8005a24:	2207      	movs	r2, #7
 8005a26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a28:	e009      	b.n	8005a3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005a2a:	4b2f      	ldr	r3, [pc, #188]	@ (8005ae8 <xPortStartScheduler+0x138>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	4a2d      	ldr	r2, [pc, #180]	@ (8005ae8 <xPortStartScheduler+0x138>)
 8005a32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a3e:	78fb      	ldrb	r3, [r7, #3]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a46:	2b80      	cmp	r3, #128	@ 0x80
 8005a48:	d0ef      	beq.n	8005a2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a4a:	4b27      	ldr	r3, [pc, #156]	@ (8005ae8 <xPortStartScheduler+0x138>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f1c3 0307 	rsb	r3, r3, #7
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d00b      	beq.n	8005a6e <xPortStartScheduler+0xbe>
	__asm volatile
 8005a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	60bb      	str	r3, [r7, #8]
}
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
 8005a6c:	e7fd      	b.n	8005a6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ae8 <xPortStartScheduler+0x138>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	021b      	lsls	r3, r3, #8
 8005a74:	4a1c      	ldr	r2, [pc, #112]	@ (8005ae8 <xPortStartScheduler+0x138>)
 8005a76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a78:	4b1b      	ldr	r3, [pc, #108]	@ (8005ae8 <xPortStartScheduler+0x138>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a80:	4a19      	ldr	r2, [pc, #100]	@ (8005ae8 <xPortStartScheduler+0x138>)
 8005a82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a8c:	4b17      	ldr	r3, [pc, #92]	@ (8005aec <xPortStartScheduler+0x13c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a16      	ldr	r2, [pc, #88]	@ (8005aec <xPortStartScheduler+0x13c>)
 8005a92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a98:	4b14      	ldr	r3, [pc, #80]	@ (8005aec <xPortStartScheduler+0x13c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a13      	ldr	r2, [pc, #76]	@ (8005aec <xPortStartScheduler+0x13c>)
 8005a9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005aa2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005aa4:	f000 f8da 	bl	8005c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005aa8:	4b11      	ldr	r3, [pc, #68]	@ (8005af0 <xPortStartScheduler+0x140>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005aae:	f000 f8f9 	bl	8005ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ab2:	4b10      	ldr	r3, [pc, #64]	@ (8005af4 <xPortStartScheduler+0x144>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8005af4 <xPortStartScheduler+0x144>)
 8005ab8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005abc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005abe:	f7ff ff63 	bl	8005988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ac2:	f7ff fd43 	bl	800554c <vTaskSwitchContext>
	prvTaskExitError();
 8005ac6:	f7ff ff1b 	bl	8005900 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	e000ed00 	.word	0xe000ed00
 8005ad8:	410fc271 	.word	0x410fc271
 8005adc:	410fc270 	.word	0x410fc270
 8005ae0:	e000e400 	.word	0xe000e400
 8005ae4:	200005bc 	.word	0x200005bc
 8005ae8:	200005c0 	.word	0x200005c0
 8005aec:	e000ed20 	.word	0xe000ed20
 8005af0:	2000000c 	.word	0x2000000c
 8005af4:	e000ef34 	.word	0xe000ef34

08005af8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	607b      	str	r3, [r7, #4]
}
 8005b10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b12:	4b10      	ldr	r3, [pc, #64]	@ (8005b54 <vPortEnterCritical+0x5c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3301      	adds	r3, #1
 8005b18:	4a0e      	ldr	r2, [pc, #56]	@ (8005b54 <vPortEnterCritical+0x5c>)
 8005b1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005b54 <vPortEnterCritical+0x5c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d110      	bne.n	8005b46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b24:	4b0c      	ldr	r3, [pc, #48]	@ (8005b58 <vPortEnterCritical+0x60>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00b      	beq.n	8005b46 <vPortEnterCritical+0x4e>
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	603b      	str	r3, [r7, #0]
}
 8005b40:	bf00      	nop
 8005b42:	bf00      	nop
 8005b44:	e7fd      	b.n	8005b42 <vPortEnterCritical+0x4a>
	}
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	2000000c 	.word	0x2000000c
 8005b58:	e000ed04 	.word	0xe000ed04

08005b5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b62:	4b12      	ldr	r3, [pc, #72]	@ (8005bac <vPortExitCritical+0x50>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10b      	bne.n	8005b82 <vPortExitCritical+0x26>
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	607b      	str	r3, [r7, #4]
}
 8005b7c:	bf00      	nop
 8005b7e:	bf00      	nop
 8005b80:	e7fd      	b.n	8005b7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005b82:	4b0a      	ldr	r3, [pc, #40]	@ (8005bac <vPortExitCritical+0x50>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	4a08      	ldr	r2, [pc, #32]	@ (8005bac <vPortExitCritical+0x50>)
 8005b8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b8c:	4b07      	ldr	r3, [pc, #28]	@ (8005bac <vPortExitCritical+0x50>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d105      	bne.n	8005ba0 <vPortExitCritical+0x44>
 8005b94:	2300      	movs	r3, #0
 8005b96:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	2000000c 	.word	0x2000000c

08005bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005bb0:	f3ef 8009 	mrs	r0, PSP
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	4b15      	ldr	r3, [pc, #84]	@ (8005c10 <pxCurrentTCBConst>)
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	f01e 0f10 	tst.w	lr, #16
 8005bc0:	bf08      	it	eq
 8005bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bca:	6010      	str	r0, [r2, #0]
 8005bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005bd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005bd4:	f380 8811 	msr	BASEPRI, r0
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f7ff fcb4 	bl	800554c <vTaskSwitchContext>
 8005be4:	f04f 0000 	mov.w	r0, #0
 8005be8:	f380 8811 	msr	BASEPRI, r0
 8005bec:	bc09      	pop	{r0, r3}
 8005bee:	6819      	ldr	r1, [r3, #0]
 8005bf0:	6808      	ldr	r0, [r1, #0]
 8005bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf6:	f01e 0f10 	tst.w	lr, #16
 8005bfa:	bf08      	it	eq
 8005bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c00:	f380 8809 	msr	PSP, r0
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	f3af 8000 	nop.w

08005c10 <pxCurrentTCBConst>:
 8005c10:	20000490 	.word	0x20000490
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c14:	bf00      	nop
 8005c16:	bf00      	nop

08005c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	607b      	str	r3, [r7, #4]
}
 8005c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c32:	f7ff fbd1 	bl	80053d8 <xTaskIncrementTick>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c3c:	4b06      	ldr	r3, [pc, #24]	@ (8005c58 <SysTick_Handler+0x40>)
 8005c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	2300      	movs	r3, #0
 8005c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	f383 8811 	msr	BASEPRI, r3
}
 8005c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c50:	bf00      	nop
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	e000ed04 	.word	0xe000ed04

08005c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c60:	4b0b      	ldr	r3, [pc, #44]	@ (8005c90 <vPortSetupTimerInterrupt+0x34>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c66:	4b0b      	ldr	r3, [pc, #44]	@ (8005c94 <vPortSetupTimerInterrupt+0x38>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c98 <vPortSetupTimerInterrupt+0x3c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a0a      	ldr	r2, [pc, #40]	@ (8005c9c <vPortSetupTimerInterrupt+0x40>)
 8005c72:	fba2 2303 	umull	r2, r3, r2, r3
 8005c76:	099b      	lsrs	r3, r3, #6
 8005c78:	4a09      	ldr	r2, [pc, #36]	@ (8005ca0 <vPortSetupTimerInterrupt+0x44>)
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c7e:	4b04      	ldr	r3, [pc, #16]	@ (8005c90 <vPortSetupTimerInterrupt+0x34>)
 8005c80:	2207      	movs	r2, #7
 8005c82:	601a      	str	r2, [r3, #0]
}
 8005c84:	bf00      	nop
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	e000e010 	.word	0xe000e010
 8005c94:	e000e018 	.word	0xe000e018
 8005c98:	20000000 	.word	0x20000000
 8005c9c:	10624dd3 	.word	0x10624dd3
 8005ca0:	e000e014 	.word	0xe000e014

08005ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005cb4 <vPortEnableVFP+0x10>
 8005ca8:	6801      	ldr	r1, [r0, #0]
 8005caa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005cae:	6001      	str	r1, [r0, #0]
 8005cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005cb2:	bf00      	nop
 8005cb4:	e000ed88 	.word	0xe000ed88

08005cb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08a      	sub	sp, #40	@ 0x28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005cc4:	f7ff fadc 	bl	8005280 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005cc8:	4b5c      	ldr	r3, [pc, #368]	@ (8005e3c <pvPortMalloc+0x184>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005cd0:	f000 f924 	bl	8005f1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005cd4:	4b5a      	ldr	r3, [pc, #360]	@ (8005e40 <pvPortMalloc+0x188>)
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f040 8095 	bne.w	8005e0c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01e      	beq.n	8005d26 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005ce8:	2208      	movs	r2, #8
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4413      	add	r3, r2
 8005cee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d015      	beq.n	8005d26 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f023 0307 	bic.w	r3, r3, #7
 8005d00:	3308      	adds	r3, #8
 8005d02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f003 0307 	and.w	r3, r3, #7
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00b      	beq.n	8005d26 <pvPortMalloc+0x6e>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	617b      	str	r3, [r7, #20]
}
 8005d20:	bf00      	nop
 8005d22:	bf00      	nop
 8005d24:	e7fd      	b.n	8005d22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d06f      	beq.n	8005e0c <pvPortMalloc+0x154>
 8005d2c:	4b45      	ldr	r3, [pc, #276]	@ (8005e44 <pvPortMalloc+0x18c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d86a      	bhi.n	8005e0c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d36:	4b44      	ldr	r3, [pc, #272]	@ (8005e48 <pvPortMalloc+0x190>)
 8005d38:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d3a:	4b43      	ldr	r3, [pc, #268]	@ (8005e48 <pvPortMalloc+0x190>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d40:	e004      	b.n	8005d4c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d44:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d903      	bls.n	8005d5e <pvPortMalloc+0xa6>
 8005d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1f1      	bne.n	8005d42 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d5e:	4b37      	ldr	r3, [pc, #220]	@ (8005e3c <pvPortMalloc+0x184>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d051      	beq.n	8005e0c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2208      	movs	r2, #8
 8005d6e:	4413      	add	r3, r2
 8005d70:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	1ad2      	subs	r2, r2, r3
 8005d82:	2308      	movs	r3, #8
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d920      	bls.n	8005dcc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4413      	add	r3, r2
 8005d90:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	f003 0307 	and.w	r3, r3, #7
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00b      	beq.n	8005db4 <pvPortMalloc+0xfc>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	613b      	str	r3, [r7, #16]
}
 8005dae:	bf00      	nop
 8005db0:	bf00      	nop
 8005db2:	e7fd      	b.n	8005db0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	1ad2      	subs	r2, r2, r3
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005dc6:	69b8      	ldr	r0, [r7, #24]
 8005dc8:	f000 f90a 	bl	8005fe0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8005e44 <pvPortMalloc+0x18c>)
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8005e44 <pvPortMalloc+0x18c>)
 8005dd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005dda:	4b1a      	ldr	r3, [pc, #104]	@ (8005e44 <pvPortMalloc+0x18c>)
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4b1b      	ldr	r3, [pc, #108]	@ (8005e4c <pvPortMalloc+0x194>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d203      	bcs.n	8005dee <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005de6:	4b17      	ldr	r3, [pc, #92]	@ (8005e44 <pvPortMalloc+0x18c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a18      	ldr	r2, [pc, #96]	@ (8005e4c <pvPortMalloc+0x194>)
 8005dec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	4b13      	ldr	r3, [pc, #76]	@ (8005e40 <pvPortMalloc+0x188>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	431a      	orrs	r2, r3
 8005df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e02:	4b13      	ldr	r3, [pc, #76]	@ (8005e50 <pvPortMalloc+0x198>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3301      	adds	r3, #1
 8005e08:	4a11      	ldr	r2, [pc, #68]	@ (8005e50 <pvPortMalloc+0x198>)
 8005e0a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e0c:	f7ff fa46 	bl	800529c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00b      	beq.n	8005e32 <pvPortMalloc+0x17a>
	__asm volatile
 8005e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	60fb      	str	r3, [r7, #12]
}
 8005e2c:	bf00      	nop
 8005e2e:	bf00      	nop
 8005e30:	e7fd      	b.n	8005e2e <pvPortMalloc+0x176>
	return pvReturn;
 8005e32:	69fb      	ldr	r3, [r7, #28]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3728      	adds	r7, #40	@ 0x28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	200045cc 	.word	0x200045cc
 8005e40:	200045e0 	.word	0x200045e0
 8005e44:	200045d0 	.word	0x200045d0
 8005e48:	200045c4 	.word	0x200045c4
 8005e4c:	200045d4 	.word	0x200045d4
 8005e50:	200045d8 	.word	0x200045d8

08005e54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d04f      	beq.n	8005f06 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e66:	2308      	movs	r3, #8
 8005e68:	425b      	negs	r3, r3
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	4b25      	ldr	r3, [pc, #148]	@ (8005f10 <vPortFree+0xbc>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10b      	bne.n	8005e9a <vPortFree+0x46>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	60fb      	str	r3, [r7, #12]
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop
 8005e98:	e7fd      	b.n	8005e96 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00b      	beq.n	8005eba <vPortFree+0x66>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	60bb      	str	r3, [r7, #8]
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop
 8005eb8:	e7fd      	b.n	8005eb6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	4b14      	ldr	r3, [pc, #80]	@ (8005f10 <vPortFree+0xbc>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01e      	beq.n	8005f06 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d11a      	bne.n	8005f06 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8005f10 <vPortFree+0xbc>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	43db      	mvns	r3, r3
 8005eda:	401a      	ands	r2, r3
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ee0:	f7ff f9ce 	bl	8005280 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8005f14 <vPortFree+0xc0>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4413      	add	r3, r2
 8005eee:	4a09      	ldr	r2, [pc, #36]	@ (8005f14 <vPortFree+0xc0>)
 8005ef0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ef2:	6938      	ldr	r0, [r7, #16]
 8005ef4:	f000 f874 	bl	8005fe0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ef8:	4b07      	ldr	r3, [pc, #28]	@ (8005f18 <vPortFree+0xc4>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3301      	adds	r3, #1
 8005efe:	4a06      	ldr	r2, [pc, #24]	@ (8005f18 <vPortFree+0xc4>)
 8005f00:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f02:	f7ff f9cb 	bl	800529c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f06:	bf00      	nop
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	200045e0 	.word	0x200045e0
 8005f14:	200045d0 	.word	0x200045d0
 8005f18:	200045dc 	.word	0x200045dc

08005f1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f22:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005f26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f28:	4b27      	ldr	r3, [pc, #156]	@ (8005fc8 <prvHeapInit+0xac>)
 8005f2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f003 0307 	and.w	r3, r3, #7
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00c      	beq.n	8005f50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3307      	adds	r3, #7
 8005f3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 0307 	bic.w	r3, r3, #7
 8005f42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc8 <prvHeapInit+0xac>)
 8005f4c:	4413      	add	r3, r2
 8005f4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f54:	4a1d      	ldr	r2, [pc, #116]	@ (8005fcc <prvHeapInit+0xb0>)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8005fcc <prvHeapInit+0xb0>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	4413      	add	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f68:	2208      	movs	r2, #8
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	1a9b      	subs	r3, r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0307 	bic.w	r3, r3, #7
 8005f76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4a15      	ldr	r2, [pc, #84]	@ (8005fd0 <prvHeapInit+0xb4>)
 8005f7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f7e:	4b14      	ldr	r3, [pc, #80]	@ (8005fd0 <prvHeapInit+0xb4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2200      	movs	r2, #0
 8005f84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f86:	4b12      	ldr	r3, [pc, #72]	@ (8005fd0 <prvHeapInit+0xb4>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	1ad2      	subs	r2, r2, r3
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fd0 <prvHeapInit+0xb4>)
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8005fd4 <prvHeapInit+0xb8>)
 8005faa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	4a09      	ldr	r2, [pc, #36]	@ (8005fd8 <prvHeapInit+0xbc>)
 8005fb2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fb4:	4b09      	ldr	r3, [pc, #36]	@ (8005fdc <prvHeapInit+0xc0>)
 8005fb6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005fba:	601a      	str	r2, [r3, #0]
}
 8005fbc:	bf00      	nop
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	200005c4 	.word	0x200005c4
 8005fcc:	200045c4 	.word	0x200045c4
 8005fd0:	200045cc 	.word	0x200045cc
 8005fd4:	200045d4 	.word	0x200045d4
 8005fd8:	200045d0 	.word	0x200045d0
 8005fdc:	200045e0 	.word	0x200045e0

08005fe0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fe8:	4b28      	ldr	r3, [pc, #160]	@ (800608c <prvInsertBlockIntoFreeList+0xac>)
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	e002      	b.n	8005ff4 <prvInsertBlockIntoFreeList+0x14>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d8f7      	bhi.n	8005fee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	4413      	add	r3, r2
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	429a      	cmp	r2, r3
 800600e:	d108      	bne.n	8006022 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	441a      	add	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	441a      	add	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	429a      	cmp	r2, r3
 8006034:	d118      	bne.n	8006068 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4b15      	ldr	r3, [pc, #84]	@ (8006090 <prvInsertBlockIntoFreeList+0xb0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	429a      	cmp	r2, r3
 8006040:	d00d      	beq.n	800605e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	441a      	add	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	e008      	b.n	8006070 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800605e:	4b0c      	ldr	r3, [pc, #48]	@ (8006090 <prvInsertBlockIntoFreeList+0xb0>)
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	e003      	b.n	8006070 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	429a      	cmp	r2, r3
 8006076:	d002      	beq.n	800607e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800607e:	bf00      	nop
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	200045c4 	.word	0x200045c4
 8006090:	200045cc 	.word	0x200045cc

08006094 <siprintf>:
 8006094:	b40e      	push	{r1, r2, r3}
 8006096:	b500      	push	{lr}
 8006098:	b09c      	sub	sp, #112	@ 0x70
 800609a:	ab1d      	add	r3, sp, #116	@ 0x74
 800609c:	9002      	str	r0, [sp, #8]
 800609e:	9006      	str	r0, [sp, #24]
 80060a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80060a4:	4809      	ldr	r0, [pc, #36]	@ (80060cc <siprintf+0x38>)
 80060a6:	9107      	str	r1, [sp, #28]
 80060a8:	9104      	str	r1, [sp, #16]
 80060aa:	4909      	ldr	r1, [pc, #36]	@ (80060d0 <siprintf+0x3c>)
 80060ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80060b0:	9105      	str	r1, [sp, #20]
 80060b2:	6800      	ldr	r0, [r0, #0]
 80060b4:	9301      	str	r3, [sp, #4]
 80060b6:	a902      	add	r1, sp, #8
 80060b8:	f000 f9f8 	bl	80064ac <_svfiprintf_r>
 80060bc:	9b02      	ldr	r3, [sp, #8]
 80060be:	2200      	movs	r2, #0
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	b01c      	add	sp, #112	@ 0x70
 80060c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80060c8:	b003      	add	sp, #12
 80060ca:	4770      	bx	lr
 80060cc:	20000010 	.word	0x20000010
 80060d0:	ffff0208 	.word	0xffff0208

080060d4 <memset>:
 80060d4:	4402      	add	r2, r0
 80060d6:	4603      	mov	r3, r0
 80060d8:	4293      	cmp	r3, r2
 80060da:	d100      	bne.n	80060de <memset+0xa>
 80060dc:	4770      	bx	lr
 80060de:	f803 1b01 	strb.w	r1, [r3], #1
 80060e2:	e7f9      	b.n	80060d8 <memset+0x4>

080060e4 <_reclaim_reent>:
 80060e4:	4b29      	ldr	r3, [pc, #164]	@ (800618c <_reclaim_reent+0xa8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4283      	cmp	r3, r0
 80060ea:	b570      	push	{r4, r5, r6, lr}
 80060ec:	4604      	mov	r4, r0
 80060ee:	d04b      	beq.n	8006188 <_reclaim_reent+0xa4>
 80060f0:	69c3      	ldr	r3, [r0, #28]
 80060f2:	b1ab      	cbz	r3, 8006120 <_reclaim_reent+0x3c>
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	b16b      	cbz	r3, 8006114 <_reclaim_reent+0x30>
 80060f8:	2500      	movs	r5, #0
 80060fa:	69e3      	ldr	r3, [r4, #28]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	5959      	ldr	r1, [r3, r5]
 8006100:	2900      	cmp	r1, #0
 8006102:	d13b      	bne.n	800617c <_reclaim_reent+0x98>
 8006104:	3504      	adds	r5, #4
 8006106:	2d80      	cmp	r5, #128	@ 0x80
 8006108:	d1f7      	bne.n	80060fa <_reclaim_reent+0x16>
 800610a:	69e3      	ldr	r3, [r4, #28]
 800610c:	4620      	mov	r0, r4
 800610e:	68d9      	ldr	r1, [r3, #12]
 8006110:	f000 f878 	bl	8006204 <_free_r>
 8006114:	69e3      	ldr	r3, [r4, #28]
 8006116:	6819      	ldr	r1, [r3, #0]
 8006118:	b111      	cbz	r1, 8006120 <_reclaim_reent+0x3c>
 800611a:	4620      	mov	r0, r4
 800611c:	f000 f872 	bl	8006204 <_free_r>
 8006120:	6961      	ldr	r1, [r4, #20]
 8006122:	b111      	cbz	r1, 800612a <_reclaim_reent+0x46>
 8006124:	4620      	mov	r0, r4
 8006126:	f000 f86d 	bl	8006204 <_free_r>
 800612a:	69e1      	ldr	r1, [r4, #28]
 800612c:	b111      	cbz	r1, 8006134 <_reclaim_reent+0x50>
 800612e:	4620      	mov	r0, r4
 8006130:	f000 f868 	bl	8006204 <_free_r>
 8006134:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006136:	b111      	cbz	r1, 800613e <_reclaim_reent+0x5a>
 8006138:	4620      	mov	r0, r4
 800613a:	f000 f863 	bl	8006204 <_free_r>
 800613e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006140:	b111      	cbz	r1, 8006148 <_reclaim_reent+0x64>
 8006142:	4620      	mov	r0, r4
 8006144:	f000 f85e 	bl	8006204 <_free_r>
 8006148:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800614a:	b111      	cbz	r1, 8006152 <_reclaim_reent+0x6e>
 800614c:	4620      	mov	r0, r4
 800614e:	f000 f859 	bl	8006204 <_free_r>
 8006152:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006154:	b111      	cbz	r1, 800615c <_reclaim_reent+0x78>
 8006156:	4620      	mov	r0, r4
 8006158:	f000 f854 	bl	8006204 <_free_r>
 800615c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800615e:	b111      	cbz	r1, 8006166 <_reclaim_reent+0x82>
 8006160:	4620      	mov	r0, r4
 8006162:	f000 f84f 	bl	8006204 <_free_r>
 8006166:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006168:	b111      	cbz	r1, 8006170 <_reclaim_reent+0x8c>
 800616a:	4620      	mov	r0, r4
 800616c:	f000 f84a 	bl	8006204 <_free_r>
 8006170:	6a23      	ldr	r3, [r4, #32]
 8006172:	b14b      	cbz	r3, 8006188 <_reclaim_reent+0xa4>
 8006174:	4620      	mov	r0, r4
 8006176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800617a:	4718      	bx	r3
 800617c:	680e      	ldr	r6, [r1, #0]
 800617e:	4620      	mov	r0, r4
 8006180:	f000 f840 	bl	8006204 <_free_r>
 8006184:	4631      	mov	r1, r6
 8006186:	e7bb      	b.n	8006100 <_reclaim_reent+0x1c>
 8006188:	bd70      	pop	{r4, r5, r6, pc}
 800618a:	bf00      	nop
 800618c:	20000010 	.word	0x20000010

08006190 <__errno>:
 8006190:	4b01      	ldr	r3, [pc, #4]	@ (8006198 <__errno+0x8>)
 8006192:	6818      	ldr	r0, [r3, #0]
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	20000010 	.word	0x20000010

0800619c <__libc_init_array>:
 800619c:	b570      	push	{r4, r5, r6, lr}
 800619e:	4d0d      	ldr	r5, [pc, #52]	@ (80061d4 <__libc_init_array+0x38>)
 80061a0:	4c0d      	ldr	r4, [pc, #52]	@ (80061d8 <__libc_init_array+0x3c>)
 80061a2:	1b64      	subs	r4, r4, r5
 80061a4:	10a4      	asrs	r4, r4, #2
 80061a6:	2600      	movs	r6, #0
 80061a8:	42a6      	cmp	r6, r4
 80061aa:	d109      	bne.n	80061c0 <__libc_init_array+0x24>
 80061ac:	4d0b      	ldr	r5, [pc, #44]	@ (80061dc <__libc_init_array+0x40>)
 80061ae:	4c0c      	ldr	r4, [pc, #48]	@ (80061e0 <__libc_init_array+0x44>)
 80061b0:	f000 fc66 	bl	8006a80 <_init>
 80061b4:	1b64      	subs	r4, r4, r5
 80061b6:	10a4      	asrs	r4, r4, #2
 80061b8:	2600      	movs	r6, #0
 80061ba:	42a6      	cmp	r6, r4
 80061bc:	d105      	bne.n	80061ca <__libc_init_array+0x2e>
 80061be:	bd70      	pop	{r4, r5, r6, pc}
 80061c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061c4:	4798      	blx	r3
 80061c6:	3601      	adds	r6, #1
 80061c8:	e7ee      	b.n	80061a8 <__libc_init_array+0xc>
 80061ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ce:	4798      	blx	r3
 80061d0:	3601      	adds	r6, #1
 80061d2:	e7f2      	b.n	80061ba <__libc_init_array+0x1e>
 80061d4:	08006bb8 	.word	0x08006bb8
 80061d8:	08006bb8 	.word	0x08006bb8
 80061dc:	08006bb8 	.word	0x08006bb8
 80061e0:	08006bbc 	.word	0x08006bbc

080061e4 <__retarget_lock_acquire_recursive>:
 80061e4:	4770      	bx	lr

080061e6 <__retarget_lock_release_recursive>:
 80061e6:	4770      	bx	lr

080061e8 <memcpy>:
 80061e8:	440a      	add	r2, r1
 80061ea:	4291      	cmp	r1, r2
 80061ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80061f0:	d100      	bne.n	80061f4 <memcpy+0xc>
 80061f2:	4770      	bx	lr
 80061f4:	b510      	push	{r4, lr}
 80061f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061fe:	4291      	cmp	r1, r2
 8006200:	d1f9      	bne.n	80061f6 <memcpy+0xe>
 8006202:	bd10      	pop	{r4, pc}

08006204 <_free_r>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	4605      	mov	r5, r0
 8006208:	2900      	cmp	r1, #0
 800620a:	d041      	beq.n	8006290 <_free_r+0x8c>
 800620c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006210:	1f0c      	subs	r4, r1, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	bfb8      	it	lt
 8006216:	18e4      	addlt	r4, r4, r3
 8006218:	f000 f8e0 	bl	80063dc <__malloc_lock>
 800621c:	4a1d      	ldr	r2, [pc, #116]	@ (8006294 <_free_r+0x90>)
 800621e:	6813      	ldr	r3, [r2, #0]
 8006220:	b933      	cbnz	r3, 8006230 <_free_r+0x2c>
 8006222:	6063      	str	r3, [r4, #4]
 8006224:	6014      	str	r4, [r2, #0]
 8006226:	4628      	mov	r0, r5
 8006228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800622c:	f000 b8dc 	b.w	80063e8 <__malloc_unlock>
 8006230:	42a3      	cmp	r3, r4
 8006232:	d908      	bls.n	8006246 <_free_r+0x42>
 8006234:	6820      	ldr	r0, [r4, #0]
 8006236:	1821      	adds	r1, r4, r0
 8006238:	428b      	cmp	r3, r1
 800623a:	bf01      	itttt	eq
 800623c:	6819      	ldreq	r1, [r3, #0]
 800623e:	685b      	ldreq	r3, [r3, #4]
 8006240:	1809      	addeq	r1, r1, r0
 8006242:	6021      	streq	r1, [r4, #0]
 8006244:	e7ed      	b.n	8006222 <_free_r+0x1e>
 8006246:	461a      	mov	r2, r3
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	b10b      	cbz	r3, 8006250 <_free_r+0x4c>
 800624c:	42a3      	cmp	r3, r4
 800624e:	d9fa      	bls.n	8006246 <_free_r+0x42>
 8006250:	6811      	ldr	r1, [r2, #0]
 8006252:	1850      	adds	r0, r2, r1
 8006254:	42a0      	cmp	r0, r4
 8006256:	d10b      	bne.n	8006270 <_free_r+0x6c>
 8006258:	6820      	ldr	r0, [r4, #0]
 800625a:	4401      	add	r1, r0
 800625c:	1850      	adds	r0, r2, r1
 800625e:	4283      	cmp	r3, r0
 8006260:	6011      	str	r1, [r2, #0]
 8006262:	d1e0      	bne.n	8006226 <_free_r+0x22>
 8006264:	6818      	ldr	r0, [r3, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	6053      	str	r3, [r2, #4]
 800626a:	4408      	add	r0, r1
 800626c:	6010      	str	r0, [r2, #0]
 800626e:	e7da      	b.n	8006226 <_free_r+0x22>
 8006270:	d902      	bls.n	8006278 <_free_r+0x74>
 8006272:	230c      	movs	r3, #12
 8006274:	602b      	str	r3, [r5, #0]
 8006276:	e7d6      	b.n	8006226 <_free_r+0x22>
 8006278:	6820      	ldr	r0, [r4, #0]
 800627a:	1821      	adds	r1, r4, r0
 800627c:	428b      	cmp	r3, r1
 800627e:	bf04      	itt	eq
 8006280:	6819      	ldreq	r1, [r3, #0]
 8006282:	685b      	ldreq	r3, [r3, #4]
 8006284:	6063      	str	r3, [r4, #4]
 8006286:	bf04      	itt	eq
 8006288:	1809      	addeq	r1, r1, r0
 800628a:	6021      	streq	r1, [r4, #0]
 800628c:	6054      	str	r4, [r2, #4]
 800628e:	e7ca      	b.n	8006226 <_free_r+0x22>
 8006290:	bd38      	pop	{r3, r4, r5, pc}
 8006292:	bf00      	nop
 8006294:	20004728 	.word	0x20004728

08006298 <sbrk_aligned>:
 8006298:	b570      	push	{r4, r5, r6, lr}
 800629a:	4e0f      	ldr	r6, [pc, #60]	@ (80062d8 <sbrk_aligned+0x40>)
 800629c:	460c      	mov	r4, r1
 800629e:	6831      	ldr	r1, [r6, #0]
 80062a0:	4605      	mov	r5, r0
 80062a2:	b911      	cbnz	r1, 80062aa <sbrk_aligned+0x12>
 80062a4:	f000 fba6 	bl	80069f4 <_sbrk_r>
 80062a8:	6030      	str	r0, [r6, #0]
 80062aa:	4621      	mov	r1, r4
 80062ac:	4628      	mov	r0, r5
 80062ae:	f000 fba1 	bl	80069f4 <_sbrk_r>
 80062b2:	1c43      	adds	r3, r0, #1
 80062b4:	d103      	bne.n	80062be <sbrk_aligned+0x26>
 80062b6:	f04f 34ff 	mov.w	r4, #4294967295
 80062ba:	4620      	mov	r0, r4
 80062bc:	bd70      	pop	{r4, r5, r6, pc}
 80062be:	1cc4      	adds	r4, r0, #3
 80062c0:	f024 0403 	bic.w	r4, r4, #3
 80062c4:	42a0      	cmp	r0, r4
 80062c6:	d0f8      	beq.n	80062ba <sbrk_aligned+0x22>
 80062c8:	1a21      	subs	r1, r4, r0
 80062ca:	4628      	mov	r0, r5
 80062cc:	f000 fb92 	bl	80069f4 <_sbrk_r>
 80062d0:	3001      	adds	r0, #1
 80062d2:	d1f2      	bne.n	80062ba <sbrk_aligned+0x22>
 80062d4:	e7ef      	b.n	80062b6 <sbrk_aligned+0x1e>
 80062d6:	bf00      	nop
 80062d8:	20004724 	.word	0x20004724

080062dc <_malloc_r>:
 80062dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062e0:	1ccd      	adds	r5, r1, #3
 80062e2:	f025 0503 	bic.w	r5, r5, #3
 80062e6:	3508      	adds	r5, #8
 80062e8:	2d0c      	cmp	r5, #12
 80062ea:	bf38      	it	cc
 80062ec:	250c      	movcc	r5, #12
 80062ee:	2d00      	cmp	r5, #0
 80062f0:	4606      	mov	r6, r0
 80062f2:	db01      	blt.n	80062f8 <_malloc_r+0x1c>
 80062f4:	42a9      	cmp	r1, r5
 80062f6:	d904      	bls.n	8006302 <_malloc_r+0x26>
 80062f8:	230c      	movs	r3, #12
 80062fa:	6033      	str	r3, [r6, #0]
 80062fc:	2000      	movs	r0, #0
 80062fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006302:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063d8 <_malloc_r+0xfc>
 8006306:	f000 f869 	bl	80063dc <__malloc_lock>
 800630a:	f8d8 3000 	ldr.w	r3, [r8]
 800630e:	461c      	mov	r4, r3
 8006310:	bb44      	cbnz	r4, 8006364 <_malloc_r+0x88>
 8006312:	4629      	mov	r1, r5
 8006314:	4630      	mov	r0, r6
 8006316:	f7ff ffbf 	bl	8006298 <sbrk_aligned>
 800631a:	1c43      	adds	r3, r0, #1
 800631c:	4604      	mov	r4, r0
 800631e:	d158      	bne.n	80063d2 <_malloc_r+0xf6>
 8006320:	f8d8 4000 	ldr.w	r4, [r8]
 8006324:	4627      	mov	r7, r4
 8006326:	2f00      	cmp	r7, #0
 8006328:	d143      	bne.n	80063b2 <_malloc_r+0xd6>
 800632a:	2c00      	cmp	r4, #0
 800632c:	d04b      	beq.n	80063c6 <_malloc_r+0xea>
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	4639      	mov	r1, r7
 8006332:	4630      	mov	r0, r6
 8006334:	eb04 0903 	add.w	r9, r4, r3
 8006338:	f000 fb5c 	bl	80069f4 <_sbrk_r>
 800633c:	4581      	cmp	r9, r0
 800633e:	d142      	bne.n	80063c6 <_malloc_r+0xea>
 8006340:	6821      	ldr	r1, [r4, #0]
 8006342:	1a6d      	subs	r5, r5, r1
 8006344:	4629      	mov	r1, r5
 8006346:	4630      	mov	r0, r6
 8006348:	f7ff ffa6 	bl	8006298 <sbrk_aligned>
 800634c:	3001      	adds	r0, #1
 800634e:	d03a      	beq.n	80063c6 <_malloc_r+0xea>
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	442b      	add	r3, r5
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	f8d8 3000 	ldr.w	r3, [r8]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	bb62      	cbnz	r2, 80063b8 <_malloc_r+0xdc>
 800635e:	f8c8 7000 	str.w	r7, [r8]
 8006362:	e00f      	b.n	8006384 <_malloc_r+0xa8>
 8006364:	6822      	ldr	r2, [r4, #0]
 8006366:	1b52      	subs	r2, r2, r5
 8006368:	d420      	bmi.n	80063ac <_malloc_r+0xd0>
 800636a:	2a0b      	cmp	r2, #11
 800636c:	d917      	bls.n	800639e <_malloc_r+0xc2>
 800636e:	1961      	adds	r1, r4, r5
 8006370:	42a3      	cmp	r3, r4
 8006372:	6025      	str	r5, [r4, #0]
 8006374:	bf18      	it	ne
 8006376:	6059      	strne	r1, [r3, #4]
 8006378:	6863      	ldr	r3, [r4, #4]
 800637a:	bf08      	it	eq
 800637c:	f8c8 1000 	streq.w	r1, [r8]
 8006380:	5162      	str	r2, [r4, r5]
 8006382:	604b      	str	r3, [r1, #4]
 8006384:	4630      	mov	r0, r6
 8006386:	f000 f82f 	bl	80063e8 <__malloc_unlock>
 800638a:	f104 000b 	add.w	r0, r4, #11
 800638e:	1d23      	adds	r3, r4, #4
 8006390:	f020 0007 	bic.w	r0, r0, #7
 8006394:	1ac2      	subs	r2, r0, r3
 8006396:	bf1c      	itt	ne
 8006398:	1a1b      	subne	r3, r3, r0
 800639a:	50a3      	strne	r3, [r4, r2]
 800639c:	e7af      	b.n	80062fe <_malloc_r+0x22>
 800639e:	6862      	ldr	r2, [r4, #4]
 80063a0:	42a3      	cmp	r3, r4
 80063a2:	bf0c      	ite	eq
 80063a4:	f8c8 2000 	streq.w	r2, [r8]
 80063a8:	605a      	strne	r2, [r3, #4]
 80063aa:	e7eb      	b.n	8006384 <_malloc_r+0xa8>
 80063ac:	4623      	mov	r3, r4
 80063ae:	6864      	ldr	r4, [r4, #4]
 80063b0:	e7ae      	b.n	8006310 <_malloc_r+0x34>
 80063b2:	463c      	mov	r4, r7
 80063b4:	687f      	ldr	r7, [r7, #4]
 80063b6:	e7b6      	b.n	8006326 <_malloc_r+0x4a>
 80063b8:	461a      	mov	r2, r3
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	42a3      	cmp	r3, r4
 80063be:	d1fb      	bne.n	80063b8 <_malloc_r+0xdc>
 80063c0:	2300      	movs	r3, #0
 80063c2:	6053      	str	r3, [r2, #4]
 80063c4:	e7de      	b.n	8006384 <_malloc_r+0xa8>
 80063c6:	230c      	movs	r3, #12
 80063c8:	6033      	str	r3, [r6, #0]
 80063ca:	4630      	mov	r0, r6
 80063cc:	f000 f80c 	bl	80063e8 <__malloc_unlock>
 80063d0:	e794      	b.n	80062fc <_malloc_r+0x20>
 80063d2:	6005      	str	r5, [r0, #0]
 80063d4:	e7d6      	b.n	8006384 <_malloc_r+0xa8>
 80063d6:	bf00      	nop
 80063d8:	20004728 	.word	0x20004728

080063dc <__malloc_lock>:
 80063dc:	4801      	ldr	r0, [pc, #4]	@ (80063e4 <__malloc_lock+0x8>)
 80063de:	f7ff bf01 	b.w	80061e4 <__retarget_lock_acquire_recursive>
 80063e2:	bf00      	nop
 80063e4:	20004720 	.word	0x20004720

080063e8 <__malloc_unlock>:
 80063e8:	4801      	ldr	r0, [pc, #4]	@ (80063f0 <__malloc_unlock+0x8>)
 80063ea:	f7ff befc 	b.w	80061e6 <__retarget_lock_release_recursive>
 80063ee:	bf00      	nop
 80063f0:	20004720 	.word	0x20004720

080063f4 <__ssputs_r>:
 80063f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f8:	688e      	ldr	r6, [r1, #8]
 80063fa:	461f      	mov	r7, r3
 80063fc:	42be      	cmp	r6, r7
 80063fe:	680b      	ldr	r3, [r1, #0]
 8006400:	4682      	mov	sl, r0
 8006402:	460c      	mov	r4, r1
 8006404:	4690      	mov	r8, r2
 8006406:	d82d      	bhi.n	8006464 <__ssputs_r+0x70>
 8006408:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800640c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006410:	d026      	beq.n	8006460 <__ssputs_r+0x6c>
 8006412:	6965      	ldr	r5, [r4, #20]
 8006414:	6909      	ldr	r1, [r1, #16]
 8006416:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800641a:	eba3 0901 	sub.w	r9, r3, r1
 800641e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006422:	1c7b      	adds	r3, r7, #1
 8006424:	444b      	add	r3, r9
 8006426:	106d      	asrs	r5, r5, #1
 8006428:	429d      	cmp	r5, r3
 800642a:	bf38      	it	cc
 800642c:	461d      	movcc	r5, r3
 800642e:	0553      	lsls	r3, r2, #21
 8006430:	d527      	bpl.n	8006482 <__ssputs_r+0x8e>
 8006432:	4629      	mov	r1, r5
 8006434:	f7ff ff52 	bl	80062dc <_malloc_r>
 8006438:	4606      	mov	r6, r0
 800643a:	b360      	cbz	r0, 8006496 <__ssputs_r+0xa2>
 800643c:	6921      	ldr	r1, [r4, #16]
 800643e:	464a      	mov	r2, r9
 8006440:	f7ff fed2 	bl	80061e8 <memcpy>
 8006444:	89a3      	ldrh	r3, [r4, #12]
 8006446:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800644a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800644e:	81a3      	strh	r3, [r4, #12]
 8006450:	6126      	str	r6, [r4, #16]
 8006452:	6165      	str	r5, [r4, #20]
 8006454:	444e      	add	r6, r9
 8006456:	eba5 0509 	sub.w	r5, r5, r9
 800645a:	6026      	str	r6, [r4, #0]
 800645c:	60a5      	str	r5, [r4, #8]
 800645e:	463e      	mov	r6, r7
 8006460:	42be      	cmp	r6, r7
 8006462:	d900      	bls.n	8006466 <__ssputs_r+0x72>
 8006464:	463e      	mov	r6, r7
 8006466:	6820      	ldr	r0, [r4, #0]
 8006468:	4632      	mov	r2, r6
 800646a:	4641      	mov	r1, r8
 800646c:	f000 faa8 	bl	80069c0 <memmove>
 8006470:	68a3      	ldr	r3, [r4, #8]
 8006472:	1b9b      	subs	r3, r3, r6
 8006474:	60a3      	str	r3, [r4, #8]
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	4433      	add	r3, r6
 800647a:	6023      	str	r3, [r4, #0]
 800647c:	2000      	movs	r0, #0
 800647e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006482:	462a      	mov	r2, r5
 8006484:	f000 fac6 	bl	8006a14 <_realloc_r>
 8006488:	4606      	mov	r6, r0
 800648a:	2800      	cmp	r0, #0
 800648c:	d1e0      	bne.n	8006450 <__ssputs_r+0x5c>
 800648e:	6921      	ldr	r1, [r4, #16]
 8006490:	4650      	mov	r0, sl
 8006492:	f7ff feb7 	bl	8006204 <_free_r>
 8006496:	230c      	movs	r3, #12
 8006498:	f8ca 3000 	str.w	r3, [sl]
 800649c:	89a3      	ldrh	r3, [r4, #12]
 800649e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064a2:	81a3      	strh	r3, [r4, #12]
 80064a4:	f04f 30ff 	mov.w	r0, #4294967295
 80064a8:	e7e9      	b.n	800647e <__ssputs_r+0x8a>
	...

080064ac <_svfiprintf_r>:
 80064ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b0:	4698      	mov	r8, r3
 80064b2:	898b      	ldrh	r3, [r1, #12]
 80064b4:	061b      	lsls	r3, r3, #24
 80064b6:	b09d      	sub	sp, #116	@ 0x74
 80064b8:	4607      	mov	r7, r0
 80064ba:	460d      	mov	r5, r1
 80064bc:	4614      	mov	r4, r2
 80064be:	d510      	bpl.n	80064e2 <_svfiprintf_r+0x36>
 80064c0:	690b      	ldr	r3, [r1, #16]
 80064c2:	b973      	cbnz	r3, 80064e2 <_svfiprintf_r+0x36>
 80064c4:	2140      	movs	r1, #64	@ 0x40
 80064c6:	f7ff ff09 	bl	80062dc <_malloc_r>
 80064ca:	6028      	str	r0, [r5, #0]
 80064cc:	6128      	str	r0, [r5, #16]
 80064ce:	b930      	cbnz	r0, 80064de <_svfiprintf_r+0x32>
 80064d0:	230c      	movs	r3, #12
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	f04f 30ff 	mov.w	r0, #4294967295
 80064d8:	b01d      	add	sp, #116	@ 0x74
 80064da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064de:	2340      	movs	r3, #64	@ 0x40
 80064e0:	616b      	str	r3, [r5, #20]
 80064e2:	2300      	movs	r3, #0
 80064e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80064e6:	2320      	movs	r3, #32
 80064e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80064f0:	2330      	movs	r3, #48	@ 0x30
 80064f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006690 <_svfiprintf_r+0x1e4>
 80064f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064fa:	f04f 0901 	mov.w	r9, #1
 80064fe:	4623      	mov	r3, r4
 8006500:	469a      	mov	sl, r3
 8006502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006506:	b10a      	cbz	r2, 800650c <_svfiprintf_r+0x60>
 8006508:	2a25      	cmp	r2, #37	@ 0x25
 800650a:	d1f9      	bne.n	8006500 <_svfiprintf_r+0x54>
 800650c:	ebba 0b04 	subs.w	fp, sl, r4
 8006510:	d00b      	beq.n	800652a <_svfiprintf_r+0x7e>
 8006512:	465b      	mov	r3, fp
 8006514:	4622      	mov	r2, r4
 8006516:	4629      	mov	r1, r5
 8006518:	4638      	mov	r0, r7
 800651a:	f7ff ff6b 	bl	80063f4 <__ssputs_r>
 800651e:	3001      	adds	r0, #1
 8006520:	f000 80a7 	beq.w	8006672 <_svfiprintf_r+0x1c6>
 8006524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006526:	445a      	add	r2, fp
 8006528:	9209      	str	r2, [sp, #36]	@ 0x24
 800652a:	f89a 3000 	ldrb.w	r3, [sl]
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 809f 	beq.w	8006672 <_svfiprintf_r+0x1c6>
 8006534:	2300      	movs	r3, #0
 8006536:	f04f 32ff 	mov.w	r2, #4294967295
 800653a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800653e:	f10a 0a01 	add.w	sl, sl, #1
 8006542:	9304      	str	r3, [sp, #16]
 8006544:	9307      	str	r3, [sp, #28]
 8006546:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800654a:	931a      	str	r3, [sp, #104]	@ 0x68
 800654c:	4654      	mov	r4, sl
 800654e:	2205      	movs	r2, #5
 8006550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006554:	484e      	ldr	r0, [pc, #312]	@ (8006690 <_svfiprintf_r+0x1e4>)
 8006556:	f7f9 fe43 	bl	80001e0 <memchr>
 800655a:	9a04      	ldr	r2, [sp, #16]
 800655c:	b9d8      	cbnz	r0, 8006596 <_svfiprintf_r+0xea>
 800655e:	06d0      	lsls	r0, r2, #27
 8006560:	bf44      	itt	mi
 8006562:	2320      	movmi	r3, #32
 8006564:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006568:	0711      	lsls	r1, r2, #28
 800656a:	bf44      	itt	mi
 800656c:	232b      	movmi	r3, #43	@ 0x2b
 800656e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006572:	f89a 3000 	ldrb.w	r3, [sl]
 8006576:	2b2a      	cmp	r3, #42	@ 0x2a
 8006578:	d015      	beq.n	80065a6 <_svfiprintf_r+0xfa>
 800657a:	9a07      	ldr	r2, [sp, #28]
 800657c:	4654      	mov	r4, sl
 800657e:	2000      	movs	r0, #0
 8006580:	f04f 0c0a 	mov.w	ip, #10
 8006584:	4621      	mov	r1, r4
 8006586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800658a:	3b30      	subs	r3, #48	@ 0x30
 800658c:	2b09      	cmp	r3, #9
 800658e:	d94b      	bls.n	8006628 <_svfiprintf_r+0x17c>
 8006590:	b1b0      	cbz	r0, 80065c0 <_svfiprintf_r+0x114>
 8006592:	9207      	str	r2, [sp, #28]
 8006594:	e014      	b.n	80065c0 <_svfiprintf_r+0x114>
 8006596:	eba0 0308 	sub.w	r3, r0, r8
 800659a:	fa09 f303 	lsl.w	r3, r9, r3
 800659e:	4313      	orrs	r3, r2
 80065a0:	9304      	str	r3, [sp, #16]
 80065a2:	46a2      	mov	sl, r4
 80065a4:	e7d2      	b.n	800654c <_svfiprintf_r+0xa0>
 80065a6:	9b03      	ldr	r3, [sp, #12]
 80065a8:	1d19      	adds	r1, r3, #4
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	9103      	str	r1, [sp, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	bfbb      	ittet	lt
 80065b2:	425b      	neglt	r3, r3
 80065b4:	f042 0202 	orrlt.w	r2, r2, #2
 80065b8:	9307      	strge	r3, [sp, #28]
 80065ba:	9307      	strlt	r3, [sp, #28]
 80065bc:	bfb8      	it	lt
 80065be:	9204      	strlt	r2, [sp, #16]
 80065c0:	7823      	ldrb	r3, [r4, #0]
 80065c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80065c4:	d10a      	bne.n	80065dc <_svfiprintf_r+0x130>
 80065c6:	7863      	ldrb	r3, [r4, #1]
 80065c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80065ca:	d132      	bne.n	8006632 <_svfiprintf_r+0x186>
 80065cc:	9b03      	ldr	r3, [sp, #12]
 80065ce:	1d1a      	adds	r2, r3, #4
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	9203      	str	r2, [sp, #12]
 80065d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80065d8:	3402      	adds	r4, #2
 80065da:	9305      	str	r3, [sp, #20]
 80065dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80066a0 <_svfiprintf_r+0x1f4>
 80065e0:	7821      	ldrb	r1, [r4, #0]
 80065e2:	2203      	movs	r2, #3
 80065e4:	4650      	mov	r0, sl
 80065e6:	f7f9 fdfb 	bl	80001e0 <memchr>
 80065ea:	b138      	cbz	r0, 80065fc <_svfiprintf_r+0x150>
 80065ec:	9b04      	ldr	r3, [sp, #16]
 80065ee:	eba0 000a 	sub.w	r0, r0, sl
 80065f2:	2240      	movs	r2, #64	@ 0x40
 80065f4:	4082      	lsls	r2, r0
 80065f6:	4313      	orrs	r3, r2
 80065f8:	3401      	adds	r4, #1
 80065fa:	9304      	str	r3, [sp, #16]
 80065fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006600:	4824      	ldr	r0, [pc, #144]	@ (8006694 <_svfiprintf_r+0x1e8>)
 8006602:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006606:	2206      	movs	r2, #6
 8006608:	f7f9 fdea 	bl	80001e0 <memchr>
 800660c:	2800      	cmp	r0, #0
 800660e:	d036      	beq.n	800667e <_svfiprintf_r+0x1d2>
 8006610:	4b21      	ldr	r3, [pc, #132]	@ (8006698 <_svfiprintf_r+0x1ec>)
 8006612:	bb1b      	cbnz	r3, 800665c <_svfiprintf_r+0x1b0>
 8006614:	9b03      	ldr	r3, [sp, #12]
 8006616:	3307      	adds	r3, #7
 8006618:	f023 0307 	bic.w	r3, r3, #7
 800661c:	3308      	adds	r3, #8
 800661e:	9303      	str	r3, [sp, #12]
 8006620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006622:	4433      	add	r3, r6
 8006624:	9309      	str	r3, [sp, #36]	@ 0x24
 8006626:	e76a      	b.n	80064fe <_svfiprintf_r+0x52>
 8006628:	fb0c 3202 	mla	r2, ip, r2, r3
 800662c:	460c      	mov	r4, r1
 800662e:	2001      	movs	r0, #1
 8006630:	e7a8      	b.n	8006584 <_svfiprintf_r+0xd8>
 8006632:	2300      	movs	r3, #0
 8006634:	3401      	adds	r4, #1
 8006636:	9305      	str	r3, [sp, #20]
 8006638:	4619      	mov	r1, r3
 800663a:	f04f 0c0a 	mov.w	ip, #10
 800663e:	4620      	mov	r0, r4
 8006640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006644:	3a30      	subs	r2, #48	@ 0x30
 8006646:	2a09      	cmp	r2, #9
 8006648:	d903      	bls.n	8006652 <_svfiprintf_r+0x1a6>
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0c6      	beq.n	80065dc <_svfiprintf_r+0x130>
 800664e:	9105      	str	r1, [sp, #20]
 8006650:	e7c4      	b.n	80065dc <_svfiprintf_r+0x130>
 8006652:	fb0c 2101 	mla	r1, ip, r1, r2
 8006656:	4604      	mov	r4, r0
 8006658:	2301      	movs	r3, #1
 800665a:	e7f0      	b.n	800663e <_svfiprintf_r+0x192>
 800665c:	ab03      	add	r3, sp, #12
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	462a      	mov	r2, r5
 8006662:	4b0e      	ldr	r3, [pc, #56]	@ (800669c <_svfiprintf_r+0x1f0>)
 8006664:	a904      	add	r1, sp, #16
 8006666:	4638      	mov	r0, r7
 8006668:	f3af 8000 	nop.w
 800666c:	1c42      	adds	r2, r0, #1
 800666e:	4606      	mov	r6, r0
 8006670:	d1d6      	bne.n	8006620 <_svfiprintf_r+0x174>
 8006672:	89ab      	ldrh	r3, [r5, #12]
 8006674:	065b      	lsls	r3, r3, #25
 8006676:	f53f af2d 	bmi.w	80064d4 <_svfiprintf_r+0x28>
 800667a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800667c:	e72c      	b.n	80064d8 <_svfiprintf_r+0x2c>
 800667e:	ab03      	add	r3, sp, #12
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	462a      	mov	r2, r5
 8006684:	4b05      	ldr	r3, [pc, #20]	@ (800669c <_svfiprintf_r+0x1f0>)
 8006686:	a904      	add	r1, sp, #16
 8006688:	4638      	mov	r0, r7
 800668a:	f000 f879 	bl	8006780 <_printf_i>
 800668e:	e7ed      	b.n	800666c <_svfiprintf_r+0x1c0>
 8006690:	08006b7c 	.word	0x08006b7c
 8006694:	08006b86 	.word	0x08006b86
 8006698:	00000000 	.word	0x00000000
 800669c:	080063f5 	.word	0x080063f5
 80066a0:	08006b82 	.word	0x08006b82

080066a4 <_printf_common>:
 80066a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a8:	4616      	mov	r6, r2
 80066aa:	4698      	mov	r8, r3
 80066ac:	688a      	ldr	r2, [r1, #8]
 80066ae:	690b      	ldr	r3, [r1, #16]
 80066b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066b4:	4293      	cmp	r3, r2
 80066b6:	bfb8      	it	lt
 80066b8:	4613      	movlt	r3, r2
 80066ba:	6033      	str	r3, [r6, #0]
 80066bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066c0:	4607      	mov	r7, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	b10a      	cbz	r2, 80066ca <_printf_common+0x26>
 80066c6:	3301      	adds	r3, #1
 80066c8:	6033      	str	r3, [r6, #0]
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	0699      	lsls	r1, r3, #26
 80066ce:	bf42      	ittt	mi
 80066d0:	6833      	ldrmi	r3, [r6, #0]
 80066d2:	3302      	addmi	r3, #2
 80066d4:	6033      	strmi	r3, [r6, #0]
 80066d6:	6825      	ldr	r5, [r4, #0]
 80066d8:	f015 0506 	ands.w	r5, r5, #6
 80066dc:	d106      	bne.n	80066ec <_printf_common+0x48>
 80066de:	f104 0a19 	add.w	sl, r4, #25
 80066e2:	68e3      	ldr	r3, [r4, #12]
 80066e4:	6832      	ldr	r2, [r6, #0]
 80066e6:	1a9b      	subs	r3, r3, r2
 80066e8:	42ab      	cmp	r3, r5
 80066ea:	dc26      	bgt.n	800673a <_printf_common+0x96>
 80066ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80066f0:	6822      	ldr	r2, [r4, #0]
 80066f2:	3b00      	subs	r3, #0
 80066f4:	bf18      	it	ne
 80066f6:	2301      	movne	r3, #1
 80066f8:	0692      	lsls	r2, r2, #26
 80066fa:	d42b      	bmi.n	8006754 <_printf_common+0xb0>
 80066fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006700:	4641      	mov	r1, r8
 8006702:	4638      	mov	r0, r7
 8006704:	47c8      	blx	r9
 8006706:	3001      	adds	r0, #1
 8006708:	d01e      	beq.n	8006748 <_printf_common+0xa4>
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	6922      	ldr	r2, [r4, #16]
 800670e:	f003 0306 	and.w	r3, r3, #6
 8006712:	2b04      	cmp	r3, #4
 8006714:	bf02      	ittt	eq
 8006716:	68e5      	ldreq	r5, [r4, #12]
 8006718:	6833      	ldreq	r3, [r6, #0]
 800671a:	1aed      	subeq	r5, r5, r3
 800671c:	68a3      	ldr	r3, [r4, #8]
 800671e:	bf0c      	ite	eq
 8006720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006724:	2500      	movne	r5, #0
 8006726:	4293      	cmp	r3, r2
 8006728:	bfc4      	itt	gt
 800672a:	1a9b      	subgt	r3, r3, r2
 800672c:	18ed      	addgt	r5, r5, r3
 800672e:	2600      	movs	r6, #0
 8006730:	341a      	adds	r4, #26
 8006732:	42b5      	cmp	r5, r6
 8006734:	d11a      	bne.n	800676c <_printf_common+0xc8>
 8006736:	2000      	movs	r0, #0
 8006738:	e008      	b.n	800674c <_printf_common+0xa8>
 800673a:	2301      	movs	r3, #1
 800673c:	4652      	mov	r2, sl
 800673e:	4641      	mov	r1, r8
 8006740:	4638      	mov	r0, r7
 8006742:	47c8      	blx	r9
 8006744:	3001      	adds	r0, #1
 8006746:	d103      	bne.n	8006750 <_printf_common+0xac>
 8006748:	f04f 30ff 	mov.w	r0, #4294967295
 800674c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006750:	3501      	adds	r5, #1
 8006752:	e7c6      	b.n	80066e2 <_printf_common+0x3e>
 8006754:	18e1      	adds	r1, r4, r3
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	2030      	movs	r0, #48	@ 0x30
 800675a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800675e:	4422      	add	r2, r4
 8006760:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006764:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006768:	3302      	adds	r3, #2
 800676a:	e7c7      	b.n	80066fc <_printf_common+0x58>
 800676c:	2301      	movs	r3, #1
 800676e:	4622      	mov	r2, r4
 8006770:	4641      	mov	r1, r8
 8006772:	4638      	mov	r0, r7
 8006774:	47c8      	blx	r9
 8006776:	3001      	adds	r0, #1
 8006778:	d0e6      	beq.n	8006748 <_printf_common+0xa4>
 800677a:	3601      	adds	r6, #1
 800677c:	e7d9      	b.n	8006732 <_printf_common+0x8e>
	...

08006780 <_printf_i>:
 8006780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006784:	7e0f      	ldrb	r7, [r1, #24]
 8006786:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006788:	2f78      	cmp	r7, #120	@ 0x78
 800678a:	4691      	mov	r9, r2
 800678c:	4680      	mov	r8, r0
 800678e:	460c      	mov	r4, r1
 8006790:	469a      	mov	sl, r3
 8006792:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006796:	d807      	bhi.n	80067a8 <_printf_i+0x28>
 8006798:	2f62      	cmp	r7, #98	@ 0x62
 800679a:	d80a      	bhi.n	80067b2 <_printf_i+0x32>
 800679c:	2f00      	cmp	r7, #0
 800679e:	f000 80d2 	beq.w	8006946 <_printf_i+0x1c6>
 80067a2:	2f58      	cmp	r7, #88	@ 0x58
 80067a4:	f000 80b9 	beq.w	800691a <_printf_i+0x19a>
 80067a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067b0:	e03a      	b.n	8006828 <_printf_i+0xa8>
 80067b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067b6:	2b15      	cmp	r3, #21
 80067b8:	d8f6      	bhi.n	80067a8 <_printf_i+0x28>
 80067ba:	a101      	add	r1, pc, #4	@ (adr r1, 80067c0 <_printf_i+0x40>)
 80067bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067c0:	08006819 	.word	0x08006819
 80067c4:	0800682d 	.word	0x0800682d
 80067c8:	080067a9 	.word	0x080067a9
 80067cc:	080067a9 	.word	0x080067a9
 80067d0:	080067a9 	.word	0x080067a9
 80067d4:	080067a9 	.word	0x080067a9
 80067d8:	0800682d 	.word	0x0800682d
 80067dc:	080067a9 	.word	0x080067a9
 80067e0:	080067a9 	.word	0x080067a9
 80067e4:	080067a9 	.word	0x080067a9
 80067e8:	080067a9 	.word	0x080067a9
 80067ec:	0800692d 	.word	0x0800692d
 80067f0:	08006857 	.word	0x08006857
 80067f4:	080068e7 	.word	0x080068e7
 80067f8:	080067a9 	.word	0x080067a9
 80067fc:	080067a9 	.word	0x080067a9
 8006800:	0800694f 	.word	0x0800694f
 8006804:	080067a9 	.word	0x080067a9
 8006808:	08006857 	.word	0x08006857
 800680c:	080067a9 	.word	0x080067a9
 8006810:	080067a9 	.word	0x080067a9
 8006814:	080068ef 	.word	0x080068ef
 8006818:	6833      	ldr	r3, [r6, #0]
 800681a:	1d1a      	adds	r2, r3, #4
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6032      	str	r2, [r6, #0]
 8006820:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006824:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006828:	2301      	movs	r3, #1
 800682a:	e09d      	b.n	8006968 <_printf_i+0x1e8>
 800682c:	6833      	ldr	r3, [r6, #0]
 800682e:	6820      	ldr	r0, [r4, #0]
 8006830:	1d19      	adds	r1, r3, #4
 8006832:	6031      	str	r1, [r6, #0]
 8006834:	0606      	lsls	r6, r0, #24
 8006836:	d501      	bpl.n	800683c <_printf_i+0xbc>
 8006838:	681d      	ldr	r5, [r3, #0]
 800683a:	e003      	b.n	8006844 <_printf_i+0xc4>
 800683c:	0645      	lsls	r5, r0, #25
 800683e:	d5fb      	bpl.n	8006838 <_printf_i+0xb8>
 8006840:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006844:	2d00      	cmp	r5, #0
 8006846:	da03      	bge.n	8006850 <_printf_i+0xd0>
 8006848:	232d      	movs	r3, #45	@ 0x2d
 800684a:	426d      	negs	r5, r5
 800684c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006850:	4859      	ldr	r0, [pc, #356]	@ (80069b8 <_printf_i+0x238>)
 8006852:	230a      	movs	r3, #10
 8006854:	e011      	b.n	800687a <_printf_i+0xfa>
 8006856:	6821      	ldr	r1, [r4, #0]
 8006858:	6833      	ldr	r3, [r6, #0]
 800685a:	0608      	lsls	r0, r1, #24
 800685c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006860:	d402      	bmi.n	8006868 <_printf_i+0xe8>
 8006862:	0649      	lsls	r1, r1, #25
 8006864:	bf48      	it	mi
 8006866:	b2ad      	uxthmi	r5, r5
 8006868:	2f6f      	cmp	r7, #111	@ 0x6f
 800686a:	4853      	ldr	r0, [pc, #332]	@ (80069b8 <_printf_i+0x238>)
 800686c:	6033      	str	r3, [r6, #0]
 800686e:	bf14      	ite	ne
 8006870:	230a      	movne	r3, #10
 8006872:	2308      	moveq	r3, #8
 8006874:	2100      	movs	r1, #0
 8006876:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800687a:	6866      	ldr	r6, [r4, #4]
 800687c:	60a6      	str	r6, [r4, #8]
 800687e:	2e00      	cmp	r6, #0
 8006880:	bfa2      	ittt	ge
 8006882:	6821      	ldrge	r1, [r4, #0]
 8006884:	f021 0104 	bicge.w	r1, r1, #4
 8006888:	6021      	strge	r1, [r4, #0]
 800688a:	b90d      	cbnz	r5, 8006890 <_printf_i+0x110>
 800688c:	2e00      	cmp	r6, #0
 800688e:	d04b      	beq.n	8006928 <_printf_i+0x1a8>
 8006890:	4616      	mov	r6, r2
 8006892:	fbb5 f1f3 	udiv	r1, r5, r3
 8006896:	fb03 5711 	mls	r7, r3, r1, r5
 800689a:	5dc7      	ldrb	r7, [r0, r7]
 800689c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068a0:	462f      	mov	r7, r5
 80068a2:	42bb      	cmp	r3, r7
 80068a4:	460d      	mov	r5, r1
 80068a6:	d9f4      	bls.n	8006892 <_printf_i+0x112>
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d10b      	bne.n	80068c4 <_printf_i+0x144>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	07df      	lsls	r7, r3, #31
 80068b0:	d508      	bpl.n	80068c4 <_printf_i+0x144>
 80068b2:	6923      	ldr	r3, [r4, #16]
 80068b4:	6861      	ldr	r1, [r4, #4]
 80068b6:	4299      	cmp	r1, r3
 80068b8:	bfde      	ittt	le
 80068ba:	2330      	movle	r3, #48	@ 0x30
 80068bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068c4:	1b92      	subs	r2, r2, r6
 80068c6:	6122      	str	r2, [r4, #16]
 80068c8:	f8cd a000 	str.w	sl, [sp]
 80068cc:	464b      	mov	r3, r9
 80068ce:	aa03      	add	r2, sp, #12
 80068d0:	4621      	mov	r1, r4
 80068d2:	4640      	mov	r0, r8
 80068d4:	f7ff fee6 	bl	80066a4 <_printf_common>
 80068d8:	3001      	adds	r0, #1
 80068da:	d14a      	bne.n	8006972 <_printf_i+0x1f2>
 80068dc:	f04f 30ff 	mov.w	r0, #4294967295
 80068e0:	b004      	add	sp, #16
 80068e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	f043 0320 	orr.w	r3, r3, #32
 80068ec:	6023      	str	r3, [r4, #0]
 80068ee:	4833      	ldr	r0, [pc, #204]	@ (80069bc <_printf_i+0x23c>)
 80068f0:	2778      	movs	r7, #120	@ 0x78
 80068f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	6831      	ldr	r1, [r6, #0]
 80068fa:	061f      	lsls	r7, r3, #24
 80068fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006900:	d402      	bmi.n	8006908 <_printf_i+0x188>
 8006902:	065f      	lsls	r7, r3, #25
 8006904:	bf48      	it	mi
 8006906:	b2ad      	uxthmi	r5, r5
 8006908:	6031      	str	r1, [r6, #0]
 800690a:	07d9      	lsls	r1, r3, #31
 800690c:	bf44      	itt	mi
 800690e:	f043 0320 	orrmi.w	r3, r3, #32
 8006912:	6023      	strmi	r3, [r4, #0]
 8006914:	b11d      	cbz	r5, 800691e <_printf_i+0x19e>
 8006916:	2310      	movs	r3, #16
 8006918:	e7ac      	b.n	8006874 <_printf_i+0xf4>
 800691a:	4827      	ldr	r0, [pc, #156]	@ (80069b8 <_printf_i+0x238>)
 800691c:	e7e9      	b.n	80068f2 <_printf_i+0x172>
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	f023 0320 	bic.w	r3, r3, #32
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	e7f6      	b.n	8006916 <_printf_i+0x196>
 8006928:	4616      	mov	r6, r2
 800692a:	e7bd      	b.n	80068a8 <_printf_i+0x128>
 800692c:	6833      	ldr	r3, [r6, #0]
 800692e:	6825      	ldr	r5, [r4, #0]
 8006930:	6961      	ldr	r1, [r4, #20]
 8006932:	1d18      	adds	r0, r3, #4
 8006934:	6030      	str	r0, [r6, #0]
 8006936:	062e      	lsls	r6, r5, #24
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	d501      	bpl.n	8006940 <_printf_i+0x1c0>
 800693c:	6019      	str	r1, [r3, #0]
 800693e:	e002      	b.n	8006946 <_printf_i+0x1c6>
 8006940:	0668      	lsls	r0, r5, #25
 8006942:	d5fb      	bpl.n	800693c <_printf_i+0x1bc>
 8006944:	8019      	strh	r1, [r3, #0]
 8006946:	2300      	movs	r3, #0
 8006948:	6123      	str	r3, [r4, #16]
 800694a:	4616      	mov	r6, r2
 800694c:	e7bc      	b.n	80068c8 <_printf_i+0x148>
 800694e:	6833      	ldr	r3, [r6, #0]
 8006950:	1d1a      	adds	r2, r3, #4
 8006952:	6032      	str	r2, [r6, #0]
 8006954:	681e      	ldr	r6, [r3, #0]
 8006956:	6862      	ldr	r2, [r4, #4]
 8006958:	2100      	movs	r1, #0
 800695a:	4630      	mov	r0, r6
 800695c:	f7f9 fc40 	bl	80001e0 <memchr>
 8006960:	b108      	cbz	r0, 8006966 <_printf_i+0x1e6>
 8006962:	1b80      	subs	r0, r0, r6
 8006964:	6060      	str	r0, [r4, #4]
 8006966:	6863      	ldr	r3, [r4, #4]
 8006968:	6123      	str	r3, [r4, #16]
 800696a:	2300      	movs	r3, #0
 800696c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006970:	e7aa      	b.n	80068c8 <_printf_i+0x148>
 8006972:	6923      	ldr	r3, [r4, #16]
 8006974:	4632      	mov	r2, r6
 8006976:	4649      	mov	r1, r9
 8006978:	4640      	mov	r0, r8
 800697a:	47d0      	blx	sl
 800697c:	3001      	adds	r0, #1
 800697e:	d0ad      	beq.n	80068dc <_printf_i+0x15c>
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	079b      	lsls	r3, r3, #30
 8006984:	d413      	bmi.n	80069ae <_printf_i+0x22e>
 8006986:	68e0      	ldr	r0, [r4, #12]
 8006988:	9b03      	ldr	r3, [sp, #12]
 800698a:	4298      	cmp	r0, r3
 800698c:	bfb8      	it	lt
 800698e:	4618      	movlt	r0, r3
 8006990:	e7a6      	b.n	80068e0 <_printf_i+0x160>
 8006992:	2301      	movs	r3, #1
 8006994:	4632      	mov	r2, r6
 8006996:	4649      	mov	r1, r9
 8006998:	4640      	mov	r0, r8
 800699a:	47d0      	blx	sl
 800699c:	3001      	adds	r0, #1
 800699e:	d09d      	beq.n	80068dc <_printf_i+0x15c>
 80069a0:	3501      	adds	r5, #1
 80069a2:	68e3      	ldr	r3, [r4, #12]
 80069a4:	9903      	ldr	r1, [sp, #12]
 80069a6:	1a5b      	subs	r3, r3, r1
 80069a8:	42ab      	cmp	r3, r5
 80069aa:	dcf2      	bgt.n	8006992 <_printf_i+0x212>
 80069ac:	e7eb      	b.n	8006986 <_printf_i+0x206>
 80069ae:	2500      	movs	r5, #0
 80069b0:	f104 0619 	add.w	r6, r4, #25
 80069b4:	e7f5      	b.n	80069a2 <_printf_i+0x222>
 80069b6:	bf00      	nop
 80069b8:	08006b8d 	.word	0x08006b8d
 80069bc:	08006b9e 	.word	0x08006b9e

080069c0 <memmove>:
 80069c0:	4288      	cmp	r0, r1
 80069c2:	b510      	push	{r4, lr}
 80069c4:	eb01 0402 	add.w	r4, r1, r2
 80069c8:	d902      	bls.n	80069d0 <memmove+0x10>
 80069ca:	4284      	cmp	r4, r0
 80069cc:	4623      	mov	r3, r4
 80069ce:	d807      	bhi.n	80069e0 <memmove+0x20>
 80069d0:	1e43      	subs	r3, r0, #1
 80069d2:	42a1      	cmp	r1, r4
 80069d4:	d008      	beq.n	80069e8 <memmove+0x28>
 80069d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069de:	e7f8      	b.n	80069d2 <memmove+0x12>
 80069e0:	4402      	add	r2, r0
 80069e2:	4601      	mov	r1, r0
 80069e4:	428a      	cmp	r2, r1
 80069e6:	d100      	bne.n	80069ea <memmove+0x2a>
 80069e8:	bd10      	pop	{r4, pc}
 80069ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069f2:	e7f7      	b.n	80069e4 <memmove+0x24>

080069f4 <_sbrk_r>:
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	4d06      	ldr	r5, [pc, #24]	@ (8006a10 <_sbrk_r+0x1c>)
 80069f8:	2300      	movs	r3, #0
 80069fa:	4604      	mov	r4, r0
 80069fc:	4608      	mov	r0, r1
 80069fe:	602b      	str	r3, [r5, #0]
 8006a00:	f7fa ff42 	bl	8001888 <_sbrk>
 8006a04:	1c43      	adds	r3, r0, #1
 8006a06:	d102      	bne.n	8006a0e <_sbrk_r+0x1a>
 8006a08:	682b      	ldr	r3, [r5, #0]
 8006a0a:	b103      	cbz	r3, 8006a0e <_sbrk_r+0x1a>
 8006a0c:	6023      	str	r3, [r4, #0]
 8006a0e:	bd38      	pop	{r3, r4, r5, pc}
 8006a10:	2000471c 	.word	0x2000471c

08006a14 <_realloc_r>:
 8006a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a18:	4680      	mov	r8, r0
 8006a1a:	4615      	mov	r5, r2
 8006a1c:	460c      	mov	r4, r1
 8006a1e:	b921      	cbnz	r1, 8006a2a <_realloc_r+0x16>
 8006a20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a24:	4611      	mov	r1, r2
 8006a26:	f7ff bc59 	b.w	80062dc <_malloc_r>
 8006a2a:	b92a      	cbnz	r2, 8006a38 <_realloc_r+0x24>
 8006a2c:	f7ff fbea 	bl	8006204 <_free_r>
 8006a30:	2400      	movs	r4, #0
 8006a32:	4620      	mov	r0, r4
 8006a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a38:	f000 f81a 	bl	8006a70 <_malloc_usable_size_r>
 8006a3c:	4285      	cmp	r5, r0
 8006a3e:	4606      	mov	r6, r0
 8006a40:	d802      	bhi.n	8006a48 <_realloc_r+0x34>
 8006a42:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006a46:	d8f4      	bhi.n	8006a32 <_realloc_r+0x1e>
 8006a48:	4629      	mov	r1, r5
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	f7ff fc46 	bl	80062dc <_malloc_r>
 8006a50:	4607      	mov	r7, r0
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d0ec      	beq.n	8006a30 <_realloc_r+0x1c>
 8006a56:	42b5      	cmp	r5, r6
 8006a58:	462a      	mov	r2, r5
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	bf28      	it	cs
 8006a5e:	4632      	movcs	r2, r6
 8006a60:	f7ff fbc2 	bl	80061e8 <memcpy>
 8006a64:	4621      	mov	r1, r4
 8006a66:	4640      	mov	r0, r8
 8006a68:	f7ff fbcc 	bl	8006204 <_free_r>
 8006a6c:	463c      	mov	r4, r7
 8006a6e:	e7e0      	b.n	8006a32 <_realloc_r+0x1e>

08006a70 <_malloc_usable_size_r>:
 8006a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a74:	1f18      	subs	r0, r3, #4
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	bfbc      	itt	lt
 8006a7a:	580b      	ldrlt	r3, [r1, r0]
 8006a7c:	18c0      	addlt	r0, r0, r3
 8006a7e:	4770      	bx	lr

08006a80 <_init>:
 8006a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a82:	bf00      	nop
 8006a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a86:	bc08      	pop	{r3}
 8006a88:	469e      	mov	lr, r3
 8006a8a:	4770      	bx	lr

08006a8c <_fini>:
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	bf00      	nop
 8006a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a92:	bc08      	pop	{r3}
 8006a94:	469e      	mov	lr, r3
 8006a96:	4770      	bx	lr
