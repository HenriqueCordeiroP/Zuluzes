
Zuluzes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006668  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080067f8  080067f8  000077f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800690c  0800690c  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  0800690c  0800690c  0000790c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006914  08006914  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006914  08006914  00007914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006918  08006918  00007918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800691c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004700  20000060  0800697c  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004760  0800697c  00008760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001695b  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000302d  00000000  00000000  0001e9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00021a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f10  00000000  00000000  00022d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028394  00000000  00000000  00023c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001662a  00000000  00000000  0004c01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fad0e  00000000  00000000  00062646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d354  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e4  00000000  00000000  0015d398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00162a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067e0 	.word	0x080067e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080067e0 	.word	0x080067e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4a07      	ldr	r2, [pc, #28]	@ (8000d78 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	4a06      	ldr	r2, [pc, #24]	@ (8000d7c <vApplicationGetIdleTaskMemory+0x30>)
 8000d62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2280      	movs	r2, #128	@ 0x80
 8000d68:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	2000007c 	.word	0x2000007c
 8000d7c:	2000011c 	.word	0x2000011c

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b5b0      	push	{r4, r5, r7, lr}
 8000d82:	b08a      	sub	sp, #40	@ 0x28
 8000d84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d86:	f000 fc9f 	bl	80016c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8a:	f000 f84f 	bl	8000e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8e:	f000 f91d 	bl	8000fcc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d92:	f000 f8eb 	bl	8000f6c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d96:	f000 f89b 	bl	8000ed0 <MX_TIM2_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  HAL_TIM_Base_Start(&htim2);
 8000d9a:	481b      	ldr	r0, [pc, #108]	@ (8000e08 <main+0x88>)
 8000d9c:	f002 fb3a 	bl	8003414 <HAL_TIM_Base_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000da0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <main+0x8c>)
 8000da2:	1d3c      	adds	r4, r7, #4
 8000da4:	461d      	mov	r5, r3
 8000da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000daa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f003 fdac 	bl	8004914 <osThreadCreate>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4a14      	ldr	r2, [pc, #80]	@ (8000e10 <main+0x90>)
 8000dc0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

	  xTaskCreate(UltrasonicTask,
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	9301      	str	r3, [sp, #4]
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	2280      	movs	r2, #128	@ 0x80
 8000dce:	4911      	ldr	r1, [pc, #68]	@ (8000e14 <main+0x94>)
 8000dd0:	4811      	ldr	r0, [pc, #68]	@ (8000e18 <main+0x98>)
 8000dd2:	f003 ff13 	bl	8004bfc <xTaskCreate>
	  configMINIMAL_STACK_SIZE,
	  NULL,
	  1,
	  NULL);

	  xTaskCreate(AreButtonsPressedTask,
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	9301      	str	r3, [sp, #4]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	2300      	movs	r3, #0
 8000de0:	2280      	movs	r2, #128	@ 0x80
 8000de2:	490e      	ldr	r1, [pc, #56]	@ (8000e1c <main+0x9c>)
 8000de4:	480e      	ldr	r0, [pc, #56]	@ (8000e20 <main+0xa0>)
 8000de6:	f003 ff09 	bl	8004bfc <xTaskCreate>
	  configMINIMAL_STACK_SIZE,
	  NULL,
	  tskIDLE_PRIORITY,
	  NULL);

	  xTaskCreate(LedCounterTask,
 8000dea:	2300      	movs	r3, #0
 8000dec:	9301      	str	r3, [sp, #4]
 8000dee:	2300      	movs	r3, #0
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2300      	movs	r3, #0
 8000df4:	2280      	movs	r2, #128	@ 0x80
 8000df6:	490b      	ldr	r1, [pc, #44]	@ (8000e24 <main+0xa4>)
 8000df8:	480b      	ldr	r0, [pc, #44]	@ (8000e28 <main+0xa8>)
 8000dfa:	f003 feff 	bl	8004bfc <xTaskCreate>
	  NULL);

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000dfe:	f003 fd82 	bl	8004906 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e02:	bf00      	nop
 8000e04:	e7fd      	b.n	8000e02 <main+0x82>
 8000e06:	bf00      	nop
 8000e08:	2000031c 	.word	0x2000031c
 8000e0c:	0800683c 	.word	0x0800683c
 8000e10:	200003f0 	.word	0x200003f0
 8000e14:	080067f8 	.word	0x080067f8
 8000e18:	0800113d 	.word	0x0800113d
 8000e1c:	08006808 	.word	0x08006808
 8000e20:	080010fd 	.word	0x080010fd
 8000e24:	08006820 	.word	0x08006820
 8000e28:	080012a5 	.word	0x080012a5

08000e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b096      	sub	sp, #88	@ 0x58
 8000e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	2244      	movs	r2, #68	@ 0x44
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f004 fffa 	bl	8005e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	463b      	mov	r3, r7
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e4e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e52:	f000 ff43 	bl	8001cdc <HAL_PWREx_ControlVoltageScaling>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e5c:	f000 fa86 	bl	800136c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e60:	2302      	movs	r3, #2
 8000e62:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e72:	2302      	movs	r3, #2
 8000e74:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000e7a:	2309      	movs	r3, #9
 8000e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e7e:	2307      	movs	r3, #7
 8000e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e82:	2302      	movs	r3, #2
 8000e84:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e86:	2302      	movs	r3, #2
 8000e88:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 ff7a 	bl	8001d88 <HAL_RCC_OscConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e9a:	f000 fa67 	bl	800136c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9e:	230f      	movs	r3, #15
 8000ea0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 fb42 	bl	8002540 <HAL_RCC_ClockConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ec2:	f000 fa53 	bl	800136c <Error_Handler>
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	3758      	adds	r7, #88	@ 0x58
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed6:	f107 0310 	add.w	r3, r7, #16
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eee:	4b1e      	ldr	r3, [pc, #120]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000ef0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ef4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000ef8:	2247      	movs	r2, #71	@ 0x47
 8000efa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f02:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0a:	4b17      	ldr	r3, [pc, #92]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f16:	4814      	ldr	r0, [pc, #80]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f18:	f002 fa24 	bl	8003364 <HAL_TIM_Base_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f22:	f000 fa23 	bl	800136c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4619      	mov	r1, r3
 8000f32:	480d      	ldr	r0, [pc, #52]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f34:	f002 fc4d 	bl	80037d2 <HAL_TIM_ConfigClockSource>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f3e:	f000 fa15 	bl	800136c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4806      	ldr	r0, [pc, #24]	@ (8000f68 <MX_TIM2_Init+0x98>)
 8000f50:	f002 fe70 	bl	8003c34 <HAL_TIMEx_MasterConfigSynchronization>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f5a:	f000 fa07 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	3720      	adds	r7, #32
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2000031c 	.word	0x2000031c

08000f6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f70:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f72:	4a15      	ldr	r2, [pc, #84]	@ (8000fc8 <MX_USART2_UART_Init+0x5c>)
 8000f74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f76:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	@ (8000fc4 <MX_USART2_UART_Init+0x58>)
 8000fb0:	f002 fee6 	bl	8003d80 <HAL_UART_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fba:	f000 f9d7 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000368 	.word	0x20000368
 8000fc8:	40004400 	.word	0x40004400

08000fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	@ 0x28
 8000fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	4b43      	ldr	r3, [pc, #268]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe6:	4a42      	ldr	r2, [pc, #264]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fee:	4b40      	ldr	r3, [pc, #256]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffa:	4b3d      	ldr	r3, [pc, #244]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	4a3c      	ldr	r2, [pc, #240]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8001000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001006:	4b3a      	ldr	r3, [pc, #232]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4b37      	ldr	r3, [pc, #220]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	4a36      	ldr	r2, [pc, #216]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101e:	4b34      	ldr	r3, [pc, #208]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	4b31      	ldr	r3, [pc, #196]	@ (80010f0 <MX_GPIO_Init+0x124>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	4a30      	ldr	r2, [pc, #192]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001036:	4b2e      	ldr	r3, [pc, #184]	@ (80010f0 <MX_GPIO_Init+0x124>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104c:	f000 fe20 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2140      	movs	r1, #64	@ 0x40
 8001054:	4827      	ldr	r0, [pc, #156]	@ (80010f4 <MX_GPIO_Init+0x128>)
 8001056:	f000 fe1b 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800105a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800105e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001060:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	4821      	ldr	r0, [pc, #132]	@ (80010f8 <MX_GPIO_Init+0x12c>)
 8001072:	f000 fc4b 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8001076:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107c:	2301      	movs	r3, #1
 800107e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001092:	f000 fc3b 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001096:	2380      	movs	r3, #128	@ 0x80
 8001098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	4813      	ldr	r0, [pc, #76]	@ (80010f8 <MX_GPIO_Init+0x12c>)
 80010aa:	f000 fc2f 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c6:	f000 fc21 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010ca:	2340      	movs	r3, #64	@ 0x40
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <MX_GPIO_Init+0x128>)
 80010e2:	f000 fc13 	bl	800190c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010e6:	bf00      	nop
 80010e8:	3728      	adds	r7, #40	@ 0x28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40021000 	.word	0x40021000
 80010f4:	48000400 	.word	0x48000400
 80010f8:	48000800 	.word	0x48000800

080010fc <AreButtonsPressedTask>:
/* USER CODE BEGIN 4 */
	/*
	 * TODO use led to display counter (customizable)
	 * */

void AreButtonsPressedTask(void *argument){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	// PA8 - D7 - Button 1
	// PA9 - D8 - Button 2

	for(;;){
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET  || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_RESET){
 8001104:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001108:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800110c:	f000 fda8 	bl	8001c60 <HAL_GPIO_ReadPin>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d008      	beq.n	8001128 <AreButtonsPressedTask+0x2c>
 8001116:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800111a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111e:	f000 fd9f 	bl	8001c60 <HAL_GPIO_ReadPin>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d103      	bne.n	8001130 <AreButtonsPressedTask+0x34>
			isButtonsPressed = 1;
 8001128:	4b03      	ldr	r3, [pc, #12]	@ (8001138 <AreButtonsPressedTask+0x3c>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	e002      	b.n	8001136 <AreButtonsPressedTask+0x3a>
		} else {
			isButtonsPressed = 0;
 8001130:	4b01      	ldr	r3, [pc, #4]	@ (8001138 <AreButtonsPressedTask+0x3c>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET  || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_RESET){
 8001136:	e7e5      	b.n	8001104 <AreButtonsPressedTask+0x8>
 8001138:	2000046c 	.word	0x2000046c

0800113c <UltrasonicTask>:
		}
	}
}

void UltrasonicTask(void *argument)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
        uint8_t downOk = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]
	for(;;)
    {

        Trigger_Ultrasonic();
 8001148:	f000 f842 	bl	80011d0 <Trigger_Ultrasonic>

        uint32_t distance = Get_Distance();
 800114c:	f000 f854 	bl	80011f8 <Get_Distance>
 8001150:	60b8      	str	r0, [r7, #8]
        if(isButtonsPressed){
 8001152:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <UltrasonicTask+0x80>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d016      	beq.n	8001188 <UltrasonicTask+0x4c>
        	if(distance <= PUSHUP_DOWN_DISTANCE_CM && !downOk ){
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	2b0a      	cmp	r3, #10
 800115e:	d805      	bhi.n	800116c <UltrasonicTask+0x30>
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d102      	bne.n	800116c <UltrasonicTask+0x30>
        		downOk = 1;
 8001166:	2301      	movs	r3, #1
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	e010      	b.n	800118e <UltrasonicTask+0x52>
        	}
        	else if(distance >= PUSHUP_UP_DISTANCE_CM && downOk){
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	2b1d      	cmp	r3, #29
 8001170:	d90d      	bls.n	800118e <UltrasonicTask+0x52>
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00a      	beq.n	800118e <UltrasonicTask+0x52>
        		pushupCounter++;
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <UltrasonicTask+0x84>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	4a10      	ldr	r2, [pc, #64]	@ (80011c0 <UltrasonicTask+0x84>)
 8001180:	6013      	str	r3, [r2, #0]
        		downOk = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	e002      	b.n	800118e <UltrasonicTask+0x52>
        	}
        } else {
        	pushupCounter = 0;
 8001188:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <UltrasonicTask+0x84>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
        }


        sprintf(ultraBuffer, "Counter: %lu Distance: %lu\r\n", pushupCounter, distance);
 800118e:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <UltrasonicTask+0x84>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	490b      	ldr	r1, [pc, #44]	@ (80011c4 <UltrasonicTask+0x88>)
 8001196:	480c      	ldr	r0, [pc, #48]	@ (80011c8 <UltrasonicTask+0x8c>)
 8001198:	f004 fe2c 	bl	8005df4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)ultraBuffer, strlen(ultraBuffer), HAL_MAX_DELAY);
 800119c:	480a      	ldr	r0, [pc, #40]	@ (80011c8 <UltrasonicTask+0x8c>)
 800119e:	f7ff f817 	bl	80001d0 <strlen>
 80011a2:	4603      	mov	r3, r0
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	4907      	ldr	r1, [pc, #28]	@ (80011c8 <UltrasonicTask+0x8c>)
 80011ac:	4807      	ldr	r0, [pc, #28]	@ (80011cc <UltrasonicTask+0x90>)
 80011ae:	f002 fe35 	bl	8003e1c <HAL_UART_Transmit>
        osDelay(500);
 80011b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011b6:	f003 fbf9 	bl	80049ac <osDelay>
    {
 80011ba:	e7c5      	b.n	8001148 <UltrasonicTask+0xc>
 80011bc:	2000046c 	.word	0x2000046c
 80011c0:	20000468 	.word	0x20000468
 80011c4:	08006858 	.word	0x08006858
 80011c8:	20000434 	.word	0x20000434
 80011cc:	20000368 	.word	0x20000368

080011d0 <Trigger_Ultrasonic>:
    }
}

void Trigger_Ultrasonic(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	// PC7 - D9 - Ultrasonic ECHO
	// PB6 - D10 - Ultrasonic Trigger

    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2140      	movs	r1, #64	@ 0x40
 80011d8:	4806      	ldr	r0, [pc, #24]	@ (80011f4 <Trigger_Ultrasonic+0x24>)
 80011da:	f000 fd59 	bl	8001c90 <HAL_GPIO_WritePin>
    osDelay(1);
 80011de:	2001      	movs	r0, #1
 80011e0:	f003 fbe4 	bl	80049ac <osDelay>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2140      	movs	r1, #64	@ 0x40
 80011e8:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <Trigger_Ultrasonic+0x24>)
 80011ea:	f000 fd51 	bl	8001c90 <HAL_GPIO_WritePin>
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	48000400 	.word	0x48000400

080011f8 <Get_Distance>:

uint32_t Get_Distance(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET);
 80011fe:	bf00      	nop
 8001200:	2180      	movs	r1, #128	@ 0x80
 8001202:	4823      	ldr	r0, [pc, #140]	@ (8001290 <Get_Distance+0x98>)
 8001204:	f000 fd2c 	bl	8001c60 <HAL_GPIO_ReadPin>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f8      	beq.n	8001200 <Get_Distance+0x8>

    echoStart = __HAL_TIM_GET_COUNTER(&htim2);
 800120e:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <Get_Distance+0x9c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001214:	4a20      	ldr	r2, [pc, #128]	@ (8001298 <Get_Distance+0xa0>)
 8001216:	6013      	str	r3, [r2, #0]

    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET);
 8001218:	bf00      	nop
 800121a:	2180      	movs	r1, #128	@ 0x80
 800121c:	481c      	ldr	r0, [pc, #112]	@ (8001290 <Get_Distance+0x98>)
 800121e:	f000 fd1f 	bl	8001c60 <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	2b01      	cmp	r3, #1
 8001226:	d0f8      	beq.n	800121a <Get_Distance+0x22>

    echoEnd = __HAL_TIM_GET_COUNTER(&htim2);
 8001228:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <Get_Distance+0x9c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122e:	4a1b      	ldr	r2, [pc, #108]	@ (800129c <Get_Distance+0xa4>)
 8001230:	6013      	str	r3, [r2, #0]

    echoDuration = echoEnd - echoStart;
 8001232:	4b1a      	ldr	r3, [pc, #104]	@ (800129c <Get_Distance+0xa4>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <Get_Distance+0xa0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	4a18      	ldr	r2, [pc, #96]	@ (80012a0 <Get_Distance+0xa8>)
 800123e:	6013      	str	r3, [r2, #0]

    uint32_t distance = (echoDuration * 0.0343) / 2;
 8001240:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <Get_Distance+0xa8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f95d 	bl	8000504 <__aeabi_ui2d>
 800124a:	a30f      	add	r3, pc, #60	@ (adr r3, 8001288 <Get_Distance+0x90>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	f7ff f9d2 	bl	80005f8 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001264:	f7ff faf2 	bl	800084c <__aeabi_ddiv>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fbd4 	bl	8000a1c <__aeabi_d2uiz>
 8001274:	4603      	mov	r3, r0
 8001276:	607b      	str	r3, [r7, #4]

    return distance;
 8001278:	687b      	ldr	r3, [r7, #4]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	f3af 8000 	nop.w
 8001288:	04816f00 	.word	0x04816f00
 800128c:	3fa18fc5 	.word	0x3fa18fc5
 8001290:	48000800 	.word	0x48000800
 8001294:	2000031c 	.word	0x2000031c
 8001298:	200003f4 	.word	0x200003f4
 800129c:	200003f8 	.word	0x200003f8
 80012a0:	200003fc 	.word	0x200003fc

080012a4 <LedCounterTask>:

void LedCounterTask(void *argument){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	// PA8 - D7 - Button 1
	// PA9 - D8 - Button 2

	for(;;){
		if(pushupCounter % 2 != 0){
 80012ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <LedCounterTask+0x80>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d01a      	beq.n	80012ee <LedCounterTask+0x4a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c2:	f000 fce5 	bl	8001c90 <HAL_GPIO_WritePin>
			sprintf(buttonBuffer, "Up\r\n");
 80012c6:	4918      	ldr	r1, [pc, #96]	@ (8001328 <LedCounterTask+0x84>)
 80012c8:	4818      	ldr	r0, [pc, #96]	@ (800132c <LedCounterTask+0x88>)
 80012ca:	f004 fd93 	bl	8005df4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buttonBuffer, strlen(buttonBuffer), HAL_MAX_DELAY);
 80012ce:	4817      	ldr	r0, [pc, #92]	@ (800132c <LedCounterTask+0x88>)
 80012d0:	f7fe ff7e 	bl	80001d0 <strlen>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
 80012dc:	4913      	ldr	r1, [pc, #76]	@ (800132c <LedCounterTask+0x88>)
 80012de:	4814      	ldr	r0, [pc, #80]	@ (8001330 <LedCounterTask+0x8c>)
 80012e0:	f002 fd9c 	bl	8003e1c <HAL_UART_Transmit>
			osDelay(500);
 80012e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012e8:	f003 fb60 	bl	80049ac <osDelay>
 80012ec:	e7de      	b.n	80012ac <LedCounterTask+0x8>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f8:	f000 fcca 	bl	8001c90 <HAL_GPIO_WritePin>
			sprintf(buttonBuffer, "Down\r\n");
 80012fc:	490d      	ldr	r1, [pc, #52]	@ (8001334 <LedCounterTask+0x90>)
 80012fe:	480b      	ldr	r0, [pc, #44]	@ (800132c <LedCounterTask+0x88>)
 8001300:	f004 fd78 	bl	8005df4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buttonBuffer, strlen(buttonBuffer), HAL_MAX_DELAY);
 8001304:	4809      	ldr	r0, [pc, #36]	@ (800132c <LedCounterTask+0x88>)
 8001306:	f7fe ff63 	bl	80001d0 <strlen>
 800130a:	4603      	mov	r3, r0
 800130c:	b29a      	uxth	r2, r3
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	4906      	ldr	r1, [pc, #24]	@ (800132c <LedCounterTask+0x88>)
 8001314:	4806      	ldr	r0, [pc, #24]	@ (8001330 <LedCounterTask+0x8c>)
 8001316:	f002 fd81 	bl	8003e1c <HAL_UART_Transmit>
			osDelay(500);
 800131a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800131e:	f003 fb45 	bl	80049ac <osDelay>
		if(pushupCounter % 2 != 0){
 8001322:	e7c3      	b.n	80012ac <LedCounterTask+0x8>
 8001324:	20000468 	.word	0x20000468
 8001328:	08006878 	.word	0x08006878
 800132c:	20000400 	.word	0x20000400
 8001330:	20000368 	.word	0x20000368
 8001334:	08006880 	.word	0x08006880

08001338 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001340:	2001      	movs	r0, #1
 8001342:	f003 fb33 	bl	80049ac <osDelay>
 8001346:	e7fb      	b.n	8001340 <StartDefaultTask+0x8>

08001348 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d101      	bne.n	800135e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800135a:	f000 f9d5 	bl	8001708 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40012c00 	.word	0x40012c00

0800136c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001370:	b672      	cpsid	i
}
 8001372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <Error_Handler+0x8>

08001378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <HAL_MspInit+0x4c>)
 8001380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001382:	4a10      	ldr	r2, [pc, #64]	@ (80013c4 <HAL_MspInit+0x4c>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6613      	str	r3, [r2, #96]	@ 0x60
 800138a:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <HAL_MspInit+0x4c>)
 800138c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <HAL_MspInit+0x4c>)
 8001398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139a:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <HAL_MspInit+0x4c>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80013a2:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <HAL_MspInit+0x4c>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	210f      	movs	r1, #15
 80013b2:	f06f 0001 	mvn.w	r0, #1
 80013b6:	f000 fa7f 	bl	80018b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000

080013c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013d8:	d10b      	bne.n	80013f2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <HAL_TIM_Base_MspInit+0x38>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013de:	4a08      	ldr	r2, [pc, #32]	@ (8001400 <HAL_TIM_Base_MspInit+0x38>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <HAL_TIM_Base_MspInit+0x38>)
 80013e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000

08001404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b0ac      	sub	sp, #176	@ 0xb0
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2288      	movs	r2, #136	@ 0x88
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f004 fd05 	bl	8005e34 <memset>
  if(huart->Instance==USART2)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a21      	ldr	r2, [pc, #132]	@ (80014b4 <HAL_UART_MspInit+0xb0>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d13b      	bne.n	80014ac <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001434:	2302      	movs	r3, #2
 8001436:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001438:	2300      	movs	r3, #0
 800143a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4618      	mov	r0, r3
 8001442:	f001 fad3 	bl	80029ec <HAL_RCCEx_PeriphCLKConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800144c:	f7ff ff8e 	bl	800136c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001450:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <HAL_UART_MspInit+0xb4>)
 8001452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001454:	4a18      	ldr	r2, [pc, #96]	@ (80014b8 <HAL_UART_MspInit+0xb4>)
 8001456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800145a:	6593      	str	r3, [r2, #88]	@ 0x58
 800145c:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <HAL_UART_MspInit+0xb4>)
 800145e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <HAL_UART_MspInit+0xb4>)
 800146a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146c:	4a12      	ldr	r2, [pc, #72]	@ (80014b8 <HAL_UART_MspInit+0xb4>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001474:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <HAL_UART_MspInit+0xb4>)
 8001476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001480:	230c      	movs	r3, #12
 8001482:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001498:	2307      	movs	r3, #7
 800149a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014a2:	4619      	mov	r1, r3
 80014a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a8:	f000 fa30 	bl	800190c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80014ac:	bf00      	nop
 80014ae:	37b0      	adds	r7, #176	@ 0xb0
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40004400 	.word	0x40004400
 80014b8:	40021000 	.word	0x40021000

080014bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08c      	sub	sp, #48	@ 0x30
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001584 <HAL_InitTick+0xc8>)
 80014cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001584 <HAL_InitTick+0xc8>)
 80014d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80014d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001584 <HAL_InitTick+0xc8>)
 80014d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014e2:	f107 020c 	add.w	r2, r7, #12
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 f9eb 	bl	80028c8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014f2:	f001 f9d3 	bl	800289c <HAL_RCC_GetPCLK2Freq>
 80014f6:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014fa:	4a23      	ldr	r2, [pc, #140]	@ (8001588 <HAL_InitTick+0xcc>)
 80014fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001500:	0c9b      	lsrs	r3, r3, #18
 8001502:	3b01      	subs	r3, #1
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001506:	4b21      	ldr	r3, [pc, #132]	@ (800158c <HAL_InitTick+0xd0>)
 8001508:	4a21      	ldr	r2, [pc, #132]	@ (8001590 <HAL_InitTick+0xd4>)
 800150a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800150c:	4b1f      	ldr	r3, [pc, #124]	@ (800158c <HAL_InitTick+0xd0>)
 800150e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001512:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001514:	4a1d      	ldr	r2, [pc, #116]	@ (800158c <HAL_InitTick+0xd0>)
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800151a:	4b1c      	ldr	r3, [pc, #112]	@ (800158c <HAL_InitTick+0xd0>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001520:	4b1a      	ldr	r3, [pc, #104]	@ (800158c <HAL_InitTick+0xd0>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001526:	4b19      	ldr	r3, [pc, #100]	@ (800158c <HAL_InitTick+0xd0>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800152c:	4817      	ldr	r0, [pc, #92]	@ (800158c <HAL_InitTick+0xd0>)
 800152e:	f001 ff19 	bl	8003364 <HAL_TIM_Base_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001538:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800153c:	2b00      	cmp	r3, #0
 800153e:	d11b      	bne.n	8001578 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001540:	4812      	ldr	r0, [pc, #72]	@ (800158c <HAL_InitTick+0xd0>)
 8001542:	f001 ffcf 	bl	80034e4 <HAL_TIM_Base_Start_IT>
 8001546:	4603      	mov	r3, r0
 8001548:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800154c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001550:	2b00      	cmp	r3, #0
 8001552:	d111      	bne.n	8001578 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001554:	2019      	movs	r0, #25
 8001556:	f000 f9cb 	bl	80018f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b0f      	cmp	r3, #15
 800155e:	d808      	bhi.n	8001572 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001560:	2200      	movs	r2, #0
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	2019      	movs	r0, #25
 8001566:	f000 f9a7 	bl	80018b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800156a:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <HAL_InitTick+0xd8>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	e002      	b.n	8001578 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001578:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800157c:	4618      	mov	r0, r3
 800157e:	3730      	adds	r7, #48	@ 0x30
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000
 8001588:	431bde83 	.word	0x431bde83
 800158c:	20000470 	.word	0x20000470
 8001590:	40012c00 	.word	0x40012c00
 8001594:	20000004 	.word	0x20000004

08001598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <NMI_Handler+0x4>

080015a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <HardFault_Handler+0x4>

080015a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <MemManage_Handler+0x4>

080015b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <UsageFault_Handler+0x4>

080015c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015d4:	4802      	ldr	r0, [pc, #8]	@ (80015e0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80015d6:	f001 fff5 	bl	80035c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000470 	.word	0x20000470

080015e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ec:	4a14      	ldr	r2, [pc, #80]	@ (8001640 <_sbrk+0x5c>)
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <_sbrk+0x60>)
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f8:	4b13      	ldr	r3, [pc, #76]	@ (8001648 <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001600:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <_sbrk+0x64>)
 8001602:	4a12      	ldr	r2, [pc, #72]	@ (800164c <_sbrk+0x68>)
 8001604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001606:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <_sbrk+0x64>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	429a      	cmp	r2, r3
 8001612:	d207      	bcs.n	8001624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001614:	f004 fc6c 	bl	8005ef0 <__errno>
 8001618:	4603      	mov	r3, r0
 800161a:	220c      	movs	r2, #12
 800161c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
 8001622:	e009      	b.n	8001638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001624:	4b08      	ldr	r3, [pc, #32]	@ (8001648 <_sbrk+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800162a:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	4a05      	ldr	r2, [pc, #20]	@ (8001648 <_sbrk+0x64>)
 8001634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001636:	68fb      	ldr	r3, [r7, #12]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20018000 	.word	0x20018000
 8001644:	00000400 	.word	0x00000400
 8001648:	200004bc 	.word	0x200004bc
 800164c:	20004760 	.word	0x20004760

08001650 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <SystemInit+0x20>)
 8001656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800165a:	4a05      	ldr	r2, [pc, #20]	@ (8001670 <SystemInit+0x20>)
 800165c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001660:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001674:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001678:	f7ff ffea 	bl	8001650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800167c:	480c      	ldr	r0, [pc, #48]	@ (80016b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800167e:	490d      	ldr	r1, [pc, #52]	@ (80016b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001680:	4a0d      	ldr	r2, [pc, #52]	@ (80016b8 <LoopForever+0xe>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001684:	e002      	b.n	800168c <LoopCopyDataInit>

08001686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168a:	3304      	adds	r3, #4

0800168c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800168c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001690:	d3f9      	bcc.n	8001686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001692:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001694:	4c0a      	ldr	r4, [pc, #40]	@ (80016c0 <LoopForever+0x16>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001698:	e001      	b.n	800169e <LoopFillZerobss>

0800169a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800169c:	3204      	adds	r2, #4

0800169e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a0:	d3fb      	bcc.n	800169a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016a2:	f004 fc2b 	bl	8005efc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016a6:	f7ff fb6b 	bl	8000d80 <main>

080016aa <LoopForever>:

LoopForever:
    b LoopForever
 80016aa:	e7fe      	b.n	80016aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80016b8:	0800691c 	.word	0x0800691c
  ldr r2, =_sbss
 80016bc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80016c0:	20004760 	.word	0x20004760

080016c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016c4:	e7fe      	b.n	80016c4 <ADC1_2_IRQHandler>
	...

080016c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <HAL_Init+0x3c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <HAL_Init+0x3c>)
 80016d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016de:	2003      	movs	r0, #3
 80016e0:	f000 f8df 	bl	80018a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016e4:	200f      	movs	r0, #15
 80016e6:	f7ff fee9 	bl	80014bc <HAL_InitTick>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d002      	beq.n	80016f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	71fb      	strb	r3, [r7, #7]
 80016f4:	e001      	b.n	80016fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016f6:	f7ff fe3f 	bl	8001378 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016fa:	79fb      	ldrb	r3, [r7, #7]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40022000 	.word	0x40022000

08001708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_IncTick+0x20>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4b06      	ldr	r3, [pc, #24]	@ (800172c <HAL_IncTick+0x24>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4413      	add	r3, r2
 8001718:	4a04      	ldr	r2, [pc, #16]	@ (800172c <HAL_IncTick+0x24>)
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000008 	.word	0x20000008
 800172c:	200004c0 	.word	0x200004c0

08001730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b03      	ldr	r3, [pc, #12]	@ (8001744 <HAL_GetTick+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	200004c0 	.word	0x200004c0

08001748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001764:	4013      	ands	r3, r2
 8001766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001770:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177a:	4a04      	ldr	r2, [pc, #16]	@ (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	60d3      	str	r3, [r2, #12]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001794:	4b04      	ldr	r3, [pc, #16]	@ (80017a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	f003 0307 	and.w	r3, r3, #7
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	db0b      	blt.n	80017d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	f003 021f 	and.w	r2, r3, #31
 80017c4:	4907      	ldr	r1, [pc, #28]	@ (80017e4 <__NVIC_EnableIRQ+0x38>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2001      	movs	r0, #1
 80017ce:	fa00 f202 	lsl.w	r2, r0, r2
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e100 	.word	0xe000e100

080017e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	db0a      	blt.n	8001812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	490c      	ldr	r1, [pc, #48]	@ (8001834 <__NVIC_SetPriority+0x4c>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	440b      	add	r3, r1
 800180c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001810:	e00a      	b.n	8001828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4908      	ldr	r1, [pc, #32]	@ (8001838 <__NVIC_SetPriority+0x50>)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	3b04      	subs	r3, #4
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	440b      	add	r3, r1
 8001826:	761a      	strb	r2, [r3, #24]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000e100 	.word	0xe000e100
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	@ 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f1c3 0307 	rsb	r3, r3, #7
 8001856:	2b04      	cmp	r3, #4
 8001858:	bf28      	it	cs
 800185a:	2304      	movcs	r3, #4
 800185c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	2b06      	cmp	r3, #6
 8001864:	d902      	bls.n	800186c <NVIC_EncodePriority+0x30>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3b03      	subs	r3, #3
 800186a:	e000      	b.n	800186e <NVIC_EncodePriority+0x32>
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	f04f 32ff 	mov.w	r2, #4294967295
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001884:	f04f 31ff 	mov.w	r1, #4294967295
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	43d9      	mvns	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	4313      	orrs	r3, r2
         );
}
 8001896:	4618      	mov	r0, r3
 8001898:	3724      	adds	r7, #36	@ 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ff4c 	bl	8001748 <__NVIC_SetPriorityGrouping>
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018ca:	f7ff ff61 	bl	8001790 <__NVIC_GetPriorityGrouping>
 80018ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	6978      	ldr	r0, [r7, #20]
 80018d6:	f7ff ffb1 	bl	800183c <NVIC_EncodePriority>
 80018da:	4602      	mov	r2, r0
 80018dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ff80 	bl	80017e8 <__NVIC_SetPriority>
}
 80018e8:	bf00      	nop
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff54 	bl	80017ac <__NVIC_EnableIRQ>
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800190c:	b480      	push	{r7}
 800190e:	b087      	sub	sp, #28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191a:	e17f      	b.n	8001c1c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2101      	movs	r1, #1
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	fa01 f303 	lsl.w	r3, r1, r3
 8001928:	4013      	ands	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 8171 	beq.w	8001c16 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b01      	cmp	r3, #1
 800193e:	d005      	beq.n	800194c <HAL_GPIO_Init+0x40>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d130      	bne.n	80019ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001982:	2201      	movs	r2, #1
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	091b      	lsrs	r3, r3, #4
 8001998:	f003 0201 	and.w	r2, r3, #1
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d118      	bne.n	80019ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019c0:	2201      	movs	r2, #1
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	08db      	lsrs	r3, r3, #3
 80019d6:	f003 0201 	and.w	r2, r3, #1
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d017      	beq.n	8001a28 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d123      	bne.n	8001a7c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	08da      	lsrs	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3208      	adds	r2, #8
 8001a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	08da      	lsrs	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3208      	adds	r2, #8
 8001a76:	6939      	ldr	r1, [r7, #16]
 8001a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0203 	and.w	r2, r3, #3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80ac 	beq.w	8001c16 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abe:	4b5f      	ldr	r3, [pc, #380]	@ (8001c3c <HAL_GPIO_Init+0x330>)
 8001ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac2:	4a5e      	ldr	r2, [pc, #376]	@ (8001c3c <HAL_GPIO_Init+0x330>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aca:	4b5c      	ldr	r3, [pc, #368]	@ (8001c3c <HAL_GPIO_Init+0x330>)
 8001acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ad6:	4a5a      	ldr	r2, [pc, #360]	@ (8001c40 <HAL_GPIO_Init+0x334>)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	089b      	lsrs	r3, r3, #2
 8001adc:	3302      	adds	r3, #2
 8001ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	220f      	movs	r2, #15
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b00:	d025      	beq.n	8001b4e <HAL_GPIO_Init+0x242>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a4f      	ldr	r2, [pc, #316]	@ (8001c44 <HAL_GPIO_Init+0x338>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d01f      	beq.n	8001b4a <HAL_GPIO_Init+0x23e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4e      	ldr	r2, [pc, #312]	@ (8001c48 <HAL_GPIO_Init+0x33c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d019      	beq.n	8001b46 <HAL_GPIO_Init+0x23a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4d      	ldr	r2, [pc, #308]	@ (8001c4c <HAL_GPIO_Init+0x340>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d013      	beq.n	8001b42 <HAL_GPIO_Init+0x236>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a4c      	ldr	r2, [pc, #304]	@ (8001c50 <HAL_GPIO_Init+0x344>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00d      	beq.n	8001b3e <HAL_GPIO_Init+0x232>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4b      	ldr	r2, [pc, #300]	@ (8001c54 <HAL_GPIO_Init+0x348>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d007      	beq.n	8001b3a <HAL_GPIO_Init+0x22e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a4a      	ldr	r2, [pc, #296]	@ (8001c58 <HAL_GPIO_Init+0x34c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d101      	bne.n	8001b36 <HAL_GPIO_Init+0x22a>
 8001b32:	2306      	movs	r3, #6
 8001b34:	e00c      	b.n	8001b50 <HAL_GPIO_Init+0x244>
 8001b36:	2307      	movs	r3, #7
 8001b38:	e00a      	b.n	8001b50 <HAL_GPIO_Init+0x244>
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	e008      	b.n	8001b50 <HAL_GPIO_Init+0x244>
 8001b3e:	2304      	movs	r3, #4
 8001b40:	e006      	b.n	8001b50 <HAL_GPIO_Init+0x244>
 8001b42:	2303      	movs	r3, #3
 8001b44:	e004      	b.n	8001b50 <HAL_GPIO_Init+0x244>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e002      	b.n	8001b50 <HAL_GPIO_Init+0x244>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <HAL_GPIO_Init+0x244>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	f002 0203 	and.w	r2, r2, #3
 8001b56:	0092      	lsls	r2, r2, #2
 8001b58:	4093      	lsls	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b60:	4937      	ldr	r1, [pc, #220]	@ (8001c40 <HAL_GPIO_Init+0x334>)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	089b      	lsrs	r3, r3, #2
 8001b66:	3302      	adds	r3, #2
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c5c <HAL_GPIO_Init+0x350>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b92:	4a32      	ldr	r2, [pc, #200]	@ (8001c5c <HAL_GPIO_Init+0x350>)
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b98:	4b30      	ldr	r3, [pc, #192]	@ (8001c5c <HAL_GPIO_Init+0x350>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bbc:	4a27      	ldr	r2, [pc, #156]	@ (8001c5c <HAL_GPIO_Init+0x350>)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bc2:	4b26      	ldr	r3, [pc, #152]	@ (8001c5c <HAL_GPIO_Init+0x350>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001be6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c5c <HAL_GPIO_Init+0x350>)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bec:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <HAL_GPIO_Init+0x350>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c10:	4a12      	ldr	r2, [pc, #72]	@ (8001c5c <HAL_GPIO_Init+0x350>)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa22 f303 	lsr.w	r3, r2, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f47f ae78 	bne.w	800191c <HAL_GPIO_Init+0x10>
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010000 	.word	0x40010000
 8001c44:	48000400 	.word	0x48000400
 8001c48:	48000800 	.word	0x48000800
 8001c4c:	48000c00 	.word	0x48000c00
 8001c50:	48001000 	.word	0x48001000
 8001c54:	48001400 	.word	0x48001400
 8001c58:	48001800 	.word	0x48001800
 8001c5c:	40010400 	.word	0x40010400

08001c60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	887b      	ldrh	r3, [r7, #2]
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
 8001c7c:	e001      	b.n	8001c82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca0:	787b      	ldrb	r3, [r7, #1]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cae:	887a      	ldrh	r2, [r7, #2]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001cc4:	4b04      	ldr	r3, [pc, #16]	@ (8001cd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40007000 	.word	0x40007000

08001cdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cea:	d130      	bne.n	8001d4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cec:	4b23      	ldr	r3, [pc, #140]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cf8:	d038      	beq.n	8001d6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cfa:	4b20      	ldr	r3, [pc, #128]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d02:	4a1e      	ldr	r2, [pc, #120]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2232      	movs	r2, #50	@ 0x32
 8001d10:	fb02 f303 	mul.w	r3, r2, r3
 8001d14:	4a1b      	ldr	r2, [pc, #108]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d16:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1a:	0c9b      	lsrs	r3, r3, #18
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d20:	e002      	b.n	8001d28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d28:	4b14      	ldr	r3, [pc, #80]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d34:	d102      	bne.n	8001d3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f2      	bne.n	8001d22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d48:	d110      	bne.n	8001d6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e00f      	b.n	8001d6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d5a:	d007      	beq.n	8001d6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d5c:	4b07      	ldr	r3, [pc, #28]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d64:	4a05      	ldr	r2, [pc, #20]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	20000000 	.word	0x20000000
 8001d84:	431bde83 	.word	0x431bde83

08001d88 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e3ca      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d9a:	4b97      	ldr	r3, [pc, #604]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001da4:	4b94      	ldr	r3, [pc, #592]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 80e4 	beq.w	8001f84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x4a>
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	2b0c      	cmp	r3, #12
 8001dc6:	f040 808b 	bne.w	8001ee0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	f040 8087 	bne.w	8001ee0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dd2:	4b89      	ldr	r3, [pc, #548]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <HAL_RCC_OscConfig+0x62>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e3a2      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1a      	ldr	r2, [r3, #32]
 8001dee:	4b82      	ldr	r3, [pc, #520]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d004      	beq.n	8001e04 <HAL_RCC_OscConfig+0x7c>
 8001dfa:	4b7f      	ldr	r3, [pc, #508]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e02:	e005      	b.n	8001e10 <HAL_RCC_OscConfig+0x88>
 8001e04:	4b7c      	ldr	r3, [pc, #496]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d223      	bcs.n	8001e5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 fd87 	bl	800292c <RCC_SetFlashLatencyFromMSIRange>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e383      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e28:	4b73      	ldr	r3, [pc, #460]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a72      	ldr	r2, [pc, #456]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e2e:	f043 0308 	orr.w	r3, r3, #8
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	4b70      	ldr	r3, [pc, #448]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	496d      	ldr	r1, [pc, #436]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e46:	4b6c      	ldr	r3, [pc, #432]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	4968      	ldr	r1, [pc, #416]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	604b      	str	r3, [r1, #4]
 8001e5a:	e025      	b.n	8001ea8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e5c:	4b66      	ldr	r3, [pc, #408]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a65      	ldr	r2, [pc, #404]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e62:	f043 0308 	orr.w	r3, r3, #8
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b63      	ldr	r3, [pc, #396]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4960      	ldr	r1, [pc, #384]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e7a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	021b      	lsls	r3, r3, #8
 8001e88:	495b      	ldr	r1, [pc, #364]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d109      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fd47 	bl	800292c <RCC_SetFlashLatencyFromMSIRange>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e343      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ea8:	f000 fc4a 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b52      	ldr	r3, [pc, #328]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	f003 030f 	and.w	r3, r3, #15
 8001eb8:	4950      	ldr	r1, [pc, #320]	@ (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001eba:	5ccb      	ldrb	r3, [r1, r3]
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec4:	4a4e      	ldr	r2, [pc, #312]	@ (8002000 <HAL_RCC_OscConfig+0x278>)
 8001ec6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ec8:	4b4e      	ldr	r3, [pc, #312]	@ (8002004 <HAL_RCC_OscConfig+0x27c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff faf5 	bl	80014bc <HAL_InitTick>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d052      	beq.n	8001f82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	e327      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d032      	beq.n	8001f4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ee8:	4b43      	ldr	r3, [pc, #268]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a42      	ldr	r2, [pc, #264]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff fc1c 	bl	8001730 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001efc:	f7ff fc18 	bl	8001730 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e310      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f0e:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f1a:	4b37      	ldr	r3, [pc, #220]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a36      	ldr	r2, [pc, #216]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f20:	f043 0308 	orr.w	r3, r3, #8
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b34      	ldr	r3, [pc, #208]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4931      	ldr	r1, [pc, #196]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f38:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	492c      	ldr	r1, [pc, #176]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
 8001f4c:	e01a      	b.n	8001f84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a29      	ldr	r2, [pc, #164]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f5a:	f7ff fbe9 	bl	8001730 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f62:	f7ff fbe5 	bl	8001730 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e2dd      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f74:	4b20      	ldr	r3, [pc, #128]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f0      	bne.n	8001f62 <HAL_RCC_OscConfig+0x1da>
 8001f80:	e000      	b.n	8001f84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d074      	beq.n	800207a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d005      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x21a>
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	2b0c      	cmp	r3, #12
 8001f9a:	d10e      	bne.n	8001fba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d10b      	bne.n	8001fba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa2:	4b15      	ldr	r3, [pc, #84]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d064      	beq.n	8002078 <HAL_RCC_OscConfig+0x2f0>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d160      	bne.n	8002078 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e2ba      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x24a>
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	e026      	b.n	8002020 <HAL_RCC_OscConfig+0x298>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fda:	d115      	bne.n	8002008 <HAL_RCC_OscConfig+0x280>
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a05      	ldr	r2, [pc, #20]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fe2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	4b03      	ldr	r3, [pc, #12]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a02      	ldr	r2, [pc, #8]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	e014      	b.n	8002020 <HAL_RCC_OscConfig+0x298>
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	08006890 	.word	0x08006890
 8002000:	20000000 	.word	0x20000000
 8002004:	20000004 	.word	0x20000004
 8002008:	4ba0      	ldr	r3, [pc, #640]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a9f      	ldr	r2, [pc, #636]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800200e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	4b9d      	ldr	r3, [pc, #628]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a9c      	ldr	r2, [pc, #624]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800201a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800201e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d013      	beq.n	8002050 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7ff fb82 	bl	8001730 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002030:	f7ff fb7e 	bl	8001730 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b64      	cmp	r3, #100	@ 0x64
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e276      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002042:	4b92      	ldr	r3, [pc, #584]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0x2a8>
 800204e:	e014      	b.n	800207a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7ff fb6e 	bl	8001730 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002058:	f7ff fb6a 	bl	8001730 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	@ 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e262      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800206a:	4b88      	ldr	r3, [pc, #544]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x2d0>
 8002076:	e000      	b.n	800207a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d060      	beq.n	8002148 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	2b04      	cmp	r3, #4
 800208a:	d005      	beq.n	8002098 <HAL_RCC_OscConfig+0x310>
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	2b0c      	cmp	r3, #12
 8002090:	d119      	bne.n	80020c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b02      	cmp	r3, #2
 8002096:	d116      	bne.n	80020c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002098:	4b7c      	ldr	r3, [pc, #496]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_OscConfig+0x328>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e23f      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b0:	4b76      	ldr	r3, [pc, #472]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	061b      	lsls	r3, r3, #24
 80020be:	4973      	ldr	r1, [pc, #460]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020c4:	e040      	b.n	8002148 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d023      	beq.n	8002116 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ce:	4b6f      	ldr	r3, [pc, #444]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a6e      	ldr	r2, [pc, #440]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80020d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020da:	f7ff fb29 	bl	8001730 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e2:	f7ff fb25 	bl	8001730 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e21d      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f4:	4b65      	ldr	r3, [pc, #404]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002100:	4b62      	ldr	r3, [pc, #392]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	061b      	lsls	r3, r3, #24
 800210e:	495f      	ldr	r1, [pc, #380]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]
 8002114:	e018      	b.n	8002148 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002116:	4b5d      	ldr	r3, [pc, #372]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a5c      	ldr	r2, [pc, #368]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800211c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002122:	f7ff fb05 	bl	8001730 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212a:	f7ff fb01 	bl	8001730 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e1f9      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800213c:	4b53      	ldr	r3, [pc, #332]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f0      	bne.n	800212a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b00      	cmp	r3, #0
 8002152:	d03c      	beq.n	80021ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01c      	beq.n	8002196 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215c:	4b4b      	ldr	r3, [pc, #300]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800215e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002162:	4a4a      	ldr	r2, [pc, #296]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7ff fae0 	bl	8001730 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002174:	f7ff fadc 	bl	8001730 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e1d4      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002186:	4b41      	ldr	r3, [pc, #260]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002188:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ef      	beq.n	8002174 <HAL_RCC_OscConfig+0x3ec>
 8002194:	e01b      	b.n	80021ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002196:	4b3d      	ldr	r3, [pc, #244]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002198:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800219c:	4a3b      	ldr	r2, [pc, #236]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800219e:	f023 0301 	bic.w	r3, r3, #1
 80021a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a6:	f7ff fac3 	bl	8001730 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ae:	f7ff fabf 	bl	8001730 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e1b7      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021c0:	4b32      	ldr	r3, [pc, #200]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80021c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1ef      	bne.n	80021ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 80a6 	beq.w	8002328 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021dc:	2300      	movs	r3, #0
 80021de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021e0:	4b2a      	ldr	r3, [pc, #168]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80021e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10d      	bne.n	8002208 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ec:	4b27      	ldr	r3, [pc, #156]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f0:	4a26      	ldr	r2, [pc, #152]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80021f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80021f8:	4b24      	ldr	r3, [pc, #144]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002204:	2301      	movs	r3, #1
 8002206:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002208:	4b21      	ldr	r3, [pc, #132]	@ (8002290 <HAL_RCC_OscConfig+0x508>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	d118      	bne.n	8002246 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002214:	4b1e      	ldr	r3, [pc, #120]	@ (8002290 <HAL_RCC_OscConfig+0x508>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1d      	ldr	r2, [pc, #116]	@ (8002290 <HAL_RCC_OscConfig+0x508>)
 800221a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800221e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002220:	f7ff fa86 	bl	8001730 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002228:	f7ff fa82 	bl	8001730 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e17a      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800223a:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <HAL_RCC_OscConfig+0x508>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d108      	bne.n	8002260 <HAL_RCC_OscConfig+0x4d8>
 800224e:	4b0f      	ldr	r3, [pc, #60]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002254:	4a0d      	ldr	r2, [pc, #52]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800225e:	e029      	b.n	80022b4 <HAL_RCC_OscConfig+0x52c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b05      	cmp	r3, #5
 8002266:	d115      	bne.n	8002294 <HAL_RCC_OscConfig+0x50c>
 8002268:	4b08      	ldr	r3, [pc, #32]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800226e:	4a07      	ldr	r2, [pc, #28]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002270:	f043 0304 	orr.w	r3, r3, #4
 8002274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002278:	4b04      	ldr	r3, [pc, #16]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800227e:	4a03      	ldr	r2, [pc, #12]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002288:	e014      	b.n	80022b4 <HAL_RCC_OscConfig+0x52c>
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	40007000 	.word	0x40007000
 8002294:	4b9c      	ldr	r3, [pc, #624]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 8002296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800229a:	4a9b      	ldr	r2, [pc, #620]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022a4:	4b98      	ldr	r3, [pc, #608]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022aa:	4a97      	ldr	r2, [pc, #604]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 80022ac:	f023 0304 	bic.w	r3, r3, #4
 80022b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d016      	beq.n	80022ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7ff fa38 	bl	8001730 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c2:	e00a      	b.n	80022da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c4:	f7ff fa34 	bl	8001730 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e12a      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022da:	4b8b      	ldr	r3, [pc, #556]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0ed      	beq.n	80022c4 <HAL_RCC_OscConfig+0x53c>
 80022e8:	e015      	b.n	8002316 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ea:	f7ff fa21 	bl	8001730 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7ff fa1d 	bl	8001730 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e113      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002308:	4b7f      	ldr	r3, [pc, #508]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1ed      	bne.n	80022f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002316:	7ffb      	ldrb	r3, [r7, #31]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d105      	bne.n	8002328 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231c:	4b7a      	ldr	r3, [pc, #488]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002320:	4a79      	ldr	r2, [pc, #484]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 8002322:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002326:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80fe 	beq.w	800252e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002336:	2b02      	cmp	r3, #2
 8002338:	f040 80d0 	bne.w	80024dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800233c:	4b72      	ldr	r3, [pc, #456]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f003 0203 	and.w	r2, r3, #3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234c:	429a      	cmp	r2, r3
 800234e:	d130      	bne.n	80023b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	3b01      	subs	r3, #1
 800235c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800235e:	429a      	cmp	r2, r3
 8002360:	d127      	bne.n	80023b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800236c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d11f      	bne.n	80023b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800237c:	2a07      	cmp	r2, #7
 800237e:	bf14      	ite	ne
 8002380:	2201      	movne	r2, #1
 8002382:	2200      	moveq	r2, #0
 8002384:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002386:	4293      	cmp	r3, r2
 8002388:	d113      	bne.n	80023b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002394:	085b      	lsrs	r3, r3, #1
 8002396:	3b01      	subs	r3, #1
 8002398:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800239a:	429a      	cmp	r2, r3
 800239c:	d109      	bne.n	80023b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a8:	085b      	lsrs	r3, r3, #1
 80023aa:	3b01      	subs	r3, #1
 80023ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d06e      	beq.n	8002490 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	2b0c      	cmp	r3, #12
 80023b6:	d069      	beq.n	800248c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023b8:	4b53      	ldr	r3, [pc, #332]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d105      	bne.n	80023d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80023c4:	4b50      	ldr	r3, [pc, #320]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0ad      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 80023da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023e0:	f7ff f9a6 	bl	8001730 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7ff f9a2 	bl	8001730 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e09a      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023fa:	4b43      	ldr	r3, [pc, #268]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002406:	4b40      	ldr	r3, [pc, #256]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	4b40      	ldr	r3, [pc, #256]	@ (800250c <HAL_RCC_OscConfig+0x784>)
 800240c:	4013      	ands	r3, r2
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002416:	3a01      	subs	r2, #1
 8002418:	0112      	lsls	r2, r2, #4
 800241a:	4311      	orrs	r1, r2
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002420:	0212      	lsls	r2, r2, #8
 8002422:	4311      	orrs	r1, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002428:	0852      	lsrs	r2, r2, #1
 800242a:	3a01      	subs	r2, #1
 800242c:	0552      	lsls	r2, r2, #21
 800242e:	4311      	orrs	r1, r2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002434:	0852      	lsrs	r2, r2, #1
 8002436:	3a01      	subs	r2, #1
 8002438:	0652      	lsls	r2, r2, #25
 800243a:	4311      	orrs	r1, r2
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002440:	0912      	lsrs	r2, r2, #4
 8002442:	0452      	lsls	r2, r2, #17
 8002444:	430a      	orrs	r2, r1
 8002446:	4930      	ldr	r1, [pc, #192]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 8002448:	4313      	orrs	r3, r2
 800244a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800244c:	4b2e      	ldr	r3, [pc, #184]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a2d      	ldr	r2, [pc, #180]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 8002452:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002456:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002458:	4b2b      	ldr	r3, [pc, #172]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4a2a      	ldr	r2, [pc, #168]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 800245e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002462:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002464:	f7ff f964 	bl	8001730 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246c:	f7ff f960 	bl	8001730 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e058      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247e:	4b22      	ldr	r3, [pc, #136]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800248a:	e050      	b.n	800252e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e04f      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002490:	4b1d      	ldr	r3, [pc, #116]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d148      	bne.n	800252e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800249c:	4b1a      	ldr	r3, [pc, #104]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a19      	ldr	r2, [pc, #100]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 80024a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024a8:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4a16      	ldr	r2, [pc, #88]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 80024ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024b4:	f7ff f93c 	bl	8001730 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024bc:	f7ff f938 	bl	8001730 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e030      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x734>
 80024da:	e028      	b.n	800252e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	2b0c      	cmp	r3, #12
 80024e0:	d023      	beq.n	800252a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	4b09      	ldr	r3, [pc, #36]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a08      	ldr	r2, [pc, #32]	@ (8002508 <HAL_RCC_OscConfig+0x780>)
 80024e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ee:	f7ff f91f 	bl	8001730 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f4:	e00c      	b.n	8002510 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f6:	f7ff f91b 	bl	8001730 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d905      	bls.n	8002510 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e013      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
 8002508:	40021000 	.word	0x40021000
 800250c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002510:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <HAL_RCC_OscConfig+0x7b0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1ec      	bne.n	80024f6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800251c:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <HAL_RCC_OscConfig+0x7b0>)
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	4905      	ldr	r1, [pc, #20]	@ (8002538 <HAL_RCC_OscConfig+0x7b0>)
 8002522:	4b06      	ldr	r3, [pc, #24]	@ (800253c <HAL_RCC_OscConfig+0x7b4>)
 8002524:	4013      	ands	r3, r2
 8002526:	60cb      	str	r3, [r1, #12]
 8002528:	e001      	b.n	800252e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3720      	adds	r7, #32
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40021000 	.word	0x40021000
 800253c:	feeefffc 	.word	0xfeeefffc

08002540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0e7      	b.n	8002724 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002554:	4b75      	ldr	r3, [pc, #468]	@ (800272c <HAL_RCC_ClockConfig+0x1ec>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d910      	bls.n	8002584 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4b72      	ldr	r3, [pc, #456]	@ (800272c <HAL_RCC_ClockConfig+0x1ec>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 0207 	bic.w	r2, r3, #7
 800256a:	4970      	ldr	r1, [pc, #448]	@ (800272c <HAL_RCC_ClockConfig+0x1ec>)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	4313      	orrs	r3, r2
 8002570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	4b6e      	ldr	r3, [pc, #440]	@ (800272c <HAL_RCC_ClockConfig+0x1ec>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0cf      	b.n	8002724 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d010      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	4b66      	ldr	r3, [pc, #408]	@ (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800259c:	429a      	cmp	r2, r3
 800259e:	d908      	bls.n	80025b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a0:	4b63      	ldr	r3, [pc, #396]	@ (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4960      	ldr	r1, [pc, #384]	@ (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d04c      	beq.n	8002658 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c6:	4b5a      	ldr	r3, [pc, #360]	@ (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d121      	bne.n	8002616 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0a6      	b.n	8002724 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d107      	bne.n	80025ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025de:	4b54      	ldr	r3, [pc, #336]	@ (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d115      	bne.n	8002616 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e09a      	b.n	8002724 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d109      	bne.n	8002616 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e08e      	b.n	8002724 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002606:	4b4a      	ldr	r3, [pc, #296]	@ (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e086      	b.n	8002724 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002616:	4b46      	ldr	r3, [pc, #280]	@ (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f023 0203 	bic.w	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4943      	ldr	r1, [pc, #268]	@ (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 8002624:	4313      	orrs	r3, r2
 8002626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002628:	f7ff f882 	bl	8001730 <HAL_GetTick>
 800262c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262e:	e00a      	b.n	8002646 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002630:	f7ff f87e 	bl	8001730 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e06e      	b.n	8002724 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002646:	4b3a      	ldr	r3, [pc, #232]	@ (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 020c 	and.w	r2, r3, #12
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	429a      	cmp	r2, r3
 8002656:	d1eb      	bne.n	8002630 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d010      	beq.n	8002686 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	4b31      	ldr	r3, [pc, #196]	@ (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002670:	429a      	cmp	r2, r3
 8002672:	d208      	bcs.n	8002686 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002674:	4b2e      	ldr	r3, [pc, #184]	@ (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	492b      	ldr	r1, [pc, #172]	@ (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 8002682:	4313      	orrs	r3, r2
 8002684:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002686:	4b29      	ldr	r3, [pc, #164]	@ (800272c <HAL_RCC_ClockConfig+0x1ec>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d210      	bcs.n	80026b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002694:	4b25      	ldr	r3, [pc, #148]	@ (800272c <HAL_RCC_ClockConfig+0x1ec>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f023 0207 	bic.w	r2, r3, #7
 800269c:	4923      	ldr	r1, [pc, #140]	@ (800272c <HAL_RCC_ClockConfig+0x1ec>)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a4:	4b21      	ldr	r3, [pc, #132]	@ (800272c <HAL_RCC_ClockConfig+0x1ec>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e036      	b.n	8002724 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d008      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	4918      	ldr	r1, [pc, #96]	@ (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d009      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e0:	4b13      	ldr	r3, [pc, #76]	@ (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4910      	ldr	r1, [pc, #64]	@ (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026f4:	f000 f824 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	091b      	lsrs	r3, r3, #4
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	490b      	ldr	r1, [pc, #44]	@ (8002734 <HAL_RCC_ClockConfig+0x1f4>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	fa22 f303 	lsr.w	r3, r2, r3
 8002710:	4a09      	ldr	r2, [pc, #36]	@ (8002738 <HAL_RCC_ClockConfig+0x1f8>)
 8002712:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002714:	4b09      	ldr	r3, [pc, #36]	@ (800273c <HAL_RCC_ClockConfig+0x1fc>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7fe fecf 	bl	80014bc <HAL_InitTick>
 800271e:	4603      	mov	r3, r0
 8002720:	72fb      	strb	r3, [r7, #11]

  return status;
 8002722:	7afb      	ldrb	r3, [r7, #11]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40022000 	.word	0x40022000
 8002730:	40021000 	.word	0x40021000
 8002734:	08006890 	.word	0x08006890
 8002738:	20000000 	.word	0x20000000
 800273c:	20000004 	.word	0x20000004

08002740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	@ 0x24
 8002744:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	2300      	movs	r3, #0
 800274c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800274e:	4b3e      	ldr	r3, [pc, #248]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x108>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002758:	4b3b      	ldr	r3, [pc, #236]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x108>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0x34>
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b0c      	cmp	r3, #12
 800276c:	d121      	bne.n	80027b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d11e      	bne.n	80027b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002774:	4b34      	ldr	r3, [pc, #208]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x108>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d107      	bne.n	8002790 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002780:	4b31      	ldr	r3, [pc, #196]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x108>)
 8002782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002786:	0a1b      	lsrs	r3, r3, #8
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	e005      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002790:	4b2d      	ldr	r3, [pc, #180]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x108>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800279c:	4a2b      	ldr	r2, [pc, #172]	@ (800284c <HAL_RCC_GetSysClockFreq+0x10c>)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10d      	bne.n	80027c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027b0:	e00a      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d102      	bne.n	80027be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027b8:	4b25      	ldr	r3, [pc, #148]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x110>)
 80027ba:	61bb      	str	r3, [r7, #24]
 80027bc:	e004      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d101      	bne.n	80027c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027c4:	4b23      	ldr	r3, [pc, #140]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x114>)
 80027c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	2b0c      	cmp	r3, #12
 80027cc:	d134      	bne.n	8002838 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d003      	beq.n	80027e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d003      	beq.n	80027ec <HAL_RCC_GetSysClockFreq+0xac>
 80027e4:	e005      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x110>)
 80027e8:	617b      	str	r3, [r7, #20]
      break;
 80027ea:	e005      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027ec:	4b19      	ldr	r3, [pc, #100]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x114>)
 80027ee:	617b      	str	r3, [r7, #20]
      break;
 80027f0:	e002      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	617b      	str	r3, [r7, #20]
      break;
 80027f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027f8:	4b13      	ldr	r3, [pc, #76]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x108>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	3301      	adds	r3, #1
 8002804:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002806:	4b10      	ldr	r3, [pc, #64]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x108>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	fb03 f202 	mul.w	r2, r3, r2
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	fbb2 f3f3 	udiv	r3, r2, r3
 800281c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800281e:	4b0a      	ldr	r3, [pc, #40]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x108>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	0e5b      	lsrs	r3, r3, #25
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	3301      	adds	r3, #1
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	fbb2 f3f3 	udiv	r3, r2, r3
 8002836:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002838:	69bb      	ldr	r3, [r7, #24]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3724      	adds	r7, #36	@ 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	080068a8 	.word	0x080068a8
 8002850:	00f42400 	.word	0x00f42400
 8002854:	007a1200 	.word	0x007a1200

08002858 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800285c:	4b03      	ldr	r3, [pc, #12]	@ (800286c <HAL_RCC_GetHCLKFreq+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000000 	.word	0x20000000

08002870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002874:	f7ff fff0 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 8002878:	4602      	mov	r2, r0
 800287a:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <HAL_RCC_GetPCLK1Freq+0x24>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	0a1b      	lsrs	r3, r3, #8
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	4904      	ldr	r1, [pc, #16]	@ (8002898 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002886:	5ccb      	ldrb	r3, [r1, r3]
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002890:	4618      	mov	r0, r3
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000
 8002898:	080068a0 	.word	0x080068a0

0800289c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028a0:	f7ff ffda 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	0adb      	lsrs	r3, r3, #11
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	4904      	ldr	r1, [pc, #16]	@ (80028c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028bc:	4618      	mov	r0, r3
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000
 80028c4:	080068a0 	.word	0x080068a0

080028c8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	220f      	movs	r2, #15
 80028d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80028d8:	4b12      	ldr	r3, [pc, #72]	@ (8002924 <HAL_RCC_GetClockConfig+0x5c>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0203 	and.w	r2, r3, #3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80028e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002924 <HAL_RCC_GetClockConfig+0x5c>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80028f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002924 <HAL_RCC_GetClockConfig+0x5c>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80028fc:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <HAL_RCC_GetClockConfig+0x5c>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	08db      	lsrs	r3, r3, #3
 8002902:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800290a:	4b07      	ldr	r3, [pc, #28]	@ (8002928 <HAL_RCC_GetClockConfig+0x60>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0207 	and.w	r2, r3, #7
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	601a      	str	r2, [r3, #0]
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000
 8002928:	40022000 	.word	0x40022000

0800292c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002934:	2300      	movs	r3, #0
 8002936:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002938:	4b2a      	ldr	r3, [pc, #168]	@ (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800293a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002944:	f7ff f9bc 	bl	8001cc0 <HAL_PWREx_GetVoltageRange>
 8002948:	6178      	str	r0, [r7, #20]
 800294a:	e014      	b.n	8002976 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800294c:	4b25      	ldr	r3, [pc, #148]	@ (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800294e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002950:	4a24      	ldr	r2, [pc, #144]	@ (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002956:	6593      	str	r3, [r2, #88]	@ 0x58
 8002958:	4b22      	ldr	r3, [pc, #136]	@ (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002964:	f7ff f9ac 	bl	8001cc0 <HAL_PWREx_GetVoltageRange>
 8002968:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800296a:	4b1e      	ldr	r3, [pc, #120]	@ (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800296c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296e:	4a1d      	ldr	r2, [pc, #116]	@ (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002970:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002974:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800297c:	d10b      	bne.n	8002996 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b80      	cmp	r3, #128	@ 0x80
 8002982:	d919      	bls.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2ba0      	cmp	r3, #160	@ 0xa0
 8002988:	d902      	bls.n	8002990 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800298a:	2302      	movs	r3, #2
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	e013      	b.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002990:	2301      	movs	r3, #1
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	e010      	b.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b80      	cmp	r3, #128	@ 0x80
 800299a:	d902      	bls.n	80029a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800299c:	2303      	movs	r3, #3
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	e00a      	b.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b80      	cmp	r3, #128	@ 0x80
 80029a6:	d102      	bne.n	80029ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029a8:	2302      	movs	r3, #2
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	e004      	b.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b70      	cmp	r3, #112	@ 0x70
 80029b2:	d101      	bne.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029b4:	2301      	movs	r3, #1
 80029b6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029b8:	4b0b      	ldr	r3, [pc, #44]	@ (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f023 0207 	bic.w	r2, r3, #7
 80029c0:	4909      	ldr	r1, [pc, #36]	@ (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029c8:	4b07      	ldr	r3, [pc, #28]	@ (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d001      	beq.n	80029da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40022000 	.word	0x40022000

080029ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029f4:	2300      	movs	r3, #0
 80029f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029f8:	2300      	movs	r3, #0
 80029fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d041      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a0c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a10:	d02a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a12:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a16:	d824      	bhi.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a1c:	d008      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a22:	d81e      	bhi.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a2c:	d010      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a2e:	e018      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a30:	4b86      	ldr	r3, [pc, #536]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4a85      	ldr	r2, [pc, #532]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a3a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a3c:	e015      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3304      	adds	r3, #4
 8002a42:	2100      	movs	r1, #0
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fabb 	bl	8002fc0 <RCCEx_PLLSAI1_Config>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a4e:	e00c      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3320      	adds	r3, #32
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fba6 	bl	80031a8 <RCCEx_PLLSAI2_Config>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a60:	e003      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	74fb      	strb	r3, [r7, #19]
      break;
 8002a66:	e000      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a6a:	7cfb      	ldrb	r3, [r7, #19]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10b      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a70:	4b76      	ldr	r3, [pc, #472]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a7e:	4973      	ldr	r1, [pc, #460]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002a86:	e001      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a88:	7cfb      	ldrb	r3, [r7, #19]
 8002a8a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d041      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002aa0:	d02a      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002aa2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002aa6:	d824      	bhi.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002aa8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002aac:	d008      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002aae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ab2:	d81e      	bhi.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ab8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002abc:	d010      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002abe:	e018      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ac0:	4b62      	ldr	r3, [pc, #392]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4a61      	ldr	r2, [pc, #388]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002acc:	e015      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fa73 	bl	8002fc0 <RCCEx_PLLSAI1_Config>
 8002ada:	4603      	mov	r3, r0
 8002adc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ade:	e00c      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3320      	adds	r3, #32
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fb5e 	bl	80031a8 <RCCEx_PLLSAI2_Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002af0:	e003      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	74fb      	strb	r3, [r7, #19]
      break;
 8002af6:	e000      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002afa:	7cfb      	ldrb	r3, [r7, #19]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10b      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b00:	4b52      	ldr	r3, [pc, #328]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b06:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b0e:	494f      	ldr	r1, [pc, #316]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002b16:	e001      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b18:	7cfb      	ldrb	r3, [r7, #19]
 8002b1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80a0 	beq.w	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b2e:	4b47      	ldr	r3, [pc, #284]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00d      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b44:	4b41      	ldr	r3, [pc, #260]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b48:	4a40      	ldr	r2, [pc, #256]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b50:	4b3e      	ldr	r3, [pc, #248]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b60:	4b3b      	ldr	r3, [pc, #236]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a3a      	ldr	r2, [pc, #232]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b6c:	f7fe fde0 	bl	8001730 <HAL_GetTick>
 8002b70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b72:	e009      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b74:	f7fe fddc 	bl	8001730 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d902      	bls.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	74fb      	strb	r3, [r7, #19]
        break;
 8002b86:	e005      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b88:	4b31      	ldr	r3, [pc, #196]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0ef      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b94:	7cfb      	ldrb	r3, [r7, #19]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d15c      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ba4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01f      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d019      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bb8:	4b24      	ldr	r3, [pc, #144]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bc4:	4b21      	ldr	r3, [pc, #132]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bca:	4a20      	ldr	r2, [pc, #128]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bda:	4a1c      	ldr	r2, [pc, #112]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002be4:	4a19      	ldr	r2, [pc, #100]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d016      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf6:	f7fe fd9b 	bl	8001730 <HAL_GetTick>
 8002bfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bfc:	e00b      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfe:	f7fe fd97 	bl	8001730 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d902      	bls.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	74fb      	strb	r3, [r7, #19]
            break;
 8002c14:	e006      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c16:	4b0d      	ldr	r3, [pc, #52]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0ec      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c24:	7cfb      	ldrb	r3, [r7, #19]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c2a:	4b08      	ldr	r3, [pc, #32]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c3a:	4904      	ldr	r1, [pc, #16]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c42:	e009      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c44:	7cfb      	ldrb	r3, [r7, #19]
 8002c46:	74bb      	strb	r3, [r7, #18]
 8002c48:	e006      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c54:	7cfb      	ldrb	r3, [r7, #19]
 8002c56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c58:	7c7b      	ldrb	r3, [r7, #17]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d105      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5e:	4b9e      	ldr	r3, [pc, #632]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c62:	4a9d      	ldr	r2, [pc, #628]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c76:	4b98      	ldr	r3, [pc, #608]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7c:	f023 0203 	bic.w	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c84:	4994      	ldr	r1, [pc, #592]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c98:	4b8f      	ldr	r3, [pc, #572]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c9e:	f023 020c 	bic.w	r2, r3, #12
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca6:	498c      	ldr	r1, [pc, #560]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cba:	4b87      	ldr	r3, [pc, #540]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	4983      	ldr	r1, [pc, #524]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cdc:	4b7e      	ldr	r3, [pc, #504]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cea:	497b      	ldr	r1, [pc, #492]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cfe:	4b76      	ldr	r3, [pc, #472]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d0c:	4972      	ldr	r1, [pc, #456]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d20:	4b6d      	ldr	r3, [pc, #436]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d26:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d2e:	496a      	ldr	r1, [pc, #424]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d42:	4b65      	ldr	r3, [pc, #404]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d50:	4961      	ldr	r1, [pc, #388]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00a      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d64:	4b5c      	ldr	r3, [pc, #368]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d72:	4959      	ldr	r1, [pc, #356]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d86:	4b54      	ldr	r3, [pc, #336]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d8c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d94:	4950      	ldr	r1, [pc, #320]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002da8:	4b4b      	ldr	r3, [pc, #300]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db6:	4948      	ldr	r1, [pc, #288]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dca:	4b43      	ldr	r3, [pc, #268]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd8:	493f      	ldr	r1, [pc, #252]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d028      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dec:	4b3a      	ldr	r3, [pc, #232]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dfa:	4937      	ldr	r1, [pc, #220]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e0a:	d106      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e0c:	4b32      	ldr	r3, [pc, #200]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4a31      	ldr	r2, [pc, #196]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e16:	60d3      	str	r3, [r2, #12]
 8002e18:	e011      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e22:	d10c      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3304      	adds	r3, #4
 8002e28:	2101      	movs	r1, #1
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f8c8 	bl	8002fc0 <RCCEx_PLLSAI1_Config>
 8002e30:	4603      	mov	r3, r0
 8002e32:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002e3a:	7cfb      	ldrb	r3, [r7, #19]
 8002e3c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d028      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e4a:	4b23      	ldr	r3, [pc, #140]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e50:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e58:	491f      	ldr	r1, [pc, #124]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e68:	d106      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e74:	60d3      	str	r3, [r2, #12]
 8002e76:	e011      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3304      	adds	r3, #4
 8002e86:	2101      	movs	r1, #1
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 f899 	bl	8002fc0 <RCCEx_PLLSAI1_Config>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e92:	7cfb      	ldrb	r3, [r7, #19]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e98:	7cfb      	ldrb	r3, [r7, #19]
 8002e9a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d02b      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb6:	4908      	ldr	r1, [pc, #32]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ec6:	d109      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec8:	4b03      	ldr	r3, [pc, #12]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a02      	ldr	r2, [pc, #8]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ed2:	60d3      	str	r3, [r2, #12]
 8002ed4:	e014      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ee0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ee4:	d10c      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	2101      	movs	r1, #1
 8002eec:	4618      	mov	r0, r3
 8002eee:	f000 f867 	bl	8002fc0 <RCCEx_PLLSAI1_Config>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ef6:	7cfb      	ldrb	r3, [r7, #19]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002efc:	7cfb      	ldrb	r3, [r7, #19]
 8002efe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d02f      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f12:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f1a:	4928      	ldr	r1, [pc, #160]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f2a:	d10d      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3304      	adds	r3, #4
 8002f30:	2102      	movs	r1, #2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 f844 	bl	8002fc0 <RCCEx_PLLSAI1_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f3c:	7cfb      	ldrb	r3, [r7, #19]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d014      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f42:	7cfb      	ldrb	r3, [r7, #19]
 8002f44:	74bb      	strb	r3, [r7, #18]
 8002f46:	e011      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3320      	adds	r3, #32
 8002f56:	2102      	movs	r1, #2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 f925 	bl	80031a8 <RCCEx_PLLSAI2_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f62:	7cfb      	ldrb	r3, [r7, #19]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f68:	7cfb      	ldrb	r3, [r7, #19]
 8002f6a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f78:	4b10      	ldr	r3, [pc, #64]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f86:	490d      	ldr	r1, [pc, #52]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00b      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f9a:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002faa:	4904      	ldr	r1, [pc, #16]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fb2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40021000 	.word	0x40021000

08002fc0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fce:	4b75      	ldr	r3, [pc, #468]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d018      	beq.n	800300c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fda:	4b72      	ldr	r3, [pc, #456]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f003 0203 	and.w	r2, r3, #3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d10d      	bne.n	8003006 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
       ||
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d009      	beq.n	8003006 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ff2:	4b6c      	ldr	r3, [pc, #432]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
       ||
 8003002:	429a      	cmp	r2, r3
 8003004:	d047      	beq.n	8003096 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	73fb      	strb	r3, [r7, #15]
 800300a:	e044      	b.n	8003096 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b03      	cmp	r3, #3
 8003012:	d018      	beq.n	8003046 <RCCEx_PLLSAI1_Config+0x86>
 8003014:	2b03      	cmp	r3, #3
 8003016:	d825      	bhi.n	8003064 <RCCEx_PLLSAI1_Config+0xa4>
 8003018:	2b01      	cmp	r3, #1
 800301a:	d002      	beq.n	8003022 <RCCEx_PLLSAI1_Config+0x62>
 800301c:	2b02      	cmp	r3, #2
 800301e:	d009      	beq.n	8003034 <RCCEx_PLLSAI1_Config+0x74>
 8003020:	e020      	b.n	8003064 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003022:	4b60      	ldr	r3, [pc, #384]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d11d      	bne.n	800306a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003032:	e01a      	b.n	800306a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003034:	4b5b      	ldr	r3, [pc, #364]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800303c:	2b00      	cmp	r3, #0
 800303e:	d116      	bne.n	800306e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003044:	e013      	b.n	800306e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003046:	4b57      	ldr	r3, [pc, #348]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10f      	bne.n	8003072 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003052:	4b54      	ldr	r3, [pc, #336]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003062:	e006      	b.n	8003072 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
      break;
 8003068:	e004      	b.n	8003074 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800306a:	bf00      	nop
 800306c:	e002      	b.n	8003074 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800306e:	bf00      	nop
 8003070:	e000      	b.n	8003074 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003072:	bf00      	nop
    }

    if(status == HAL_OK)
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10d      	bne.n	8003096 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800307a:	4b4a      	ldr	r3, [pc, #296]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6819      	ldr	r1, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	3b01      	subs	r3, #1
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	430b      	orrs	r3, r1
 8003090:	4944      	ldr	r1, [pc, #272]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003092:	4313      	orrs	r3, r2
 8003094:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d17d      	bne.n	8003198 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800309c:	4b41      	ldr	r3, [pc, #260]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a40      	ldr	r2, [pc, #256]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80030a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a8:	f7fe fb42 	bl	8001730 <HAL_GetTick>
 80030ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030ae:	e009      	b.n	80030c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030b0:	f7fe fb3e 	bl	8001730 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d902      	bls.n	80030c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	73fb      	strb	r3, [r7, #15]
        break;
 80030c2:	e005      	b.n	80030d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030c4:	4b37      	ldr	r3, [pc, #220]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1ef      	bne.n	80030b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d160      	bne.n	8003198 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d111      	bne.n	8003100 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030dc:	4b31      	ldr	r3, [pc, #196]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80030e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6892      	ldr	r2, [r2, #8]
 80030ec:	0211      	lsls	r1, r2, #8
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68d2      	ldr	r2, [r2, #12]
 80030f2:	0912      	lsrs	r2, r2, #4
 80030f4:	0452      	lsls	r2, r2, #17
 80030f6:	430a      	orrs	r2, r1
 80030f8:	492a      	ldr	r1, [pc, #168]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	610b      	str	r3, [r1, #16]
 80030fe:	e027      	b.n	8003150 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d112      	bne.n	800312c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003106:	4b27      	ldr	r3, [pc, #156]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800310e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6892      	ldr	r2, [r2, #8]
 8003116:	0211      	lsls	r1, r2, #8
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6912      	ldr	r2, [r2, #16]
 800311c:	0852      	lsrs	r2, r2, #1
 800311e:	3a01      	subs	r2, #1
 8003120:	0552      	lsls	r2, r2, #21
 8003122:	430a      	orrs	r2, r1
 8003124:	491f      	ldr	r1, [pc, #124]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003126:	4313      	orrs	r3, r2
 8003128:	610b      	str	r3, [r1, #16]
 800312a:	e011      	b.n	8003150 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800312c:	4b1d      	ldr	r3, [pc, #116]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003134:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6892      	ldr	r2, [r2, #8]
 800313c:	0211      	lsls	r1, r2, #8
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6952      	ldr	r2, [r2, #20]
 8003142:	0852      	lsrs	r2, r2, #1
 8003144:	3a01      	subs	r2, #1
 8003146:	0652      	lsls	r2, r2, #25
 8003148:	430a      	orrs	r2, r1
 800314a:	4916      	ldr	r1, [pc, #88]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314c:	4313      	orrs	r3, r2
 800314e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003150:	4b14      	ldr	r3, [pc, #80]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a13      	ldr	r2, [pc, #76]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003156:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800315a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315c:	f7fe fae8 	bl	8001730 <HAL_GetTick>
 8003160:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003162:	e009      	b.n	8003178 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003164:	f7fe fae4 	bl	8001730 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d902      	bls.n	8003178 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	73fb      	strb	r3, [r7, #15]
          break;
 8003176:	e005      	b.n	8003184 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003178:	4b0a      	ldr	r3, [pc, #40]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0ef      	beq.n	8003164 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800318a:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	4904      	ldr	r1, [pc, #16]	@ (80031a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003194:	4313      	orrs	r3, r2
 8003196:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003198:	7bfb      	ldrb	r3, [r7, #15]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000

080031a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d018      	beq.n	80031f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031c2:	4b67      	ldr	r3, [pc, #412]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0203 	and.w	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d10d      	bne.n	80031ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
       ||
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d009      	beq.n	80031ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80031da:	4b61      	ldr	r3, [pc, #388]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	091b      	lsrs	r3, r3, #4
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
       ||
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d047      	beq.n	800327e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	73fb      	strb	r3, [r7, #15]
 80031f2:	e044      	b.n	800327e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d018      	beq.n	800322e <RCCEx_PLLSAI2_Config+0x86>
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d825      	bhi.n	800324c <RCCEx_PLLSAI2_Config+0xa4>
 8003200:	2b01      	cmp	r3, #1
 8003202:	d002      	beq.n	800320a <RCCEx_PLLSAI2_Config+0x62>
 8003204:	2b02      	cmp	r3, #2
 8003206:	d009      	beq.n	800321c <RCCEx_PLLSAI2_Config+0x74>
 8003208:	e020      	b.n	800324c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800320a:	4b55      	ldr	r3, [pc, #340]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d11d      	bne.n	8003252 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800321a:	e01a      	b.n	8003252 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800321c:	4b50      	ldr	r3, [pc, #320]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003224:	2b00      	cmp	r3, #0
 8003226:	d116      	bne.n	8003256 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800322c:	e013      	b.n	8003256 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800322e:	4b4c      	ldr	r3, [pc, #304]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10f      	bne.n	800325a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800323a:	4b49      	ldr	r3, [pc, #292]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800324a:	e006      	b.n	800325a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	73fb      	strb	r3, [r7, #15]
      break;
 8003250:	e004      	b.n	800325c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003252:	bf00      	nop
 8003254:	e002      	b.n	800325c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003256:	bf00      	nop
 8003258:	e000      	b.n	800325c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800325a:	bf00      	nop
    }

    if(status == HAL_OK)
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10d      	bne.n	800327e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003262:	4b3f      	ldr	r3, [pc, #252]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6819      	ldr	r1, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	430b      	orrs	r3, r1
 8003278:	4939      	ldr	r1, [pc, #228]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 800327a:	4313      	orrs	r3, r2
 800327c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d167      	bne.n	8003354 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003284:	4b36      	ldr	r3, [pc, #216]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a35      	ldr	r2, [pc, #212]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 800328a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800328e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003290:	f7fe fa4e 	bl	8001730 <HAL_GetTick>
 8003294:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003296:	e009      	b.n	80032ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003298:	f7fe fa4a 	bl	8001730 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d902      	bls.n	80032ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	73fb      	strb	r3, [r7, #15]
        break;
 80032aa:	e005      	b.n	80032b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1ef      	bne.n	8003298 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d14a      	bne.n	8003354 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d111      	bne.n	80032e8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032c4:	4b26      	ldr	r3, [pc, #152]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80032cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6892      	ldr	r2, [r2, #8]
 80032d4:	0211      	lsls	r1, r2, #8
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68d2      	ldr	r2, [r2, #12]
 80032da:	0912      	lsrs	r2, r2, #4
 80032dc:	0452      	lsls	r2, r2, #17
 80032de:	430a      	orrs	r2, r1
 80032e0:	491f      	ldr	r1, [pc, #124]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	614b      	str	r3, [r1, #20]
 80032e6:	e011      	b.n	800330c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80032f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6892      	ldr	r2, [r2, #8]
 80032f8:	0211      	lsls	r1, r2, #8
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6912      	ldr	r2, [r2, #16]
 80032fe:	0852      	lsrs	r2, r2, #1
 8003300:	3a01      	subs	r2, #1
 8003302:	0652      	lsls	r2, r2, #25
 8003304:	430a      	orrs	r2, r1
 8003306:	4916      	ldr	r1, [pc, #88]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003308:	4313      	orrs	r3, r2
 800330a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800330c:	4b14      	ldr	r3, [pc, #80]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a13      	ldr	r2, [pc, #76]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003312:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003316:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7fe fa0a 	bl	8001730 <HAL_GetTick>
 800331c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800331e:	e009      	b.n	8003334 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003320:	f7fe fa06 	bl	8001730 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d902      	bls.n	8003334 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	73fb      	strb	r3, [r7, #15]
          break;
 8003332:	e005      	b.n	8003340 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003334:	4b0a      	ldr	r3, [pc, #40]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0ef      	beq.n	8003320 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003346:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	4904      	ldr	r1, [pc, #16]	@ (8003360 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003350:	4313      	orrs	r3, r2
 8003352:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003354:	7bfb      	ldrb	r3, [r7, #15]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000

08003364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e049      	b.n	800340a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fe f81c 	bl	80013c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3304      	adds	r3, #4
 80033a0:	4619      	mov	r1, r3
 80033a2:	4610      	mov	r0, r2
 80033a4:	f000 fb06 	bl	80039b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	d001      	beq.n	800342c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e047      	b.n	80034bc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a23      	ldr	r2, [pc, #140]	@ (80034c8 <HAL_TIM_Base_Start+0xb4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d01d      	beq.n	800347a <HAL_TIM_Base_Start+0x66>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003446:	d018      	beq.n	800347a <HAL_TIM_Base_Start+0x66>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1f      	ldr	r2, [pc, #124]	@ (80034cc <HAL_TIM_Base_Start+0xb8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d013      	beq.n	800347a <HAL_TIM_Base_Start+0x66>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1e      	ldr	r2, [pc, #120]	@ (80034d0 <HAL_TIM_Base_Start+0xbc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00e      	beq.n	800347a <HAL_TIM_Base_Start+0x66>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1c      	ldr	r2, [pc, #112]	@ (80034d4 <HAL_TIM_Base_Start+0xc0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d009      	beq.n	800347a <HAL_TIM_Base_Start+0x66>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a1b      	ldr	r2, [pc, #108]	@ (80034d8 <HAL_TIM_Base_Start+0xc4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d004      	beq.n	800347a <HAL_TIM_Base_Start+0x66>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a19      	ldr	r2, [pc, #100]	@ (80034dc <HAL_TIM_Base_Start+0xc8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d115      	bne.n	80034a6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	4b17      	ldr	r3, [pc, #92]	@ (80034e0 <HAL_TIM_Base_Start+0xcc>)
 8003482:	4013      	ands	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b06      	cmp	r3, #6
 800348a:	d015      	beq.n	80034b8 <HAL_TIM_Base_Start+0xa4>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003492:	d011      	beq.n	80034b8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a4:	e008      	b.n	80034b8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f042 0201 	orr.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	e000      	b.n	80034ba <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	40012c00 	.word	0x40012c00
 80034cc:	40000400 	.word	0x40000400
 80034d0:	40000800 	.word	0x40000800
 80034d4:	40000c00 	.word	0x40000c00
 80034d8:	40013400 	.word	0x40013400
 80034dc:	40014000 	.word	0x40014000
 80034e0:	00010007 	.word	0x00010007

080034e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d001      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e04f      	b.n	800359c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a23      	ldr	r2, [pc, #140]	@ (80035a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01d      	beq.n	800355a <HAL_TIM_Base_Start_IT+0x76>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003526:	d018      	beq.n	800355a <HAL_TIM_Base_Start_IT+0x76>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1f      	ldr	r2, [pc, #124]	@ (80035ac <HAL_TIM_Base_Start_IT+0xc8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d013      	beq.n	800355a <HAL_TIM_Base_Start_IT+0x76>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1e      	ldr	r2, [pc, #120]	@ (80035b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00e      	beq.n	800355a <HAL_TIM_Base_Start_IT+0x76>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1c      	ldr	r2, [pc, #112]	@ (80035b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d009      	beq.n	800355a <HAL_TIM_Base_Start_IT+0x76>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1b      	ldr	r2, [pc, #108]	@ (80035b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d004      	beq.n	800355a <HAL_TIM_Base_Start_IT+0x76>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a19      	ldr	r2, [pc, #100]	@ (80035bc <HAL_TIM_Base_Start_IT+0xd8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d115      	bne.n	8003586 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	4b17      	ldr	r3, [pc, #92]	@ (80035c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003562:	4013      	ands	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2b06      	cmp	r3, #6
 800356a:	d015      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0xb4>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003572:	d011      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003584:	e008      	b.n	8003598 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	e000      	b.n	800359a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003598:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	40012c00 	.word	0x40012c00
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800
 80035b4:	40000c00 	.word	0x40000c00
 80035b8:	40013400 	.word	0x40013400
 80035bc:	40014000 	.word	0x40014000
 80035c0:	00010007 	.word	0x00010007

080035c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d020      	beq.n	8003628 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d01b      	beq.n	8003628 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0202 	mvn.w	r2, #2
 80035f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f9b2 	bl	8003978 <HAL_TIM_IC_CaptureCallback>
 8003614:	e005      	b.n	8003622 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f9a4 	bl	8003964 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f9b5 	bl	800398c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	d020      	beq.n	8003674 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01b      	beq.n	8003674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0204 	mvn.w	r2, #4
 8003644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f98c 	bl	8003978 <HAL_TIM_IC_CaptureCallback>
 8003660:	e005      	b.n	800366e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f97e 	bl	8003964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f98f 	bl	800398c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d020      	beq.n	80036c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01b      	beq.n	80036c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0208 	mvn.w	r2, #8
 8003690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2204      	movs	r2, #4
 8003696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f966 	bl	8003978 <HAL_TIM_IC_CaptureCallback>
 80036ac:	e005      	b.n	80036ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f958 	bl	8003964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f969 	bl	800398c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0310 	and.w	r3, r3, #16
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d020      	beq.n	800370c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01b      	beq.n	800370c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0210 	mvn.w	r2, #16
 80036dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2208      	movs	r2, #8
 80036e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f940 	bl	8003978 <HAL_TIM_IC_CaptureCallback>
 80036f8:	e005      	b.n	8003706 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f932 	bl	8003964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f943 	bl	800398c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00c      	beq.n	8003730 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d007      	beq.n	8003730 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0201 	mvn.w	r2, #1
 8003728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fd fe0c 	bl	8001348 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003736:	2b00      	cmp	r3, #0
 8003738:	d104      	bne.n	8003744 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00c      	beq.n	800375e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800374a:	2b00      	cmp	r3, #0
 800374c:	d007      	beq.n	800375e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fafd 	bl	8003d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00c      	beq.n	8003782 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800377a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 faf5 	bl	8003d6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00c      	beq.n	80037a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d007      	beq.n	80037a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800379e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f8fd 	bl	80039a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00c      	beq.n	80037ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f06f 0220 	mvn.w	r2, #32
 80037c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fabd 	bl	8003d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037ca:	bf00      	nop
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_TIM_ConfigClockSource+0x1c>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e0b6      	b.n	800395c <HAL_TIM_ConfigClockSource+0x18a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2202      	movs	r2, #2
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800380c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003810:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003818:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800382a:	d03e      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0xd8>
 800382c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003830:	f200 8087 	bhi.w	8003942 <HAL_TIM_ConfigClockSource+0x170>
 8003834:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003838:	f000 8086 	beq.w	8003948 <HAL_TIM_ConfigClockSource+0x176>
 800383c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003840:	d87f      	bhi.n	8003942 <HAL_TIM_ConfigClockSource+0x170>
 8003842:	2b70      	cmp	r3, #112	@ 0x70
 8003844:	d01a      	beq.n	800387c <HAL_TIM_ConfigClockSource+0xaa>
 8003846:	2b70      	cmp	r3, #112	@ 0x70
 8003848:	d87b      	bhi.n	8003942 <HAL_TIM_ConfigClockSource+0x170>
 800384a:	2b60      	cmp	r3, #96	@ 0x60
 800384c:	d050      	beq.n	80038f0 <HAL_TIM_ConfigClockSource+0x11e>
 800384e:	2b60      	cmp	r3, #96	@ 0x60
 8003850:	d877      	bhi.n	8003942 <HAL_TIM_ConfigClockSource+0x170>
 8003852:	2b50      	cmp	r3, #80	@ 0x50
 8003854:	d03c      	beq.n	80038d0 <HAL_TIM_ConfigClockSource+0xfe>
 8003856:	2b50      	cmp	r3, #80	@ 0x50
 8003858:	d873      	bhi.n	8003942 <HAL_TIM_ConfigClockSource+0x170>
 800385a:	2b40      	cmp	r3, #64	@ 0x40
 800385c:	d058      	beq.n	8003910 <HAL_TIM_ConfigClockSource+0x13e>
 800385e:	2b40      	cmp	r3, #64	@ 0x40
 8003860:	d86f      	bhi.n	8003942 <HAL_TIM_ConfigClockSource+0x170>
 8003862:	2b30      	cmp	r3, #48	@ 0x30
 8003864:	d064      	beq.n	8003930 <HAL_TIM_ConfigClockSource+0x15e>
 8003866:	2b30      	cmp	r3, #48	@ 0x30
 8003868:	d86b      	bhi.n	8003942 <HAL_TIM_ConfigClockSource+0x170>
 800386a:	2b20      	cmp	r3, #32
 800386c:	d060      	beq.n	8003930 <HAL_TIM_ConfigClockSource+0x15e>
 800386e:	2b20      	cmp	r3, #32
 8003870:	d867      	bhi.n	8003942 <HAL_TIM_ConfigClockSource+0x170>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d05c      	beq.n	8003930 <HAL_TIM_ConfigClockSource+0x15e>
 8003876:	2b10      	cmp	r3, #16
 8003878:	d05a      	beq.n	8003930 <HAL_TIM_ConfigClockSource+0x15e>
 800387a:	e062      	b.n	8003942 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800388c:	f000 f9b2 	bl	8003bf4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800389e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	609a      	str	r2, [r3, #8]
      break;
 80038a8:	e04f      	b.n	800394a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038ba:	f000 f99b 	bl	8003bf4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038cc:	609a      	str	r2, [r3, #8]
      break;
 80038ce:	e03c      	b.n	800394a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038dc:	461a      	mov	r2, r3
 80038de:	f000 f90f 	bl	8003b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2150      	movs	r1, #80	@ 0x50
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 f968 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 80038ee:	e02c      	b.n	800394a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038fc:	461a      	mov	r2, r3
 80038fe:	f000 f92e 	bl	8003b5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2160      	movs	r1, #96	@ 0x60
 8003908:	4618      	mov	r0, r3
 800390a:	f000 f958 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 800390e:	e01c      	b.n	800394a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800391c:	461a      	mov	r2, r3
 800391e:	f000 f8ef 	bl	8003b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2140      	movs	r1, #64	@ 0x40
 8003928:	4618      	mov	r0, r3
 800392a:	f000 f948 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 800392e:	e00c      	b.n	800394a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4619      	mov	r1, r3
 800393a:	4610      	mov	r0, r2
 800393c:	f000 f93f 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 8003940:	e003      	b.n	800394a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
      break;
 8003946:	e000      	b.n	800394a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003948:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800395a:	7bfb      	ldrb	r3, [r7, #15]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a46      	ldr	r2, [pc, #280]	@ (8003ae0 <TIM_Base_SetConfig+0x12c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d013      	beq.n	80039f4 <TIM_Base_SetConfig+0x40>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d2:	d00f      	beq.n	80039f4 <TIM_Base_SetConfig+0x40>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a43      	ldr	r2, [pc, #268]	@ (8003ae4 <TIM_Base_SetConfig+0x130>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d00b      	beq.n	80039f4 <TIM_Base_SetConfig+0x40>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a42      	ldr	r2, [pc, #264]	@ (8003ae8 <TIM_Base_SetConfig+0x134>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d007      	beq.n	80039f4 <TIM_Base_SetConfig+0x40>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a41      	ldr	r2, [pc, #260]	@ (8003aec <TIM_Base_SetConfig+0x138>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d003      	beq.n	80039f4 <TIM_Base_SetConfig+0x40>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a40      	ldr	r2, [pc, #256]	@ (8003af0 <TIM_Base_SetConfig+0x13c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d108      	bne.n	8003a06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a35      	ldr	r2, [pc, #212]	@ (8003ae0 <TIM_Base_SetConfig+0x12c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d01f      	beq.n	8003a4e <TIM_Base_SetConfig+0x9a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a14:	d01b      	beq.n	8003a4e <TIM_Base_SetConfig+0x9a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a32      	ldr	r2, [pc, #200]	@ (8003ae4 <TIM_Base_SetConfig+0x130>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d017      	beq.n	8003a4e <TIM_Base_SetConfig+0x9a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a31      	ldr	r2, [pc, #196]	@ (8003ae8 <TIM_Base_SetConfig+0x134>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d013      	beq.n	8003a4e <TIM_Base_SetConfig+0x9a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a30      	ldr	r2, [pc, #192]	@ (8003aec <TIM_Base_SetConfig+0x138>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00f      	beq.n	8003a4e <TIM_Base_SetConfig+0x9a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a2f      	ldr	r2, [pc, #188]	@ (8003af0 <TIM_Base_SetConfig+0x13c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00b      	beq.n	8003a4e <TIM_Base_SetConfig+0x9a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a2e      	ldr	r2, [pc, #184]	@ (8003af4 <TIM_Base_SetConfig+0x140>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d007      	beq.n	8003a4e <TIM_Base_SetConfig+0x9a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a2d      	ldr	r2, [pc, #180]	@ (8003af8 <TIM_Base_SetConfig+0x144>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d003      	beq.n	8003a4e <TIM_Base_SetConfig+0x9a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a2c      	ldr	r2, [pc, #176]	@ (8003afc <TIM_Base_SetConfig+0x148>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d108      	bne.n	8003a60 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a16      	ldr	r2, [pc, #88]	@ (8003ae0 <TIM_Base_SetConfig+0x12c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00f      	beq.n	8003aac <TIM_Base_SetConfig+0xf8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a18      	ldr	r2, [pc, #96]	@ (8003af0 <TIM_Base_SetConfig+0x13c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00b      	beq.n	8003aac <TIM_Base_SetConfig+0xf8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a17      	ldr	r2, [pc, #92]	@ (8003af4 <TIM_Base_SetConfig+0x140>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d007      	beq.n	8003aac <TIM_Base_SetConfig+0xf8>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a16      	ldr	r2, [pc, #88]	@ (8003af8 <TIM_Base_SetConfig+0x144>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d003      	beq.n	8003aac <TIM_Base_SetConfig+0xf8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a15      	ldr	r2, [pc, #84]	@ (8003afc <TIM_Base_SetConfig+0x148>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d103      	bne.n	8003ab4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d105      	bne.n	8003ad2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f023 0201 	bic.w	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	611a      	str	r2, [r3, #16]
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40012c00 	.word	0x40012c00
 8003ae4:	40000400 	.word	0x40000400
 8003ae8:	40000800 	.word	0x40000800
 8003aec:	40000c00 	.word	0x40000c00
 8003af0:	40013400 	.word	0x40013400
 8003af4:	40014000 	.word	0x40014000
 8003af8:	40014400 	.word	0x40014400
 8003afc:	40014800 	.word	0x40014800

08003b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f023 0201 	bic.w	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f023 030a 	bic.w	r3, r3, #10
 8003b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	621a      	str	r2, [r3, #32]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b087      	sub	sp, #28
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	f023 0210 	bic.w	r2, r3, #16
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	031b      	lsls	r3, r3, #12
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	621a      	str	r2, [r3, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b085      	sub	sp, #20
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f043 0307 	orr.w	r3, r3, #7
 8003be0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	609a      	str	r2, [r3, #8]
}
 8003be8:	bf00      	nop
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	021a      	lsls	r2, r3, #8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	609a      	str	r2, [r3, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e068      	b.n	8003d1e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a2e      	ldr	r2, [pc, #184]	@ (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d004      	beq.n	8003c80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a2d      	ldr	r2, [pc, #180]	@ (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d108      	bne.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003c86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1e      	ldr	r2, [pc, #120]	@ (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01d      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cbe:	d018      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d013      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1a      	ldr	r2, [pc, #104]	@ (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00e      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a18      	ldr	r2, [pc, #96]	@ (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d009      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a13      	ldr	r2, [pc, #76]	@ (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d004      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a14      	ldr	r2, [pc, #80]	@ (8003d40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d10c      	bne.n	8003d0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40013400 	.word	0x40013400
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40000800 	.word	0x40000800
 8003d3c:	40000c00 	.word	0x40000c00
 8003d40:	40014000 	.word	0x40014000

08003d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e040      	b.n	8003e14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fd fb2e 	bl	8001404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2224      	movs	r2, #36	@ 0x24
 8003dac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0201 	bic.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fb6a 	bl	80044a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f8af 	bl	8003f30 <UART_SetConfig>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e01b      	b.n	8003e14 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003dea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fbe9 	bl	80045e4 <UART_CheckIdleState>
 8003e12:	4603      	mov	r3, r0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08a      	sub	sp, #40	@ 0x28
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d177      	bne.n	8003f24 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_UART_Transmit+0x24>
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e070      	b.n	8003f26 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2221      	movs	r2, #33	@ 0x21
 8003e50:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e52:	f7fd fc6d 	bl	8001730 <HAL_GetTick>
 8003e56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	88fa      	ldrh	r2, [r7, #6]
 8003e5c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	88fa      	ldrh	r2, [r7, #6]
 8003e64:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e70:	d108      	bne.n	8003e84 <HAL_UART_Transmit+0x68>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d104      	bne.n	8003e84 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	e003      	b.n	8003e8c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e8c:	e02f      	b.n	8003eee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2200      	movs	r2, #0
 8003e96:	2180      	movs	r1, #128	@ 0x80
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 fc4b 	bl	8004734 <UART_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d004      	beq.n	8003eae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e03b      	b.n	8003f26 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10b      	bne.n	8003ecc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	881a      	ldrh	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ec0:	b292      	uxth	r2, r2
 8003ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	e007      	b.n	8003edc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	781a      	ldrb	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1c9      	bne.n	8003e8e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2200      	movs	r2, #0
 8003f02:	2140      	movs	r1, #64	@ 0x40
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fc15 	bl	8004734 <UART_WaitOnFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e005      	b.n	8003f26 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	e000      	b.n	8003f26 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003f24:	2302      	movs	r3, #2
  }
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3720      	adds	r7, #32
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f34:	b08a      	sub	sp, #40	@ 0x28
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4ba4      	ldr	r3, [pc, #656]	@ (80041f0 <UART_SetConfig+0x2c0>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a99      	ldr	r2, [pc, #612]	@ (80041f4 <UART_SetConfig+0x2c4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d004      	beq.n	8003f9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fac:	430a      	orrs	r2, r1
 8003fae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a90      	ldr	r2, [pc, #576]	@ (80041f8 <UART_SetConfig+0x2c8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d126      	bne.n	8004008 <UART_SetConfig+0xd8>
 8003fba:	4b90      	ldr	r3, [pc, #576]	@ (80041fc <UART_SetConfig+0x2cc>)
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d81b      	bhi.n	8004000 <UART_SetConfig+0xd0>
 8003fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8003fd0 <UART_SetConfig+0xa0>)
 8003fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fce:	bf00      	nop
 8003fd0:	08003fe1 	.word	0x08003fe1
 8003fd4:	08003ff1 	.word	0x08003ff1
 8003fd8:	08003fe9 	.word	0x08003fe9
 8003fdc:	08003ff9 	.word	0x08003ff9
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fe6:	e116      	b.n	8004216 <UART_SetConfig+0x2e6>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fee:	e112      	b.n	8004216 <UART_SetConfig+0x2e6>
 8003ff0:	2304      	movs	r3, #4
 8003ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ff6:	e10e      	b.n	8004216 <UART_SetConfig+0x2e6>
 8003ff8:	2308      	movs	r3, #8
 8003ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ffe:	e10a      	b.n	8004216 <UART_SetConfig+0x2e6>
 8004000:	2310      	movs	r3, #16
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004006:	e106      	b.n	8004216 <UART_SetConfig+0x2e6>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a7c      	ldr	r2, [pc, #496]	@ (8004200 <UART_SetConfig+0x2d0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d138      	bne.n	8004084 <UART_SetConfig+0x154>
 8004012:	4b7a      	ldr	r3, [pc, #488]	@ (80041fc <UART_SetConfig+0x2cc>)
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004018:	f003 030c 	and.w	r3, r3, #12
 800401c:	2b0c      	cmp	r3, #12
 800401e:	d82d      	bhi.n	800407c <UART_SetConfig+0x14c>
 8004020:	a201      	add	r2, pc, #4	@ (adr r2, 8004028 <UART_SetConfig+0xf8>)
 8004022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004026:	bf00      	nop
 8004028:	0800405d 	.word	0x0800405d
 800402c:	0800407d 	.word	0x0800407d
 8004030:	0800407d 	.word	0x0800407d
 8004034:	0800407d 	.word	0x0800407d
 8004038:	0800406d 	.word	0x0800406d
 800403c:	0800407d 	.word	0x0800407d
 8004040:	0800407d 	.word	0x0800407d
 8004044:	0800407d 	.word	0x0800407d
 8004048:	08004065 	.word	0x08004065
 800404c:	0800407d 	.word	0x0800407d
 8004050:	0800407d 	.word	0x0800407d
 8004054:	0800407d 	.word	0x0800407d
 8004058:	08004075 	.word	0x08004075
 800405c:	2300      	movs	r3, #0
 800405e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004062:	e0d8      	b.n	8004216 <UART_SetConfig+0x2e6>
 8004064:	2302      	movs	r3, #2
 8004066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800406a:	e0d4      	b.n	8004216 <UART_SetConfig+0x2e6>
 800406c:	2304      	movs	r3, #4
 800406e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004072:	e0d0      	b.n	8004216 <UART_SetConfig+0x2e6>
 8004074:	2308      	movs	r3, #8
 8004076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800407a:	e0cc      	b.n	8004216 <UART_SetConfig+0x2e6>
 800407c:	2310      	movs	r3, #16
 800407e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004082:	e0c8      	b.n	8004216 <UART_SetConfig+0x2e6>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a5e      	ldr	r2, [pc, #376]	@ (8004204 <UART_SetConfig+0x2d4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d125      	bne.n	80040da <UART_SetConfig+0x1aa>
 800408e:	4b5b      	ldr	r3, [pc, #364]	@ (80041fc <UART_SetConfig+0x2cc>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004094:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004098:	2b30      	cmp	r3, #48	@ 0x30
 800409a:	d016      	beq.n	80040ca <UART_SetConfig+0x19a>
 800409c:	2b30      	cmp	r3, #48	@ 0x30
 800409e:	d818      	bhi.n	80040d2 <UART_SetConfig+0x1a2>
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d00a      	beq.n	80040ba <UART_SetConfig+0x18a>
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	d814      	bhi.n	80040d2 <UART_SetConfig+0x1a2>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <UART_SetConfig+0x182>
 80040ac:	2b10      	cmp	r3, #16
 80040ae:	d008      	beq.n	80040c2 <UART_SetConfig+0x192>
 80040b0:	e00f      	b.n	80040d2 <UART_SetConfig+0x1a2>
 80040b2:	2300      	movs	r3, #0
 80040b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040b8:	e0ad      	b.n	8004216 <UART_SetConfig+0x2e6>
 80040ba:	2302      	movs	r3, #2
 80040bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040c0:	e0a9      	b.n	8004216 <UART_SetConfig+0x2e6>
 80040c2:	2304      	movs	r3, #4
 80040c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040c8:	e0a5      	b.n	8004216 <UART_SetConfig+0x2e6>
 80040ca:	2308      	movs	r3, #8
 80040cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040d0:	e0a1      	b.n	8004216 <UART_SetConfig+0x2e6>
 80040d2:	2310      	movs	r3, #16
 80040d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040d8:	e09d      	b.n	8004216 <UART_SetConfig+0x2e6>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a4a      	ldr	r2, [pc, #296]	@ (8004208 <UART_SetConfig+0x2d8>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d125      	bne.n	8004130 <UART_SetConfig+0x200>
 80040e4:	4b45      	ldr	r3, [pc, #276]	@ (80041fc <UART_SetConfig+0x2cc>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80040ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80040f0:	d016      	beq.n	8004120 <UART_SetConfig+0x1f0>
 80040f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80040f4:	d818      	bhi.n	8004128 <UART_SetConfig+0x1f8>
 80040f6:	2b80      	cmp	r3, #128	@ 0x80
 80040f8:	d00a      	beq.n	8004110 <UART_SetConfig+0x1e0>
 80040fa:	2b80      	cmp	r3, #128	@ 0x80
 80040fc:	d814      	bhi.n	8004128 <UART_SetConfig+0x1f8>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <UART_SetConfig+0x1d8>
 8004102:	2b40      	cmp	r3, #64	@ 0x40
 8004104:	d008      	beq.n	8004118 <UART_SetConfig+0x1e8>
 8004106:	e00f      	b.n	8004128 <UART_SetConfig+0x1f8>
 8004108:	2300      	movs	r3, #0
 800410a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800410e:	e082      	b.n	8004216 <UART_SetConfig+0x2e6>
 8004110:	2302      	movs	r3, #2
 8004112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004116:	e07e      	b.n	8004216 <UART_SetConfig+0x2e6>
 8004118:	2304      	movs	r3, #4
 800411a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800411e:	e07a      	b.n	8004216 <UART_SetConfig+0x2e6>
 8004120:	2308      	movs	r3, #8
 8004122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004126:	e076      	b.n	8004216 <UART_SetConfig+0x2e6>
 8004128:	2310      	movs	r3, #16
 800412a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800412e:	e072      	b.n	8004216 <UART_SetConfig+0x2e6>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a35      	ldr	r2, [pc, #212]	@ (800420c <UART_SetConfig+0x2dc>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d12a      	bne.n	8004190 <UART_SetConfig+0x260>
 800413a:	4b30      	ldr	r3, [pc, #192]	@ (80041fc <UART_SetConfig+0x2cc>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004140:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004144:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004148:	d01a      	beq.n	8004180 <UART_SetConfig+0x250>
 800414a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800414e:	d81b      	bhi.n	8004188 <UART_SetConfig+0x258>
 8004150:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004154:	d00c      	beq.n	8004170 <UART_SetConfig+0x240>
 8004156:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800415a:	d815      	bhi.n	8004188 <UART_SetConfig+0x258>
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <UART_SetConfig+0x238>
 8004160:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004164:	d008      	beq.n	8004178 <UART_SetConfig+0x248>
 8004166:	e00f      	b.n	8004188 <UART_SetConfig+0x258>
 8004168:	2300      	movs	r3, #0
 800416a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800416e:	e052      	b.n	8004216 <UART_SetConfig+0x2e6>
 8004170:	2302      	movs	r3, #2
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004176:	e04e      	b.n	8004216 <UART_SetConfig+0x2e6>
 8004178:	2304      	movs	r3, #4
 800417a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800417e:	e04a      	b.n	8004216 <UART_SetConfig+0x2e6>
 8004180:	2308      	movs	r3, #8
 8004182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004186:	e046      	b.n	8004216 <UART_SetConfig+0x2e6>
 8004188:	2310      	movs	r3, #16
 800418a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800418e:	e042      	b.n	8004216 <UART_SetConfig+0x2e6>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a17      	ldr	r2, [pc, #92]	@ (80041f4 <UART_SetConfig+0x2c4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d13a      	bne.n	8004210 <UART_SetConfig+0x2e0>
 800419a:	4b18      	ldr	r3, [pc, #96]	@ (80041fc <UART_SetConfig+0x2cc>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80041a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041a8:	d01a      	beq.n	80041e0 <UART_SetConfig+0x2b0>
 80041aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041ae:	d81b      	bhi.n	80041e8 <UART_SetConfig+0x2b8>
 80041b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041b4:	d00c      	beq.n	80041d0 <UART_SetConfig+0x2a0>
 80041b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041ba:	d815      	bhi.n	80041e8 <UART_SetConfig+0x2b8>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <UART_SetConfig+0x298>
 80041c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041c4:	d008      	beq.n	80041d8 <UART_SetConfig+0x2a8>
 80041c6:	e00f      	b.n	80041e8 <UART_SetConfig+0x2b8>
 80041c8:	2300      	movs	r3, #0
 80041ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ce:	e022      	b.n	8004216 <UART_SetConfig+0x2e6>
 80041d0:	2302      	movs	r3, #2
 80041d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041d6:	e01e      	b.n	8004216 <UART_SetConfig+0x2e6>
 80041d8:	2304      	movs	r3, #4
 80041da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041de:	e01a      	b.n	8004216 <UART_SetConfig+0x2e6>
 80041e0:	2308      	movs	r3, #8
 80041e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041e6:	e016      	b.n	8004216 <UART_SetConfig+0x2e6>
 80041e8:	2310      	movs	r3, #16
 80041ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ee:	e012      	b.n	8004216 <UART_SetConfig+0x2e6>
 80041f0:	efff69f3 	.word	0xefff69f3
 80041f4:	40008000 	.word	0x40008000
 80041f8:	40013800 	.word	0x40013800
 80041fc:	40021000 	.word	0x40021000
 8004200:	40004400 	.word	0x40004400
 8004204:	40004800 	.word	0x40004800
 8004208:	40004c00 	.word	0x40004c00
 800420c:	40005000 	.word	0x40005000
 8004210:	2310      	movs	r3, #16
 8004212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a9f      	ldr	r2, [pc, #636]	@ (8004498 <UART_SetConfig+0x568>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d17a      	bne.n	8004316 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004220:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004224:	2b08      	cmp	r3, #8
 8004226:	d824      	bhi.n	8004272 <UART_SetConfig+0x342>
 8004228:	a201      	add	r2, pc, #4	@ (adr r2, 8004230 <UART_SetConfig+0x300>)
 800422a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422e:	bf00      	nop
 8004230:	08004255 	.word	0x08004255
 8004234:	08004273 	.word	0x08004273
 8004238:	0800425d 	.word	0x0800425d
 800423c:	08004273 	.word	0x08004273
 8004240:	08004263 	.word	0x08004263
 8004244:	08004273 	.word	0x08004273
 8004248:	08004273 	.word	0x08004273
 800424c:	08004273 	.word	0x08004273
 8004250:	0800426b 	.word	0x0800426b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004254:	f7fe fb0c 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 8004258:	61f8      	str	r0, [r7, #28]
        break;
 800425a:	e010      	b.n	800427e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800425c:	4b8f      	ldr	r3, [pc, #572]	@ (800449c <UART_SetConfig+0x56c>)
 800425e:	61fb      	str	r3, [r7, #28]
        break;
 8004260:	e00d      	b.n	800427e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004262:	f7fe fa6d 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 8004266:	61f8      	str	r0, [r7, #28]
        break;
 8004268:	e009      	b.n	800427e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800426a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800426e:	61fb      	str	r3, [r7, #28]
        break;
 8004270:	e005      	b.n	800427e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800427c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 80fb 	beq.w	800447c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	4413      	add	r3, r2
 8004290:	69fa      	ldr	r2, [r7, #28]
 8004292:	429a      	cmp	r2, r3
 8004294:	d305      	bcc.n	80042a2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d903      	bls.n	80042aa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80042a8:	e0e8      	b.n	800447c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	2200      	movs	r2, #0
 80042ae:	461c      	mov	r4, r3
 80042b0:	4615      	mov	r5, r2
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	022b      	lsls	r3, r5, #8
 80042bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80042c0:	0222      	lsls	r2, r4, #8
 80042c2:	68f9      	ldr	r1, [r7, #12]
 80042c4:	6849      	ldr	r1, [r1, #4]
 80042c6:	0849      	lsrs	r1, r1, #1
 80042c8:	2000      	movs	r0, #0
 80042ca:	4688      	mov	r8, r1
 80042cc:	4681      	mov	r9, r0
 80042ce:	eb12 0a08 	adds.w	sl, r2, r8
 80042d2:	eb43 0b09 	adc.w	fp, r3, r9
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	603b      	str	r3, [r7, #0]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042e4:	4650      	mov	r0, sl
 80042e6:	4659      	mov	r1, fp
 80042e8:	f7fc fbb8 	bl	8000a5c <__aeabi_uldivmod>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4613      	mov	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042fa:	d308      	bcc.n	800430e <UART_SetConfig+0x3de>
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004302:	d204      	bcs.n	800430e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	60da      	str	r2, [r3, #12]
 800430c:	e0b6      	b.n	800447c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004314:	e0b2      	b.n	800447c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800431e:	d15e      	bne.n	80043de <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004320:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004324:	2b08      	cmp	r3, #8
 8004326:	d828      	bhi.n	800437a <UART_SetConfig+0x44a>
 8004328:	a201      	add	r2, pc, #4	@ (adr r2, 8004330 <UART_SetConfig+0x400>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004355 	.word	0x08004355
 8004334:	0800435d 	.word	0x0800435d
 8004338:	08004365 	.word	0x08004365
 800433c:	0800437b 	.word	0x0800437b
 8004340:	0800436b 	.word	0x0800436b
 8004344:	0800437b 	.word	0x0800437b
 8004348:	0800437b 	.word	0x0800437b
 800434c:	0800437b 	.word	0x0800437b
 8004350:	08004373 	.word	0x08004373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004354:	f7fe fa8c 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 8004358:	61f8      	str	r0, [r7, #28]
        break;
 800435a:	e014      	b.n	8004386 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800435c:	f7fe fa9e 	bl	800289c <HAL_RCC_GetPCLK2Freq>
 8004360:	61f8      	str	r0, [r7, #28]
        break;
 8004362:	e010      	b.n	8004386 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004364:	4b4d      	ldr	r3, [pc, #308]	@ (800449c <UART_SetConfig+0x56c>)
 8004366:	61fb      	str	r3, [r7, #28]
        break;
 8004368:	e00d      	b.n	8004386 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800436a:	f7fe f9e9 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 800436e:	61f8      	str	r0, [r7, #28]
        break;
 8004370:	e009      	b.n	8004386 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004372:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004376:	61fb      	str	r3, [r7, #28]
        break;
 8004378:	e005      	b.n	8004386 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004384:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d077      	beq.n	800447c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	005a      	lsls	r2, r3, #1
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	085b      	lsrs	r3, r3, #1
 8004396:	441a      	add	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2b0f      	cmp	r3, #15
 80043a6:	d916      	bls.n	80043d6 <UART_SetConfig+0x4a6>
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043ae:	d212      	bcs.n	80043d6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f023 030f 	bic.w	r3, r3, #15
 80043b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	085b      	lsrs	r3, r3, #1
 80043be:	b29b      	uxth	r3, r3
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	8afb      	ldrh	r3, [r7, #22]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	8afa      	ldrh	r2, [r7, #22]
 80043d2:	60da      	str	r2, [r3, #12]
 80043d4:	e052      	b.n	800447c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80043dc:	e04e      	b.n	800447c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d827      	bhi.n	8004436 <UART_SetConfig+0x506>
 80043e6:	a201      	add	r2, pc, #4	@ (adr r2, 80043ec <UART_SetConfig+0x4bc>)
 80043e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ec:	08004411 	.word	0x08004411
 80043f0:	08004419 	.word	0x08004419
 80043f4:	08004421 	.word	0x08004421
 80043f8:	08004437 	.word	0x08004437
 80043fc:	08004427 	.word	0x08004427
 8004400:	08004437 	.word	0x08004437
 8004404:	08004437 	.word	0x08004437
 8004408:	08004437 	.word	0x08004437
 800440c:	0800442f 	.word	0x0800442f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004410:	f7fe fa2e 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 8004414:	61f8      	str	r0, [r7, #28]
        break;
 8004416:	e014      	b.n	8004442 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004418:	f7fe fa40 	bl	800289c <HAL_RCC_GetPCLK2Freq>
 800441c:	61f8      	str	r0, [r7, #28]
        break;
 800441e:	e010      	b.n	8004442 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004420:	4b1e      	ldr	r3, [pc, #120]	@ (800449c <UART_SetConfig+0x56c>)
 8004422:	61fb      	str	r3, [r7, #28]
        break;
 8004424:	e00d      	b.n	8004442 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004426:	f7fe f98b 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 800442a:	61f8      	str	r0, [r7, #28]
        break;
 800442c:	e009      	b.n	8004442 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800442e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004432:	61fb      	str	r3, [r7, #28]
        break;
 8004434:	e005      	b.n	8004442 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004440:	bf00      	nop
    }

    if (pclk != 0U)
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d019      	beq.n	800447c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	085a      	lsrs	r2, r3, #1
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	441a      	add	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	fbb2 f3f3 	udiv	r3, r2, r3
 800445a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	2b0f      	cmp	r3, #15
 8004460:	d909      	bls.n	8004476 <UART_SetConfig+0x546>
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004468:	d205      	bcs.n	8004476 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60da      	str	r2, [r3, #12]
 8004474:	e002      	b.n	800447c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004488:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800448c:	4618      	mov	r0, r3
 800448e:	3728      	adds	r7, #40	@ 0x28
 8004490:	46bd      	mov	sp, r7
 8004492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004496:	bf00      	nop
 8004498:	40008000 	.word	0x40008000
 800449c:	00f42400 	.word	0x00f42400

080044a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01a      	beq.n	80045b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800459e:	d10a      	bne.n	80045b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	605a      	str	r2, [r3, #4]
  }
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b098      	sub	sp, #96	@ 0x60
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045f4:	f7fd f89c 	bl	8001730 <HAL_GetTick>
 80045f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b08      	cmp	r3, #8
 8004606:	d12e      	bne.n	8004666 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004608:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004610:	2200      	movs	r2, #0
 8004612:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f88c 	bl	8004734 <UART_WaitOnFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d021      	beq.n	8004666 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004632:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004636:	653b      	str	r3, [r7, #80]	@ 0x50
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004640:	647b      	str	r3, [r7, #68]	@ 0x44
 8004642:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004646:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800464e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e6      	bne.n	8004622 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e062      	b.n	800472c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b04      	cmp	r3, #4
 8004672:	d149      	bne.n	8004708 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004674:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800467c:	2200      	movs	r2, #0
 800467e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f856 	bl	8004734 <UART_WaitOnFlagUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d03c      	beq.n	8004708 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004696:	e853 3f00 	ldrex	r3, [r3]
 800469a:	623b      	str	r3, [r7, #32]
   return(result);
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	461a      	mov	r2, r3
 80046aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80046ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046b4:	e841 2300 	strex	r3, r2, [r1]
 80046b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1e6      	bne.n	800468e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3308      	adds	r3, #8
 80046c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	e853 3f00 	ldrex	r3, [r3]
 80046ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 0301 	bic.w	r3, r3, #1
 80046d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3308      	adds	r3, #8
 80046de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046e0:	61fa      	str	r2, [r7, #28]
 80046e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e4:	69b9      	ldr	r1, [r7, #24]
 80046e6:	69fa      	ldr	r2, [r7, #28]
 80046e8:	e841 2300 	strex	r3, r2, [r1]
 80046ec:	617b      	str	r3, [r7, #20]
   return(result);
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e5      	bne.n	80046c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e011      	b.n	800472c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2220      	movs	r2, #32
 8004712:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3758      	adds	r7, #88	@ 0x58
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	4613      	mov	r3, r2
 8004742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004744:	e04f      	b.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474c:	d04b      	beq.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474e:	f7fc ffef 	bl	8001730 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	429a      	cmp	r2, r3
 800475c:	d302      	bcc.n	8004764 <UART_WaitOnFlagUntilTimeout+0x30>
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e04e      	b.n	8004806 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b00      	cmp	r3, #0
 8004774:	d037      	beq.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b80      	cmp	r3, #128	@ 0x80
 800477a:	d034      	beq.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b40      	cmp	r3, #64	@ 0x40
 8004780:	d031      	beq.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b08      	cmp	r3, #8
 800478e:	d110      	bne.n	80047b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2208      	movs	r2, #8
 8004796:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 f838 	bl	800480e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2208      	movs	r2, #8
 80047a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e029      	b.n	8004806 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047c0:	d111      	bne.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 f81e 	bl	800480e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e00f      	b.n	8004806 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	4013      	ands	r3, r2
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	bf0c      	ite	eq
 80047f6:	2301      	moveq	r3, #1
 80047f8:	2300      	movne	r3, #0
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	461a      	mov	r2, r3
 80047fe:	79fb      	ldrb	r3, [r7, #7]
 8004800:	429a      	cmp	r2, r3
 8004802:	d0a0      	beq.n	8004746 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800480e:	b480      	push	{r7}
 8004810:	b095      	sub	sp, #84	@ 0x54
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004826:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800482a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004834:	643b      	str	r3, [r7, #64]	@ 0x40
 8004836:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800483a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e6      	bne.n	8004816 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3308      	adds	r3, #8
 800484e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	e853 3f00 	ldrex	r3, [r3]
 8004856:	61fb      	str	r3, [r7, #28]
   return(result);
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f023 0301 	bic.w	r3, r3, #1
 800485e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3308      	adds	r3, #8
 8004866:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004868:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800486a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800486e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004870:	e841 2300 	strex	r3, r2, [r1]
 8004874:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e5      	bne.n	8004848 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004880:	2b01      	cmp	r3, #1
 8004882:	d118      	bne.n	80048b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	60bb      	str	r3, [r7, #8]
   return(result);
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f023 0310 	bic.w	r3, r3, #16
 8004898:	647b      	str	r3, [r7, #68]	@ 0x44
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048a2:	61bb      	str	r3, [r7, #24]
 80048a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	6979      	ldr	r1, [r7, #20]
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	613b      	str	r3, [r7, #16]
   return(result);
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e6      	bne.n	8004884 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80048ca:	bf00      	nop
 80048cc:	3754      	adds	r7, #84	@ 0x54
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b085      	sub	sp, #20
 80048da:	af00      	add	r7, sp, #0
 80048dc:	4603      	mov	r3, r0
 80048de:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80048e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048e8:	2b84      	cmp	r3, #132	@ 0x84
 80048ea:	d005      	beq.n	80048f8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80048ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4413      	add	r3, r2
 80048f4:	3303      	adds	r3, #3
 80048f6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80048f8:	68fb      	ldr	r3, [r7, #12]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800490a:	f000 fafd 	bl	8004f08 <vTaskStartScheduler>
  
  return osOK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	bd80      	pop	{r7, pc}

08004914 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004916:	b089      	sub	sp, #36	@ 0x24
 8004918:	af04      	add	r7, sp, #16
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d020      	beq.n	8004968 <osThreadCreate+0x54>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d01c      	beq.n	8004968 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685c      	ldr	r4, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691e      	ldr	r6, [r3, #16]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff ffc8 	bl	80048d6 <makeFreeRtosPriority>
 8004946:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004950:	9202      	str	r2, [sp, #8]
 8004952:	9301      	str	r3, [sp, #4]
 8004954:	9100      	str	r1, [sp, #0]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	4632      	mov	r2, r6
 800495a:	4629      	mov	r1, r5
 800495c:	4620      	mov	r0, r4
 800495e:	f000 f8ed 	bl	8004b3c <xTaskCreateStatic>
 8004962:	4603      	mov	r3, r0
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	e01c      	b.n	80049a2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685c      	ldr	r4, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004974:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff ffaa 	bl	80048d6 <makeFreeRtosPriority>
 8004982:	4602      	mov	r2, r0
 8004984:	f107 030c 	add.w	r3, r7, #12
 8004988:	9301      	str	r3, [sp, #4]
 800498a:	9200      	str	r2, [sp, #0]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	4632      	mov	r2, r6
 8004990:	4629      	mov	r1, r5
 8004992:	4620      	mov	r0, r4
 8004994:	f000 f932 	bl	8004bfc <xTaskCreate>
 8004998:	4603      	mov	r3, r0
 800499a:	2b01      	cmp	r3, #1
 800499c:	d001      	beq.n	80049a2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	e000      	b.n	80049a4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80049a2:	68fb      	ldr	r3, [r7, #12]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049ac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <osDelay+0x16>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	e000      	b.n	80049c4 <osDelay+0x18>
 80049c2:	2301      	movs	r3, #1
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fa69 	bl	8004e9c <vTaskDelay>
  
  return osOK;
 80049ca:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f103 0208 	add.w	r2, r3, #8
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f04f 32ff 	mov.w	r2, #4294967295
 80049ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f103 0208 	add.w	r2, r3, #8
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f103 0208 	add.w	r2, r3, #8
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b085      	sub	sp, #20
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	601a      	str	r2, [r3, #0]
}
 8004a6a:	bf00      	nop
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8c:	d103      	bne.n	8004a96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	e00c      	b.n	8004ab0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3308      	adds	r3, #8
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	e002      	b.n	8004aa4 <vListInsert+0x2e>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d2f6      	bcs.n	8004a9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	601a      	str	r2, [r3, #0]
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6892      	ldr	r2, [r2, #8]
 8004afe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6852      	ldr	r2, [r2, #4]
 8004b08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d103      	bne.n	8004b1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	1e5a      	subs	r2, r3, #1
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08e      	sub	sp, #56	@ 0x38
 8004b40:	af04      	add	r7, sp, #16
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10b      	bne.n	8004b68 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b62:	bf00      	nop
 8004b64:	bf00      	nop
 8004b66:	e7fd      	b.n	8004b64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10b      	bne.n	8004b86 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	61fb      	str	r3, [r7, #28]
}
 8004b80:	bf00      	nop
 8004b82:	bf00      	nop
 8004b84:	e7fd      	b.n	8004b82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b86:	23a0      	movs	r3, #160	@ 0xa0
 8004b88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2ba0      	cmp	r3, #160	@ 0xa0
 8004b8e:	d00b      	beq.n	8004ba8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	61bb      	str	r3, [r7, #24]
}
 8004ba2:	bf00      	nop
 8004ba4:	bf00      	nop
 8004ba6:	e7fd      	b.n	8004ba4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ba8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01e      	beq.n	8004bee <xTaskCreateStatic+0xb2>
 8004bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d01b      	beq.n	8004bee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bbe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bc8:	2300      	movs	r3, #0
 8004bca:	9303      	str	r3, [sp, #12]
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bce:	9302      	str	r3, [sp, #8]
 8004bd0:	f107 0314 	add.w	r3, r7, #20
 8004bd4:	9301      	str	r3, [sp, #4]
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	68b9      	ldr	r1, [r7, #8]
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 f851 	bl	8004c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004be6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004be8:	f000 f8ee 	bl	8004dc8 <prvAddNewTaskToReadyList>
 8004bec:	e001      	b.n	8004bf2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004bf2:	697b      	ldr	r3, [r7, #20]
	}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3728      	adds	r7, #40	@ 0x28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08c      	sub	sp, #48	@ 0x30
 8004c00:	af04      	add	r7, sp, #16
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c0c:	88fb      	ldrh	r3, [r7, #6]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 ff01 	bl	8005a18 <pvPortMalloc>
 8004c16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00e      	beq.n	8004c3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c1e:	20a0      	movs	r0, #160	@ 0xa0
 8004c20:	f000 fefa 	bl	8005a18 <pvPortMalloc>
 8004c24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c32:	e005      	b.n	8004c40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c34:	6978      	ldr	r0, [r7, #20]
 8004c36:	f000 ffbd 	bl	8005bb4 <vPortFree>
 8004c3a:	e001      	b.n	8004c40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d017      	beq.n	8004c76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c4e:	88fa      	ldrh	r2, [r7, #6]
 8004c50:	2300      	movs	r3, #0
 8004c52:	9303      	str	r3, [sp, #12]
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	9302      	str	r3, [sp, #8]
 8004c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c5a:	9301      	str	r3, [sp, #4]
 8004c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 f80f 	bl	8004c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c6a:	69f8      	ldr	r0, [r7, #28]
 8004c6c:	f000 f8ac 	bl	8004dc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c70:	2301      	movs	r3, #1
 8004c72:	61bb      	str	r3, [r7, #24]
 8004c74:	e002      	b.n	8004c7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c76:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c7c:	69bb      	ldr	r3, [r7, #24]
	}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3720      	adds	r7, #32
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f023 0307 	bic.w	r3, r3, #7
 8004cae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00b      	beq.n	8004cd2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	617b      	str	r3, [r7, #20]
}
 8004ccc:	bf00      	nop
 8004cce:	bf00      	nop
 8004cd0:	e7fd      	b.n	8004cce <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01f      	beq.n	8004d18 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cd8:	2300      	movs	r3, #0
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	e012      	b.n	8004d04 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	7819      	ldrb	r1, [r3, #0]
 8004ce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	4413      	add	r3, r2
 8004cec:	3334      	adds	r3, #52	@ 0x34
 8004cee:	460a      	mov	r2, r1
 8004cf0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d006      	beq.n	8004d0c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	3301      	adds	r3, #1
 8004d02:	61fb      	str	r3, [r7, #28]
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	2b0f      	cmp	r3, #15
 8004d08:	d9e9      	bls.n	8004cde <prvInitialiseNewTask+0x56>
 8004d0a:	e000      	b.n	8004d0e <prvInitialiseNewTask+0x86>
			{
				break;
 8004d0c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d16:	e003      	b.n	8004d20 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d22:	2b06      	cmp	r3, #6
 8004d24:	d901      	bls.n	8004d2a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d26:	2306      	movs	r3, #6
 8004d28:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d34:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d38:	2200      	movs	r2, #0
 8004d3a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3e:	3304      	adds	r3, #4
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff fe67 	bl	8004a14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d48:	3318      	adds	r3, #24
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff fe62 	bl	8004a14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d54:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d58:	f1c3 0207 	rsb	r2, r3, #7
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d64:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	334c      	adds	r3, #76	@ 0x4c
 8004d7a:	224c      	movs	r2, #76	@ 0x4c
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f001 f858 	bl	8005e34 <memset>
 8004d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d86:	4a0d      	ldr	r2, [pc, #52]	@ (8004dbc <prvInitialiseNewTask+0x134>)
 8004d88:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8c:	4a0c      	ldr	r2, [pc, #48]	@ (8004dc0 <prvInitialiseNewTask+0x138>)
 8004d8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d92:	4a0c      	ldr	r2, [pc, #48]	@ (8004dc4 <prvInitialiseNewTask+0x13c>)
 8004d94:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	68f9      	ldr	r1, [r7, #12]
 8004d9a:	69b8      	ldr	r0, [r7, #24]
 8004d9c:	f000 fc2a 	bl	80055f4 <pxPortInitialiseStack>
 8004da0:	4602      	mov	r2, r0
 8004da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004db0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004db2:	bf00      	nop
 8004db4:	3720      	adds	r7, #32
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20004618 	.word	0x20004618
 8004dc0:	20004680 	.word	0x20004680
 8004dc4:	200046e8 	.word	0x200046e8

08004dc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004dd0:	f000 fd42 	bl	8005858 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e80 <prvAddNewTaskToReadyList+0xb8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	4a29      	ldr	r2, [pc, #164]	@ (8004e80 <prvAddNewTaskToReadyList+0xb8>)
 8004ddc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004dde:	4b29      	ldr	r3, [pc, #164]	@ (8004e84 <prvAddNewTaskToReadyList+0xbc>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004de6:	4a27      	ldr	r2, [pc, #156]	@ (8004e84 <prvAddNewTaskToReadyList+0xbc>)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004dec:	4b24      	ldr	r3, [pc, #144]	@ (8004e80 <prvAddNewTaskToReadyList+0xb8>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d110      	bne.n	8004e16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004df4:	f000 fad4 	bl	80053a0 <prvInitialiseTaskLists>
 8004df8:	e00d      	b.n	8004e16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004dfa:	4b23      	ldr	r3, [pc, #140]	@ (8004e88 <prvAddNewTaskToReadyList+0xc0>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d109      	bne.n	8004e16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e02:	4b20      	ldr	r3, [pc, #128]	@ (8004e84 <prvAddNewTaskToReadyList+0xbc>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d802      	bhi.n	8004e16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e10:	4a1c      	ldr	r2, [pc, #112]	@ (8004e84 <prvAddNewTaskToReadyList+0xbc>)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e16:	4b1d      	ldr	r3, [pc, #116]	@ (8004e8c <prvAddNewTaskToReadyList+0xc4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8004e8c <prvAddNewTaskToReadyList+0xc4>)
 8004e1e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e24:	2201      	movs	r2, #1
 8004e26:	409a      	lsls	r2, r3
 8004e28:	4b19      	ldr	r3, [pc, #100]	@ (8004e90 <prvAddNewTaskToReadyList+0xc8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	4a18      	ldr	r2, [pc, #96]	@ (8004e90 <prvAddNewTaskToReadyList+0xc8>)
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e36:	4613      	mov	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4a15      	ldr	r2, [pc, #84]	@ (8004e94 <prvAddNewTaskToReadyList+0xcc>)
 8004e40:	441a      	add	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	3304      	adds	r3, #4
 8004e46:	4619      	mov	r1, r3
 8004e48:	4610      	mov	r0, r2
 8004e4a:	f7ff fdf0 	bl	8004a2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e4e:	f000 fd35 	bl	80058bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e52:	4b0d      	ldr	r3, [pc, #52]	@ (8004e88 <prvAddNewTaskToReadyList+0xc0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00e      	beq.n	8004e78 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e84 <prvAddNewTaskToReadyList+0xbc>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d207      	bcs.n	8004e78 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e68:	4b0b      	ldr	r3, [pc, #44]	@ (8004e98 <prvAddNewTaskToReadyList+0xd0>)
 8004e6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e78:	bf00      	nop
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	200005c4 	.word	0x200005c4
 8004e84:	200004c4 	.word	0x200004c4
 8004e88:	200005d0 	.word	0x200005d0
 8004e8c:	200005e0 	.word	0x200005e0
 8004e90:	200005cc 	.word	0x200005cc
 8004e94:	200004c8 	.word	0x200004c8
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d018      	beq.n	8004ee0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004eae:	4b14      	ldr	r3, [pc, #80]	@ (8004f00 <vTaskDelay+0x64>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <vTaskDelay+0x32>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	60bb      	str	r3, [r7, #8]
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	e7fd      	b.n	8004eca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ece:	f000 f885 	bl	8004fdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fb27 	bl	8005528 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004eda:	f000 f88d 	bl	8004ff8 <xTaskResumeAll>
 8004ede:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d107      	bne.n	8004ef6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004ee6:	4b07      	ldr	r3, [pc, #28]	@ (8004f04 <vTaskDelay+0x68>)
 8004ee8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	200005ec 	.word	0x200005ec
 8004f04:	e000ed04 	.word	0xe000ed04

08004f08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	@ 0x28
 8004f0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f16:	463a      	mov	r2, r7
 8004f18:	1d39      	adds	r1, r7, #4
 8004f1a:	f107 0308 	add.w	r3, r7, #8
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fb ff14 	bl	8000d4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f24:	6839      	ldr	r1, [r7, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	9202      	str	r2, [sp, #8]
 8004f2c:	9301      	str	r3, [sp, #4]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	2300      	movs	r3, #0
 8004f34:	460a      	mov	r2, r1
 8004f36:	4921      	ldr	r1, [pc, #132]	@ (8004fbc <vTaskStartScheduler+0xb4>)
 8004f38:	4821      	ldr	r0, [pc, #132]	@ (8004fc0 <vTaskStartScheduler+0xb8>)
 8004f3a:	f7ff fdff 	bl	8004b3c <xTaskCreateStatic>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4a20      	ldr	r2, [pc, #128]	@ (8004fc4 <vTaskStartScheduler+0xbc>)
 8004f42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f44:	4b1f      	ldr	r3, [pc, #124]	@ (8004fc4 <vTaskStartScheduler+0xbc>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	e001      	b.n	8004f56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d11b      	bne.n	8004f94 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	613b      	str	r3, [r7, #16]
}
 8004f6e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f70:	4b15      	ldr	r3, [pc, #84]	@ (8004fc8 <vTaskStartScheduler+0xc0>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	334c      	adds	r3, #76	@ 0x4c
 8004f76:	4a15      	ldr	r2, [pc, #84]	@ (8004fcc <vTaskStartScheduler+0xc4>)
 8004f78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f7a:	4b15      	ldr	r3, [pc, #84]	@ (8004fd0 <vTaskStartScheduler+0xc8>)
 8004f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f82:	4b14      	ldr	r3, [pc, #80]	@ (8004fd4 <vTaskStartScheduler+0xcc>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f88:	4b13      	ldr	r3, [pc, #76]	@ (8004fd8 <vTaskStartScheduler+0xd0>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f8e:	f000 fbbf 	bl	8005710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f92:	e00f      	b.n	8004fb4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9a:	d10b      	bne.n	8004fb4 <vTaskStartScheduler+0xac>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	60fb      	str	r3, [r7, #12]
}
 8004fae:	bf00      	nop
 8004fb0:	bf00      	nop
 8004fb2:	e7fd      	b.n	8004fb0 <vTaskStartScheduler+0xa8>
}
 8004fb4:	bf00      	nop
 8004fb6:	3718      	adds	r7, #24
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	08006888 	.word	0x08006888
 8004fc0:	08005371 	.word	0x08005371
 8004fc4:	200005e8 	.word	0x200005e8
 8004fc8:	200004c4 	.word	0x200004c4
 8004fcc:	20000010 	.word	0x20000010
 8004fd0:	200005e4 	.word	0x200005e4
 8004fd4:	200005d0 	.word	0x200005d0
 8004fd8:	200005c8 	.word	0x200005c8

08004fdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004fe0:	4b04      	ldr	r3, [pc, #16]	@ (8004ff4 <vTaskSuspendAll+0x18>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	4a03      	ldr	r2, [pc, #12]	@ (8004ff4 <vTaskSuspendAll+0x18>)
 8004fe8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004fea:	bf00      	nop
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	200005ec 	.word	0x200005ec

08004ff8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005002:	2300      	movs	r3, #0
 8005004:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005006:	4b42      	ldr	r3, [pc, #264]	@ (8005110 <xTaskResumeAll+0x118>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10b      	bne.n	8005026 <xTaskResumeAll+0x2e>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	603b      	str	r3, [r7, #0]
}
 8005020:	bf00      	nop
 8005022:	bf00      	nop
 8005024:	e7fd      	b.n	8005022 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005026:	f000 fc17 	bl	8005858 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800502a:	4b39      	ldr	r3, [pc, #228]	@ (8005110 <xTaskResumeAll+0x118>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3b01      	subs	r3, #1
 8005030:	4a37      	ldr	r2, [pc, #220]	@ (8005110 <xTaskResumeAll+0x118>)
 8005032:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005034:	4b36      	ldr	r3, [pc, #216]	@ (8005110 <xTaskResumeAll+0x118>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d161      	bne.n	8005100 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800503c:	4b35      	ldr	r3, [pc, #212]	@ (8005114 <xTaskResumeAll+0x11c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d05d      	beq.n	8005100 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005044:	e02e      	b.n	80050a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005046:	4b34      	ldr	r3, [pc, #208]	@ (8005118 <xTaskResumeAll+0x120>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3318      	adds	r3, #24
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff fd48 	bl	8004ae8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	3304      	adds	r3, #4
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff fd43 	bl	8004ae8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005066:	2201      	movs	r2, #1
 8005068:	409a      	lsls	r2, r3
 800506a:	4b2c      	ldr	r3, [pc, #176]	@ (800511c <xTaskResumeAll+0x124>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4313      	orrs	r3, r2
 8005070:	4a2a      	ldr	r2, [pc, #168]	@ (800511c <xTaskResumeAll+0x124>)
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4a27      	ldr	r2, [pc, #156]	@ (8005120 <xTaskResumeAll+0x128>)
 8005082:	441a      	add	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	3304      	adds	r3, #4
 8005088:	4619      	mov	r1, r3
 800508a:	4610      	mov	r0, r2
 800508c:	f7ff fccf 	bl	8004a2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005094:	4b23      	ldr	r3, [pc, #140]	@ (8005124 <xTaskResumeAll+0x12c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509a:	429a      	cmp	r2, r3
 800509c:	d302      	bcc.n	80050a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800509e:	4b22      	ldr	r3, [pc, #136]	@ (8005128 <xTaskResumeAll+0x130>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005118 <xTaskResumeAll+0x120>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1cc      	bne.n	8005046 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050b2:	f000 fa19 	bl	80054e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80050b6:	4b1d      	ldr	r3, [pc, #116]	@ (800512c <xTaskResumeAll+0x134>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d010      	beq.n	80050e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050c2:	f000 f837 	bl	8005134 <xTaskIncrementTick>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80050cc:	4b16      	ldr	r3, [pc, #88]	@ (8005128 <xTaskResumeAll+0x130>)
 80050ce:	2201      	movs	r2, #1
 80050d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3b01      	subs	r3, #1
 80050d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f1      	bne.n	80050c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80050de:	4b13      	ldr	r3, [pc, #76]	@ (800512c <xTaskResumeAll+0x134>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050e4:	4b10      	ldr	r3, [pc, #64]	@ (8005128 <xTaskResumeAll+0x130>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d009      	beq.n	8005100 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050ec:	2301      	movs	r3, #1
 80050ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005130 <xTaskResumeAll+0x138>)
 80050f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005100:	f000 fbdc 	bl	80058bc <vPortExitCritical>

	return xAlreadyYielded;
 8005104:	68bb      	ldr	r3, [r7, #8]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	200005ec 	.word	0x200005ec
 8005114:	200005c4 	.word	0x200005c4
 8005118:	20000584 	.word	0x20000584
 800511c:	200005cc 	.word	0x200005cc
 8005120:	200004c8 	.word	0x200004c8
 8005124:	200004c4 	.word	0x200004c4
 8005128:	200005d8 	.word	0x200005d8
 800512c:	200005d4 	.word	0x200005d4
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800513a:	2300      	movs	r3, #0
 800513c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800513e:	4b4f      	ldr	r3, [pc, #316]	@ (800527c <xTaskIncrementTick+0x148>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	f040 808f 	bne.w	8005266 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005148:	4b4d      	ldr	r3, [pc, #308]	@ (8005280 <xTaskIncrementTick+0x14c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3301      	adds	r3, #1
 800514e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005150:	4a4b      	ldr	r2, [pc, #300]	@ (8005280 <xTaskIncrementTick+0x14c>)
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d121      	bne.n	80051a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800515c:	4b49      	ldr	r3, [pc, #292]	@ (8005284 <xTaskIncrementTick+0x150>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00b      	beq.n	800517e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	603b      	str	r3, [r7, #0]
}
 8005178:	bf00      	nop
 800517a:	bf00      	nop
 800517c:	e7fd      	b.n	800517a <xTaskIncrementTick+0x46>
 800517e:	4b41      	ldr	r3, [pc, #260]	@ (8005284 <xTaskIncrementTick+0x150>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	4b40      	ldr	r3, [pc, #256]	@ (8005288 <xTaskIncrementTick+0x154>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a3e      	ldr	r2, [pc, #248]	@ (8005284 <xTaskIncrementTick+0x150>)
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	4a3e      	ldr	r2, [pc, #248]	@ (8005288 <xTaskIncrementTick+0x154>)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	4b3e      	ldr	r3, [pc, #248]	@ (800528c <xTaskIncrementTick+0x158>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3301      	adds	r3, #1
 8005198:	4a3c      	ldr	r2, [pc, #240]	@ (800528c <xTaskIncrementTick+0x158>)
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	f000 f9a4 	bl	80054e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005290 <xTaskIncrementTick+0x15c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d348      	bcc.n	800523c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051aa:	4b36      	ldr	r3, [pc, #216]	@ (8005284 <xTaskIncrementTick+0x150>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d104      	bne.n	80051be <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051b4:	4b36      	ldr	r3, [pc, #216]	@ (8005290 <xTaskIncrementTick+0x15c>)
 80051b6:	f04f 32ff 	mov.w	r2, #4294967295
 80051ba:	601a      	str	r2, [r3, #0]
					break;
 80051bc:	e03e      	b.n	800523c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051be:	4b31      	ldr	r3, [pc, #196]	@ (8005284 <xTaskIncrementTick+0x150>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d203      	bcs.n	80051de <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051d6:	4a2e      	ldr	r2, [pc, #184]	@ (8005290 <xTaskIncrementTick+0x15c>)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051dc:	e02e      	b.n	800523c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	3304      	adds	r3, #4
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff fc80 	bl	8004ae8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d004      	beq.n	80051fa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	3318      	adds	r3, #24
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff fc77 	bl	8004ae8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fe:	2201      	movs	r2, #1
 8005200:	409a      	lsls	r2, r3
 8005202:	4b24      	ldr	r3, [pc, #144]	@ (8005294 <xTaskIncrementTick+0x160>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4313      	orrs	r3, r2
 8005208:	4a22      	ldr	r2, [pc, #136]	@ (8005294 <xTaskIncrementTick+0x160>)
 800520a:	6013      	str	r3, [r2, #0]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005210:	4613      	mov	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4a1f      	ldr	r2, [pc, #124]	@ (8005298 <xTaskIncrementTick+0x164>)
 800521a:	441a      	add	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	3304      	adds	r3, #4
 8005220:	4619      	mov	r1, r3
 8005222:	4610      	mov	r0, r2
 8005224:	f7ff fc03 	bl	8004a2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800522c:	4b1b      	ldr	r3, [pc, #108]	@ (800529c <xTaskIncrementTick+0x168>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005232:	429a      	cmp	r2, r3
 8005234:	d3b9      	bcc.n	80051aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005236:	2301      	movs	r3, #1
 8005238:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800523a:	e7b6      	b.n	80051aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800523c:	4b17      	ldr	r3, [pc, #92]	@ (800529c <xTaskIncrementTick+0x168>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005242:	4915      	ldr	r1, [pc, #84]	@ (8005298 <xTaskIncrementTick+0x164>)
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d901      	bls.n	8005258 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005254:	2301      	movs	r3, #1
 8005256:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005258:	4b11      	ldr	r3, [pc, #68]	@ (80052a0 <xTaskIncrementTick+0x16c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d007      	beq.n	8005270 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005260:	2301      	movs	r3, #1
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	e004      	b.n	8005270 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005266:	4b0f      	ldr	r3, [pc, #60]	@ (80052a4 <xTaskIncrementTick+0x170>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3301      	adds	r3, #1
 800526c:	4a0d      	ldr	r2, [pc, #52]	@ (80052a4 <xTaskIncrementTick+0x170>)
 800526e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005270:	697b      	ldr	r3, [r7, #20]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	200005ec 	.word	0x200005ec
 8005280:	200005c8 	.word	0x200005c8
 8005284:	2000057c 	.word	0x2000057c
 8005288:	20000580 	.word	0x20000580
 800528c:	200005dc 	.word	0x200005dc
 8005290:	200005e4 	.word	0x200005e4
 8005294:	200005cc 	.word	0x200005cc
 8005298:	200004c8 	.word	0x200004c8
 800529c:	200004c4 	.word	0x200004c4
 80052a0:	200005d8 	.word	0x200005d8
 80052a4:	200005d4 	.word	0x200005d4

080052a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052ae:	4b2a      	ldr	r3, [pc, #168]	@ (8005358 <vTaskSwitchContext+0xb0>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052b6:	4b29      	ldr	r3, [pc, #164]	@ (800535c <vTaskSwitchContext+0xb4>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052bc:	e045      	b.n	800534a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80052be:	4b27      	ldr	r3, [pc, #156]	@ (800535c <vTaskSwitchContext+0xb4>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052c4:	4b26      	ldr	r3, [pc, #152]	@ (8005360 <vTaskSwitchContext+0xb8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	fab3 f383 	clz	r3, r3
 80052d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80052d2:	7afb      	ldrb	r3, [r7, #11]
 80052d4:	f1c3 031f 	rsb	r3, r3, #31
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	4922      	ldr	r1, [pc, #136]	@ (8005364 <vTaskSwitchContext+0xbc>)
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	440b      	add	r3, r1
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10b      	bne.n	8005306 <vTaskSwitchContext+0x5e>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	607b      	str	r3, [r7, #4]
}
 8005300:	bf00      	nop
 8005302:	bf00      	nop
 8005304:	e7fd      	b.n	8005302 <vTaskSwitchContext+0x5a>
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4613      	mov	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4a14      	ldr	r2, [pc, #80]	@ (8005364 <vTaskSwitchContext+0xbc>)
 8005312:	4413      	add	r3, r2
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	605a      	str	r2, [r3, #4]
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	3308      	adds	r3, #8
 8005328:	429a      	cmp	r2, r3
 800532a:	d104      	bne.n	8005336 <vTaskSwitchContext+0x8e>
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	605a      	str	r2, [r3, #4]
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	4a0a      	ldr	r2, [pc, #40]	@ (8005368 <vTaskSwitchContext+0xc0>)
 800533e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005340:	4b09      	ldr	r3, [pc, #36]	@ (8005368 <vTaskSwitchContext+0xc0>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	334c      	adds	r3, #76	@ 0x4c
 8005346:	4a09      	ldr	r2, [pc, #36]	@ (800536c <vTaskSwitchContext+0xc4>)
 8005348:	6013      	str	r3, [r2, #0]
}
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	200005ec 	.word	0x200005ec
 800535c:	200005d8 	.word	0x200005d8
 8005360:	200005cc 	.word	0x200005cc
 8005364:	200004c8 	.word	0x200004c8
 8005368:	200004c4 	.word	0x200004c4
 800536c:	20000010 	.word	0x20000010

08005370 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005378:	f000 f852 	bl	8005420 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800537c:	4b06      	ldr	r3, [pc, #24]	@ (8005398 <prvIdleTask+0x28>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d9f9      	bls.n	8005378 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005384:	4b05      	ldr	r3, [pc, #20]	@ (800539c <prvIdleTask+0x2c>)
 8005386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005394:	e7f0      	b.n	8005378 <prvIdleTask+0x8>
 8005396:	bf00      	nop
 8005398:	200004c8 	.word	0x200004c8
 800539c:	e000ed04 	.word	0xe000ed04

080053a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053a6:	2300      	movs	r3, #0
 80053a8:	607b      	str	r3, [r7, #4]
 80053aa:	e00c      	b.n	80053c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4a12      	ldr	r2, [pc, #72]	@ (8005400 <prvInitialiseTaskLists+0x60>)
 80053b8:	4413      	add	r3, r2
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7ff fb0a 	bl	80049d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3301      	adds	r3, #1
 80053c4:	607b      	str	r3, [r7, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b06      	cmp	r3, #6
 80053ca:	d9ef      	bls.n	80053ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80053cc:	480d      	ldr	r0, [pc, #52]	@ (8005404 <prvInitialiseTaskLists+0x64>)
 80053ce:	f7ff fb01 	bl	80049d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80053d2:	480d      	ldr	r0, [pc, #52]	@ (8005408 <prvInitialiseTaskLists+0x68>)
 80053d4:	f7ff fafe 	bl	80049d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80053d8:	480c      	ldr	r0, [pc, #48]	@ (800540c <prvInitialiseTaskLists+0x6c>)
 80053da:	f7ff fafb 	bl	80049d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80053de:	480c      	ldr	r0, [pc, #48]	@ (8005410 <prvInitialiseTaskLists+0x70>)
 80053e0:	f7ff faf8 	bl	80049d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80053e4:	480b      	ldr	r0, [pc, #44]	@ (8005414 <prvInitialiseTaskLists+0x74>)
 80053e6:	f7ff faf5 	bl	80049d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80053ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005418 <prvInitialiseTaskLists+0x78>)
 80053ec:	4a05      	ldr	r2, [pc, #20]	@ (8005404 <prvInitialiseTaskLists+0x64>)
 80053ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80053f0:	4b0a      	ldr	r3, [pc, #40]	@ (800541c <prvInitialiseTaskLists+0x7c>)
 80053f2:	4a05      	ldr	r2, [pc, #20]	@ (8005408 <prvInitialiseTaskLists+0x68>)
 80053f4:	601a      	str	r2, [r3, #0]
}
 80053f6:	bf00      	nop
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	200004c8 	.word	0x200004c8
 8005404:	20000554 	.word	0x20000554
 8005408:	20000568 	.word	0x20000568
 800540c:	20000584 	.word	0x20000584
 8005410:	20000598 	.word	0x20000598
 8005414:	200005b0 	.word	0x200005b0
 8005418:	2000057c 	.word	0x2000057c
 800541c:	20000580 	.word	0x20000580

08005420 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005426:	e019      	b.n	800545c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005428:	f000 fa16 	bl	8005858 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800542c:	4b10      	ldr	r3, [pc, #64]	@ (8005470 <prvCheckTasksWaitingTermination+0x50>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	3304      	adds	r3, #4
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff fb55 	bl	8004ae8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800543e:	4b0d      	ldr	r3, [pc, #52]	@ (8005474 <prvCheckTasksWaitingTermination+0x54>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3b01      	subs	r3, #1
 8005444:	4a0b      	ldr	r2, [pc, #44]	@ (8005474 <prvCheckTasksWaitingTermination+0x54>)
 8005446:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005448:	4b0b      	ldr	r3, [pc, #44]	@ (8005478 <prvCheckTasksWaitingTermination+0x58>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3b01      	subs	r3, #1
 800544e:	4a0a      	ldr	r2, [pc, #40]	@ (8005478 <prvCheckTasksWaitingTermination+0x58>)
 8005450:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005452:	f000 fa33 	bl	80058bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f810 	bl	800547c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800545c:	4b06      	ldr	r3, [pc, #24]	@ (8005478 <prvCheckTasksWaitingTermination+0x58>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e1      	bne.n	8005428 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20000598 	.word	0x20000598
 8005474:	200005c4 	.word	0x200005c4
 8005478:	200005ac 	.word	0x200005ac

0800547c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	334c      	adds	r3, #76	@ 0x4c
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fcdb 	bl	8005e44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005494:	2b00      	cmp	r3, #0
 8005496:	d108      	bne.n	80054aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800549c:	4618      	mov	r0, r3
 800549e:	f000 fb89 	bl	8005bb4 <vPortFree>
				vPortFree( pxTCB );
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fb86 	bl	8005bb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054a8:	e019      	b.n	80054de <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d103      	bne.n	80054bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fb7d 	bl	8005bb4 <vPortFree>
	}
 80054ba:	e010      	b.n	80054de <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d00b      	beq.n	80054de <prvDeleteTCB+0x62>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	60fb      	str	r3, [r7, #12]
}
 80054d8:	bf00      	nop
 80054da:	bf00      	nop
 80054dc:	e7fd      	b.n	80054da <prvDeleteTCB+0x5e>
	}
 80054de:	bf00      	nop
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005520 <prvResetNextTaskUnblockTime+0x38>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d104      	bne.n	8005502 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80054f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005524 <prvResetNextTaskUnblockTime+0x3c>)
 80054fa:	f04f 32ff 	mov.w	r2, #4294967295
 80054fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005500:	e008      	b.n	8005514 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005502:	4b07      	ldr	r3, [pc, #28]	@ (8005520 <prvResetNextTaskUnblockTime+0x38>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	4a04      	ldr	r2, [pc, #16]	@ (8005524 <prvResetNextTaskUnblockTime+0x3c>)
 8005512:	6013      	str	r3, [r2, #0]
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	2000057c 	.word	0x2000057c
 8005524:	200005e4 	.word	0x200005e4

08005528 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005532:	4b29      	ldr	r3, [pc, #164]	@ (80055d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005538:	4b28      	ldr	r3, [pc, #160]	@ (80055dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3304      	adds	r3, #4
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fad2 	bl	8004ae8 <uxListRemove>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10b      	bne.n	8005562 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800554a:	4b24      	ldr	r3, [pc, #144]	@ (80055dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005550:	2201      	movs	r2, #1
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	43da      	mvns	r2, r3
 8005558:	4b21      	ldr	r3, [pc, #132]	@ (80055e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4013      	ands	r3, r2
 800555e:	4a20      	ldr	r2, [pc, #128]	@ (80055e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005560:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005568:	d10a      	bne.n	8005580 <prvAddCurrentTaskToDelayedList+0x58>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d007      	beq.n	8005580 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005570:	4b1a      	ldr	r3, [pc, #104]	@ (80055dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	3304      	adds	r3, #4
 8005576:	4619      	mov	r1, r3
 8005578:	481a      	ldr	r0, [pc, #104]	@ (80055e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800557a:	f7ff fa58 	bl	8004a2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800557e:	e026      	b.n	80055ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4413      	add	r3, r2
 8005586:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005588:	4b14      	ldr	r3, [pc, #80]	@ (80055dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	429a      	cmp	r2, r3
 8005596:	d209      	bcs.n	80055ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005598:	4b13      	ldr	r3, [pc, #76]	@ (80055e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	4b0f      	ldr	r3, [pc, #60]	@ (80055dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3304      	adds	r3, #4
 80055a2:	4619      	mov	r1, r3
 80055a4:	4610      	mov	r0, r2
 80055a6:	f7ff fa66 	bl	8004a76 <vListInsert>
}
 80055aa:	e010      	b.n	80055ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ac:	4b0f      	ldr	r3, [pc, #60]	@ (80055ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	4b0a      	ldr	r3, [pc, #40]	@ (80055dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3304      	adds	r3, #4
 80055b6:	4619      	mov	r1, r3
 80055b8:	4610      	mov	r0, r2
 80055ba:	f7ff fa5c 	bl	8004a76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055be:	4b0c      	ldr	r3, [pc, #48]	@ (80055f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d202      	bcs.n	80055ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80055c8:	4a09      	ldr	r2, [pc, #36]	@ (80055f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	6013      	str	r3, [r2, #0]
}
 80055ce:	bf00      	nop
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	200005c8 	.word	0x200005c8
 80055dc:	200004c4 	.word	0x200004c4
 80055e0:	200005cc 	.word	0x200005cc
 80055e4:	200005b0 	.word	0x200005b0
 80055e8:	20000580 	.word	0x20000580
 80055ec:	2000057c 	.word	0x2000057c
 80055f0:	200005e4 	.word	0x200005e4

080055f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3b04      	subs	r3, #4
 8005604:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800560c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3b04      	subs	r3, #4
 8005612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f023 0201 	bic.w	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3b04      	subs	r3, #4
 8005622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005624:	4a0c      	ldr	r2, [pc, #48]	@ (8005658 <pxPortInitialiseStack+0x64>)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3b14      	subs	r3, #20
 800562e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3b04      	subs	r3, #4
 800563a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f06f 0202 	mvn.w	r2, #2
 8005642:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3b20      	subs	r3, #32
 8005648:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800564a:	68fb      	ldr	r3, [r7, #12]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	0800565d 	.word	0x0800565d

0800565c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005662:	2300      	movs	r3, #0
 8005664:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005666:	4b13      	ldr	r3, [pc, #76]	@ (80056b4 <prvTaskExitError+0x58>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566e:	d00b      	beq.n	8005688 <prvTaskExitError+0x2c>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	60fb      	str	r3, [r7, #12]
}
 8005682:	bf00      	nop
 8005684:	bf00      	nop
 8005686:	e7fd      	b.n	8005684 <prvTaskExitError+0x28>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	60bb      	str	r3, [r7, #8]
}
 800569a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800569c:	bf00      	nop
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0fc      	beq.n	800569e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056a4:	bf00      	nop
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	2000000c 	.word	0x2000000c
	...

080056c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80056c0:	4b07      	ldr	r3, [pc, #28]	@ (80056e0 <pxCurrentTCBConst2>)
 80056c2:	6819      	ldr	r1, [r3, #0]
 80056c4:	6808      	ldr	r0, [r1, #0]
 80056c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ca:	f380 8809 	msr	PSP, r0
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f04f 0000 	mov.w	r0, #0
 80056d6:	f380 8811 	msr	BASEPRI, r0
 80056da:	4770      	bx	lr
 80056dc:	f3af 8000 	nop.w

080056e0 <pxCurrentTCBConst2>:
 80056e0:	200004c4 	.word	0x200004c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop

080056e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056e8:	4808      	ldr	r0, [pc, #32]	@ (800570c <prvPortStartFirstTask+0x24>)
 80056ea:	6800      	ldr	r0, [r0, #0]
 80056ec:	6800      	ldr	r0, [r0, #0]
 80056ee:	f380 8808 	msr	MSP, r0
 80056f2:	f04f 0000 	mov.w	r0, #0
 80056f6:	f380 8814 	msr	CONTROL, r0
 80056fa:	b662      	cpsie	i
 80056fc:	b661      	cpsie	f
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	df00      	svc	0
 8005708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800570a:	bf00      	nop
 800570c:	e000ed08 	.word	0xe000ed08

08005710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005716:	4b47      	ldr	r3, [pc, #284]	@ (8005834 <xPortStartScheduler+0x124>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a47      	ldr	r2, [pc, #284]	@ (8005838 <xPortStartScheduler+0x128>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d10b      	bne.n	8005738 <xPortStartScheduler+0x28>
	__asm volatile
 8005720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	613b      	str	r3, [r7, #16]
}
 8005732:	bf00      	nop
 8005734:	bf00      	nop
 8005736:	e7fd      	b.n	8005734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005738:	4b3e      	ldr	r3, [pc, #248]	@ (8005834 <xPortStartScheduler+0x124>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a3f      	ldr	r2, [pc, #252]	@ (800583c <xPortStartScheduler+0x12c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d10b      	bne.n	800575a <xPortStartScheduler+0x4a>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	60fb      	str	r3, [r7, #12]
}
 8005754:	bf00      	nop
 8005756:	bf00      	nop
 8005758:	e7fd      	b.n	8005756 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800575a:	4b39      	ldr	r3, [pc, #228]	@ (8005840 <xPortStartScheduler+0x130>)
 800575c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	22ff      	movs	r2, #255	@ 0xff
 800576a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	b2db      	uxtb	r3, r3
 8005778:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800577c:	b2da      	uxtb	r2, r3
 800577e:	4b31      	ldr	r3, [pc, #196]	@ (8005844 <xPortStartScheduler+0x134>)
 8005780:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005782:	4b31      	ldr	r3, [pc, #196]	@ (8005848 <xPortStartScheduler+0x138>)
 8005784:	2207      	movs	r2, #7
 8005786:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005788:	e009      	b.n	800579e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800578a:	4b2f      	ldr	r3, [pc, #188]	@ (8005848 <xPortStartScheduler+0x138>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3b01      	subs	r3, #1
 8005790:	4a2d      	ldr	r2, [pc, #180]	@ (8005848 <xPortStartScheduler+0x138>)
 8005792:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	b2db      	uxtb	r3, r3
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	b2db      	uxtb	r3, r3
 800579c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800579e:	78fb      	ldrb	r3, [r7, #3]
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057a6:	2b80      	cmp	r3, #128	@ 0x80
 80057a8:	d0ef      	beq.n	800578a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057aa:	4b27      	ldr	r3, [pc, #156]	@ (8005848 <xPortStartScheduler+0x138>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f1c3 0307 	rsb	r3, r3, #7
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	d00b      	beq.n	80057ce <xPortStartScheduler+0xbe>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	60bb      	str	r3, [r7, #8]
}
 80057c8:	bf00      	nop
 80057ca:	bf00      	nop
 80057cc:	e7fd      	b.n	80057ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005848 <xPortStartScheduler+0x138>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	021b      	lsls	r3, r3, #8
 80057d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005848 <xPortStartScheduler+0x138>)
 80057d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005848 <xPortStartScheduler+0x138>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057e0:	4a19      	ldr	r2, [pc, #100]	@ (8005848 <xPortStartScheduler+0x138>)
 80057e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057ec:	4b17      	ldr	r3, [pc, #92]	@ (800584c <xPortStartScheduler+0x13c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a16      	ldr	r2, [pc, #88]	@ (800584c <xPortStartScheduler+0x13c>)
 80057f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80057f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80057f8:	4b14      	ldr	r3, [pc, #80]	@ (800584c <xPortStartScheduler+0x13c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a13      	ldr	r2, [pc, #76]	@ (800584c <xPortStartScheduler+0x13c>)
 80057fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005802:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005804:	f000 f8da 	bl	80059bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005808:	4b11      	ldr	r3, [pc, #68]	@ (8005850 <xPortStartScheduler+0x140>)
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800580e:	f000 f8f9 	bl	8005a04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005812:	4b10      	ldr	r3, [pc, #64]	@ (8005854 <xPortStartScheduler+0x144>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a0f      	ldr	r2, [pc, #60]	@ (8005854 <xPortStartScheduler+0x144>)
 8005818:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800581c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800581e:	f7ff ff63 	bl	80056e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005822:	f7ff fd41 	bl	80052a8 <vTaskSwitchContext>
	prvTaskExitError();
 8005826:	f7ff ff19 	bl	800565c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	e000ed00 	.word	0xe000ed00
 8005838:	410fc271 	.word	0x410fc271
 800583c:	410fc270 	.word	0x410fc270
 8005840:	e000e400 	.word	0xe000e400
 8005844:	200005f0 	.word	0x200005f0
 8005848:	200005f4 	.word	0x200005f4
 800584c:	e000ed20 	.word	0xe000ed20
 8005850:	2000000c 	.word	0x2000000c
 8005854:	e000ef34 	.word	0xe000ef34

08005858 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	607b      	str	r3, [r7, #4]
}
 8005870:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005872:	4b10      	ldr	r3, [pc, #64]	@ (80058b4 <vPortEnterCritical+0x5c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3301      	adds	r3, #1
 8005878:	4a0e      	ldr	r2, [pc, #56]	@ (80058b4 <vPortEnterCritical+0x5c>)
 800587a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800587c:	4b0d      	ldr	r3, [pc, #52]	@ (80058b4 <vPortEnterCritical+0x5c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d110      	bne.n	80058a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005884:	4b0c      	ldr	r3, [pc, #48]	@ (80058b8 <vPortEnterCritical+0x60>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00b      	beq.n	80058a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	603b      	str	r3, [r7, #0]
}
 80058a0:	bf00      	nop
 80058a2:	bf00      	nop
 80058a4:	e7fd      	b.n	80058a2 <vPortEnterCritical+0x4a>
	}
}
 80058a6:	bf00      	nop
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	2000000c 	.word	0x2000000c
 80058b8:	e000ed04 	.word	0xe000ed04

080058bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058c2:	4b12      	ldr	r3, [pc, #72]	@ (800590c <vPortExitCritical+0x50>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10b      	bne.n	80058e2 <vPortExitCritical+0x26>
	__asm volatile
 80058ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	607b      	str	r3, [r7, #4]
}
 80058dc:	bf00      	nop
 80058de:	bf00      	nop
 80058e0:	e7fd      	b.n	80058de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80058e2:	4b0a      	ldr	r3, [pc, #40]	@ (800590c <vPortExitCritical+0x50>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	4a08      	ldr	r2, [pc, #32]	@ (800590c <vPortExitCritical+0x50>)
 80058ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058ec:	4b07      	ldr	r3, [pc, #28]	@ (800590c <vPortExitCritical+0x50>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d105      	bne.n	8005900 <vPortExitCritical+0x44>
 80058f4:	2300      	movs	r3, #0
 80058f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80058fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	2000000c 	.word	0x2000000c

08005910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005910:	f3ef 8009 	mrs	r0, PSP
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	4b15      	ldr	r3, [pc, #84]	@ (8005970 <pxCurrentTCBConst>)
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	f01e 0f10 	tst.w	lr, #16
 8005920:	bf08      	it	eq
 8005922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592a:	6010      	str	r0, [r2, #0]
 800592c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005930:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005934:	f380 8811 	msr	BASEPRI, r0
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f7ff fcb2 	bl	80052a8 <vTaskSwitchContext>
 8005944:	f04f 0000 	mov.w	r0, #0
 8005948:	f380 8811 	msr	BASEPRI, r0
 800594c:	bc09      	pop	{r0, r3}
 800594e:	6819      	ldr	r1, [r3, #0]
 8005950:	6808      	ldr	r0, [r1, #0]
 8005952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005956:	f01e 0f10 	tst.w	lr, #16
 800595a:	bf08      	it	eq
 800595c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005960:	f380 8809 	msr	PSP, r0
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	f3af 8000 	nop.w

08005970 <pxCurrentTCBConst>:
 8005970:	200004c4 	.word	0x200004c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop

08005978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
	__asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	607b      	str	r3, [r7, #4]
}
 8005990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005992:	f7ff fbcf 	bl	8005134 <xTaskIncrementTick>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800599c:	4b06      	ldr	r3, [pc, #24]	@ (80059b8 <SysTick_Handler+0x40>)
 800599e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	2300      	movs	r3, #0
 80059a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	f383 8811 	msr	BASEPRI, r3
}
 80059ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80059b0:	bf00      	nop
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	e000ed04 	.word	0xe000ed04

080059bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059c0:	4b0b      	ldr	r3, [pc, #44]	@ (80059f0 <vPortSetupTimerInterrupt+0x34>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059c6:	4b0b      	ldr	r3, [pc, #44]	@ (80059f4 <vPortSetupTimerInterrupt+0x38>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059cc:	4b0a      	ldr	r3, [pc, #40]	@ (80059f8 <vPortSetupTimerInterrupt+0x3c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a0a      	ldr	r2, [pc, #40]	@ (80059fc <vPortSetupTimerInterrupt+0x40>)
 80059d2:	fba2 2303 	umull	r2, r3, r2, r3
 80059d6:	099b      	lsrs	r3, r3, #6
 80059d8:	4a09      	ldr	r2, [pc, #36]	@ (8005a00 <vPortSetupTimerInterrupt+0x44>)
 80059da:	3b01      	subs	r3, #1
 80059dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059de:	4b04      	ldr	r3, [pc, #16]	@ (80059f0 <vPortSetupTimerInterrupt+0x34>)
 80059e0:	2207      	movs	r2, #7
 80059e2:	601a      	str	r2, [r3, #0]
}
 80059e4:	bf00      	nop
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	e000e010 	.word	0xe000e010
 80059f4:	e000e018 	.word	0xe000e018
 80059f8:	20000000 	.word	0x20000000
 80059fc:	10624dd3 	.word	0x10624dd3
 8005a00:	e000e014 	.word	0xe000e014

08005a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005a14 <vPortEnableVFP+0x10>
 8005a08:	6801      	ldr	r1, [r0, #0]
 8005a0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005a0e:	6001      	str	r1, [r0, #0]
 8005a10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a12:	bf00      	nop
 8005a14:	e000ed88 	.word	0xe000ed88

08005a18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08a      	sub	sp, #40	@ 0x28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a24:	f7ff fada 	bl	8004fdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a28:	4b5c      	ldr	r3, [pc, #368]	@ (8005b9c <pvPortMalloc+0x184>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a30:	f000 f924 	bl	8005c7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a34:	4b5a      	ldr	r3, [pc, #360]	@ (8005ba0 <pvPortMalloc+0x188>)
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f040 8095 	bne.w	8005b6c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d01e      	beq.n	8005a86 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005a48:	2208      	movs	r2, #8
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d015      	beq.n	8005a86 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f023 0307 	bic.w	r3, r3, #7
 8005a60:	3308      	adds	r3, #8
 8005a62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00b      	beq.n	8005a86 <pvPortMalloc+0x6e>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	617b      	str	r3, [r7, #20]
}
 8005a80:	bf00      	nop
 8005a82:	bf00      	nop
 8005a84:	e7fd      	b.n	8005a82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d06f      	beq.n	8005b6c <pvPortMalloc+0x154>
 8005a8c:	4b45      	ldr	r3, [pc, #276]	@ (8005ba4 <pvPortMalloc+0x18c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d86a      	bhi.n	8005b6c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a96:	4b44      	ldr	r3, [pc, #272]	@ (8005ba8 <pvPortMalloc+0x190>)
 8005a98:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a9a:	4b43      	ldr	r3, [pc, #268]	@ (8005ba8 <pvPortMalloc+0x190>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005aa0:	e004      	b.n	8005aac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d903      	bls.n	8005abe <pvPortMalloc+0xa6>
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1f1      	bne.n	8005aa2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005abe:	4b37      	ldr	r3, [pc, #220]	@ (8005b9c <pvPortMalloc+0x184>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d051      	beq.n	8005b6c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2208      	movs	r2, #8
 8005ace:	4413      	add	r3, r2
 8005ad0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	1ad2      	subs	r2, r2, r3
 8005ae2:	2308      	movs	r3, #8
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d920      	bls.n	8005b2c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4413      	add	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00b      	beq.n	8005b14 <pvPortMalloc+0xfc>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	613b      	str	r3, [r7, #16]
}
 8005b0e:	bf00      	nop
 8005b10:	bf00      	nop
 8005b12:	e7fd      	b.n	8005b10 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	1ad2      	subs	r2, r2, r3
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b26:	69b8      	ldr	r0, [r7, #24]
 8005b28:	f000 f90a 	bl	8005d40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba4 <pvPortMalloc+0x18c>)
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	4a1b      	ldr	r2, [pc, #108]	@ (8005ba4 <pvPortMalloc+0x18c>)
 8005b38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ba4 <pvPortMalloc+0x18c>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8005bac <pvPortMalloc+0x194>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d203      	bcs.n	8005b4e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b46:	4b17      	ldr	r3, [pc, #92]	@ (8005ba4 <pvPortMalloc+0x18c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a18      	ldr	r2, [pc, #96]	@ (8005bac <pvPortMalloc+0x194>)
 8005b4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	4b13      	ldr	r3, [pc, #76]	@ (8005ba0 <pvPortMalloc+0x188>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	431a      	orrs	r2, r3
 8005b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b62:	4b13      	ldr	r3, [pc, #76]	@ (8005bb0 <pvPortMalloc+0x198>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3301      	adds	r3, #1
 8005b68:	4a11      	ldr	r2, [pc, #68]	@ (8005bb0 <pvPortMalloc+0x198>)
 8005b6a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b6c:	f7ff fa44 	bl	8004ff8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00b      	beq.n	8005b92 <pvPortMalloc+0x17a>
	__asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	60fb      	str	r3, [r7, #12]
}
 8005b8c:	bf00      	nop
 8005b8e:	bf00      	nop
 8005b90:	e7fd      	b.n	8005b8e <pvPortMalloc+0x176>
	return pvReturn;
 8005b92:	69fb      	ldr	r3, [r7, #28]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3728      	adds	r7, #40	@ 0x28
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	20004600 	.word	0x20004600
 8005ba0:	20004614 	.word	0x20004614
 8005ba4:	20004604 	.word	0x20004604
 8005ba8:	200045f8 	.word	0x200045f8
 8005bac:	20004608 	.word	0x20004608
 8005bb0:	2000460c 	.word	0x2000460c

08005bb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d04f      	beq.n	8005c66 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bc6:	2308      	movs	r3, #8
 8005bc8:	425b      	negs	r3, r3
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4413      	add	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	4b25      	ldr	r3, [pc, #148]	@ (8005c70 <vPortFree+0xbc>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10b      	bne.n	8005bfa <vPortFree+0x46>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	60fb      	str	r3, [r7, #12]
}
 8005bf4:	bf00      	nop
 8005bf6:	bf00      	nop
 8005bf8:	e7fd      	b.n	8005bf6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00b      	beq.n	8005c1a <vPortFree+0x66>
	__asm volatile
 8005c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	60bb      	str	r3, [r7, #8]
}
 8005c14:	bf00      	nop
 8005c16:	bf00      	nop
 8005c18:	e7fd      	b.n	8005c16 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	4b14      	ldr	r3, [pc, #80]	@ (8005c70 <vPortFree+0xbc>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4013      	ands	r3, r2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01e      	beq.n	8005c66 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d11a      	bne.n	8005c66 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	4b0e      	ldr	r3, [pc, #56]	@ (8005c70 <vPortFree+0xbc>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	401a      	ands	r2, r3
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c40:	f7ff f9cc 	bl	8004fdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	4b0a      	ldr	r3, [pc, #40]	@ (8005c74 <vPortFree+0xc0>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	4a09      	ldr	r2, [pc, #36]	@ (8005c74 <vPortFree+0xc0>)
 8005c50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c52:	6938      	ldr	r0, [r7, #16]
 8005c54:	f000 f874 	bl	8005d40 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c58:	4b07      	ldr	r3, [pc, #28]	@ (8005c78 <vPortFree+0xc4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	4a06      	ldr	r2, [pc, #24]	@ (8005c78 <vPortFree+0xc4>)
 8005c60:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c62:	f7ff f9c9 	bl	8004ff8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c66:	bf00      	nop
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	20004614 	.word	0x20004614
 8005c74:	20004604 	.word	0x20004604
 8005c78:	20004610 	.word	0x20004610

08005c7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c82:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005c86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c88:	4b27      	ldr	r3, [pc, #156]	@ (8005d28 <prvHeapInit+0xac>)
 8005c8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f003 0307 	and.w	r3, r3, #7
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00c      	beq.n	8005cb0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3307      	adds	r3, #7
 8005c9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0307 	bic.w	r3, r3, #7
 8005ca2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	4a1f      	ldr	r2, [pc, #124]	@ (8005d28 <prvHeapInit+0xac>)
 8005cac:	4413      	add	r3, r2
 8005cae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d2c <prvHeapInit+0xb0>)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cba:	4b1c      	ldr	r3, [pc, #112]	@ (8005d2c <prvHeapInit+0xb0>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cc8:	2208      	movs	r2, #8
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	1a9b      	subs	r3, r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 0307 	bic.w	r3, r3, #7
 8005cd6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4a15      	ldr	r2, [pc, #84]	@ (8005d30 <prvHeapInit+0xb4>)
 8005cdc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005cde:	4b14      	ldr	r3, [pc, #80]	@ (8005d30 <prvHeapInit+0xb4>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ce6:	4b12      	ldr	r3, [pc, #72]	@ (8005d30 <prvHeapInit+0xb4>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	1ad2      	subs	r2, r2, r3
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d30 <prvHeapInit+0xb4>)
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	4a0a      	ldr	r2, [pc, #40]	@ (8005d34 <prvHeapInit+0xb8>)
 8005d0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	4a09      	ldr	r2, [pc, #36]	@ (8005d38 <prvHeapInit+0xbc>)
 8005d12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d14:	4b09      	ldr	r3, [pc, #36]	@ (8005d3c <prvHeapInit+0xc0>)
 8005d16:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005d1a:	601a      	str	r2, [r3, #0]
}
 8005d1c:	bf00      	nop
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	200005f8 	.word	0x200005f8
 8005d2c:	200045f8 	.word	0x200045f8
 8005d30:	20004600 	.word	0x20004600
 8005d34:	20004608 	.word	0x20004608
 8005d38:	20004604 	.word	0x20004604
 8005d3c:	20004614 	.word	0x20004614

08005d40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d48:	4b28      	ldr	r3, [pc, #160]	@ (8005dec <prvInsertBlockIntoFreeList+0xac>)
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	e002      	b.n	8005d54 <prvInsertBlockIntoFreeList+0x14>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d8f7      	bhi.n	8005d4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	4413      	add	r3, r2
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d108      	bne.n	8005d82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	441a      	add	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	441a      	add	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d118      	bne.n	8005dc8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	4b15      	ldr	r3, [pc, #84]	@ (8005df0 <prvInsertBlockIntoFreeList+0xb0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d00d      	beq.n	8005dbe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	441a      	add	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	e008      	b.n	8005dd0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8005df0 <prvInsertBlockIntoFreeList+0xb0>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	e003      	b.n	8005dd0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d002      	beq.n	8005dde <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dde:	bf00      	nop
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	200045f8 	.word	0x200045f8
 8005df0:	20004600 	.word	0x20004600

08005df4 <siprintf>:
 8005df4:	b40e      	push	{r1, r2, r3}
 8005df6:	b500      	push	{lr}
 8005df8:	b09c      	sub	sp, #112	@ 0x70
 8005dfa:	ab1d      	add	r3, sp, #116	@ 0x74
 8005dfc:	9002      	str	r0, [sp, #8]
 8005dfe:	9006      	str	r0, [sp, #24]
 8005e00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e04:	4809      	ldr	r0, [pc, #36]	@ (8005e2c <siprintf+0x38>)
 8005e06:	9107      	str	r1, [sp, #28]
 8005e08:	9104      	str	r1, [sp, #16]
 8005e0a:	4909      	ldr	r1, [pc, #36]	@ (8005e30 <siprintf+0x3c>)
 8005e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e10:	9105      	str	r1, [sp, #20]
 8005e12:	6800      	ldr	r0, [r0, #0]
 8005e14:	9301      	str	r3, [sp, #4]
 8005e16:	a902      	add	r1, sp, #8
 8005e18:	f000 f9f8 	bl	800620c <_svfiprintf_r>
 8005e1c:	9b02      	ldr	r3, [sp, #8]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	b01c      	add	sp, #112	@ 0x70
 8005e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e28:	b003      	add	sp, #12
 8005e2a:	4770      	bx	lr
 8005e2c:	20000010 	.word	0x20000010
 8005e30:	ffff0208 	.word	0xffff0208

08005e34 <memset>:
 8005e34:	4402      	add	r2, r0
 8005e36:	4603      	mov	r3, r0
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d100      	bne.n	8005e3e <memset+0xa>
 8005e3c:	4770      	bx	lr
 8005e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e42:	e7f9      	b.n	8005e38 <memset+0x4>

08005e44 <_reclaim_reent>:
 8005e44:	4b29      	ldr	r3, [pc, #164]	@ (8005eec <_reclaim_reent+0xa8>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4283      	cmp	r3, r0
 8005e4a:	b570      	push	{r4, r5, r6, lr}
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	d04b      	beq.n	8005ee8 <_reclaim_reent+0xa4>
 8005e50:	69c3      	ldr	r3, [r0, #28]
 8005e52:	b1ab      	cbz	r3, 8005e80 <_reclaim_reent+0x3c>
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	b16b      	cbz	r3, 8005e74 <_reclaim_reent+0x30>
 8005e58:	2500      	movs	r5, #0
 8005e5a:	69e3      	ldr	r3, [r4, #28]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	5959      	ldr	r1, [r3, r5]
 8005e60:	2900      	cmp	r1, #0
 8005e62:	d13b      	bne.n	8005edc <_reclaim_reent+0x98>
 8005e64:	3504      	adds	r5, #4
 8005e66:	2d80      	cmp	r5, #128	@ 0x80
 8005e68:	d1f7      	bne.n	8005e5a <_reclaim_reent+0x16>
 8005e6a:	69e3      	ldr	r3, [r4, #28]
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	68d9      	ldr	r1, [r3, #12]
 8005e70:	f000 f878 	bl	8005f64 <_free_r>
 8005e74:	69e3      	ldr	r3, [r4, #28]
 8005e76:	6819      	ldr	r1, [r3, #0]
 8005e78:	b111      	cbz	r1, 8005e80 <_reclaim_reent+0x3c>
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f000 f872 	bl	8005f64 <_free_r>
 8005e80:	6961      	ldr	r1, [r4, #20]
 8005e82:	b111      	cbz	r1, 8005e8a <_reclaim_reent+0x46>
 8005e84:	4620      	mov	r0, r4
 8005e86:	f000 f86d 	bl	8005f64 <_free_r>
 8005e8a:	69e1      	ldr	r1, [r4, #28]
 8005e8c:	b111      	cbz	r1, 8005e94 <_reclaim_reent+0x50>
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f000 f868 	bl	8005f64 <_free_r>
 8005e94:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005e96:	b111      	cbz	r1, 8005e9e <_reclaim_reent+0x5a>
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 f863 	bl	8005f64 <_free_r>
 8005e9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ea0:	b111      	cbz	r1, 8005ea8 <_reclaim_reent+0x64>
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f000 f85e 	bl	8005f64 <_free_r>
 8005ea8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005eaa:	b111      	cbz	r1, 8005eb2 <_reclaim_reent+0x6e>
 8005eac:	4620      	mov	r0, r4
 8005eae:	f000 f859 	bl	8005f64 <_free_r>
 8005eb2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005eb4:	b111      	cbz	r1, 8005ebc <_reclaim_reent+0x78>
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f000 f854 	bl	8005f64 <_free_r>
 8005ebc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005ebe:	b111      	cbz	r1, 8005ec6 <_reclaim_reent+0x82>
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f000 f84f 	bl	8005f64 <_free_r>
 8005ec6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005ec8:	b111      	cbz	r1, 8005ed0 <_reclaim_reent+0x8c>
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f000 f84a 	bl	8005f64 <_free_r>
 8005ed0:	6a23      	ldr	r3, [r4, #32]
 8005ed2:	b14b      	cbz	r3, 8005ee8 <_reclaim_reent+0xa4>
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005eda:	4718      	bx	r3
 8005edc:	680e      	ldr	r6, [r1, #0]
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f000 f840 	bl	8005f64 <_free_r>
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	e7bb      	b.n	8005e60 <_reclaim_reent+0x1c>
 8005ee8:	bd70      	pop	{r4, r5, r6, pc}
 8005eea:	bf00      	nop
 8005eec:	20000010 	.word	0x20000010

08005ef0 <__errno>:
 8005ef0:	4b01      	ldr	r3, [pc, #4]	@ (8005ef8 <__errno+0x8>)
 8005ef2:	6818      	ldr	r0, [r3, #0]
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	20000010 	.word	0x20000010

08005efc <__libc_init_array>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	4d0d      	ldr	r5, [pc, #52]	@ (8005f34 <__libc_init_array+0x38>)
 8005f00:	4c0d      	ldr	r4, [pc, #52]	@ (8005f38 <__libc_init_array+0x3c>)
 8005f02:	1b64      	subs	r4, r4, r5
 8005f04:	10a4      	asrs	r4, r4, #2
 8005f06:	2600      	movs	r6, #0
 8005f08:	42a6      	cmp	r6, r4
 8005f0a:	d109      	bne.n	8005f20 <__libc_init_array+0x24>
 8005f0c:	4d0b      	ldr	r5, [pc, #44]	@ (8005f3c <__libc_init_array+0x40>)
 8005f0e:	4c0c      	ldr	r4, [pc, #48]	@ (8005f40 <__libc_init_array+0x44>)
 8005f10:	f000 fc66 	bl	80067e0 <_init>
 8005f14:	1b64      	subs	r4, r4, r5
 8005f16:	10a4      	asrs	r4, r4, #2
 8005f18:	2600      	movs	r6, #0
 8005f1a:	42a6      	cmp	r6, r4
 8005f1c:	d105      	bne.n	8005f2a <__libc_init_array+0x2e>
 8005f1e:	bd70      	pop	{r4, r5, r6, pc}
 8005f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f24:	4798      	blx	r3
 8005f26:	3601      	adds	r6, #1
 8005f28:	e7ee      	b.n	8005f08 <__libc_init_array+0xc>
 8005f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f2e:	4798      	blx	r3
 8005f30:	3601      	adds	r6, #1
 8005f32:	e7f2      	b.n	8005f1a <__libc_init_array+0x1e>
 8005f34:	08006914 	.word	0x08006914
 8005f38:	08006914 	.word	0x08006914
 8005f3c:	08006914 	.word	0x08006914
 8005f40:	08006918 	.word	0x08006918

08005f44 <__retarget_lock_acquire_recursive>:
 8005f44:	4770      	bx	lr

08005f46 <__retarget_lock_release_recursive>:
 8005f46:	4770      	bx	lr

08005f48 <memcpy>:
 8005f48:	440a      	add	r2, r1
 8005f4a:	4291      	cmp	r1, r2
 8005f4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f50:	d100      	bne.n	8005f54 <memcpy+0xc>
 8005f52:	4770      	bx	lr
 8005f54:	b510      	push	{r4, lr}
 8005f56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f5e:	4291      	cmp	r1, r2
 8005f60:	d1f9      	bne.n	8005f56 <memcpy+0xe>
 8005f62:	bd10      	pop	{r4, pc}

08005f64 <_free_r>:
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	4605      	mov	r5, r0
 8005f68:	2900      	cmp	r1, #0
 8005f6a:	d041      	beq.n	8005ff0 <_free_r+0x8c>
 8005f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f70:	1f0c      	subs	r4, r1, #4
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	bfb8      	it	lt
 8005f76:	18e4      	addlt	r4, r4, r3
 8005f78:	f000 f8e0 	bl	800613c <__malloc_lock>
 8005f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ff4 <_free_r+0x90>)
 8005f7e:	6813      	ldr	r3, [r2, #0]
 8005f80:	b933      	cbnz	r3, 8005f90 <_free_r+0x2c>
 8005f82:	6063      	str	r3, [r4, #4]
 8005f84:	6014      	str	r4, [r2, #0]
 8005f86:	4628      	mov	r0, r5
 8005f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f8c:	f000 b8dc 	b.w	8006148 <__malloc_unlock>
 8005f90:	42a3      	cmp	r3, r4
 8005f92:	d908      	bls.n	8005fa6 <_free_r+0x42>
 8005f94:	6820      	ldr	r0, [r4, #0]
 8005f96:	1821      	adds	r1, r4, r0
 8005f98:	428b      	cmp	r3, r1
 8005f9a:	bf01      	itttt	eq
 8005f9c:	6819      	ldreq	r1, [r3, #0]
 8005f9e:	685b      	ldreq	r3, [r3, #4]
 8005fa0:	1809      	addeq	r1, r1, r0
 8005fa2:	6021      	streq	r1, [r4, #0]
 8005fa4:	e7ed      	b.n	8005f82 <_free_r+0x1e>
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	b10b      	cbz	r3, 8005fb0 <_free_r+0x4c>
 8005fac:	42a3      	cmp	r3, r4
 8005fae:	d9fa      	bls.n	8005fa6 <_free_r+0x42>
 8005fb0:	6811      	ldr	r1, [r2, #0]
 8005fb2:	1850      	adds	r0, r2, r1
 8005fb4:	42a0      	cmp	r0, r4
 8005fb6:	d10b      	bne.n	8005fd0 <_free_r+0x6c>
 8005fb8:	6820      	ldr	r0, [r4, #0]
 8005fba:	4401      	add	r1, r0
 8005fbc:	1850      	adds	r0, r2, r1
 8005fbe:	4283      	cmp	r3, r0
 8005fc0:	6011      	str	r1, [r2, #0]
 8005fc2:	d1e0      	bne.n	8005f86 <_free_r+0x22>
 8005fc4:	6818      	ldr	r0, [r3, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	6053      	str	r3, [r2, #4]
 8005fca:	4408      	add	r0, r1
 8005fcc:	6010      	str	r0, [r2, #0]
 8005fce:	e7da      	b.n	8005f86 <_free_r+0x22>
 8005fd0:	d902      	bls.n	8005fd8 <_free_r+0x74>
 8005fd2:	230c      	movs	r3, #12
 8005fd4:	602b      	str	r3, [r5, #0]
 8005fd6:	e7d6      	b.n	8005f86 <_free_r+0x22>
 8005fd8:	6820      	ldr	r0, [r4, #0]
 8005fda:	1821      	adds	r1, r4, r0
 8005fdc:	428b      	cmp	r3, r1
 8005fde:	bf04      	itt	eq
 8005fe0:	6819      	ldreq	r1, [r3, #0]
 8005fe2:	685b      	ldreq	r3, [r3, #4]
 8005fe4:	6063      	str	r3, [r4, #4]
 8005fe6:	bf04      	itt	eq
 8005fe8:	1809      	addeq	r1, r1, r0
 8005fea:	6021      	streq	r1, [r4, #0]
 8005fec:	6054      	str	r4, [r2, #4]
 8005fee:	e7ca      	b.n	8005f86 <_free_r+0x22>
 8005ff0:	bd38      	pop	{r3, r4, r5, pc}
 8005ff2:	bf00      	nop
 8005ff4:	2000475c 	.word	0x2000475c

08005ff8 <sbrk_aligned>:
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	4e0f      	ldr	r6, [pc, #60]	@ (8006038 <sbrk_aligned+0x40>)
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	6831      	ldr	r1, [r6, #0]
 8006000:	4605      	mov	r5, r0
 8006002:	b911      	cbnz	r1, 800600a <sbrk_aligned+0x12>
 8006004:	f000 fba6 	bl	8006754 <_sbrk_r>
 8006008:	6030      	str	r0, [r6, #0]
 800600a:	4621      	mov	r1, r4
 800600c:	4628      	mov	r0, r5
 800600e:	f000 fba1 	bl	8006754 <_sbrk_r>
 8006012:	1c43      	adds	r3, r0, #1
 8006014:	d103      	bne.n	800601e <sbrk_aligned+0x26>
 8006016:	f04f 34ff 	mov.w	r4, #4294967295
 800601a:	4620      	mov	r0, r4
 800601c:	bd70      	pop	{r4, r5, r6, pc}
 800601e:	1cc4      	adds	r4, r0, #3
 8006020:	f024 0403 	bic.w	r4, r4, #3
 8006024:	42a0      	cmp	r0, r4
 8006026:	d0f8      	beq.n	800601a <sbrk_aligned+0x22>
 8006028:	1a21      	subs	r1, r4, r0
 800602a:	4628      	mov	r0, r5
 800602c:	f000 fb92 	bl	8006754 <_sbrk_r>
 8006030:	3001      	adds	r0, #1
 8006032:	d1f2      	bne.n	800601a <sbrk_aligned+0x22>
 8006034:	e7ef      	b.n	8006016 <sbrk_aligned+0x1e>
 8006036:	bf00      	nop
 8006038:	20004758 	.word	0x20004758

0800603c <_malloc_r>:
 800603c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006040:	1ccd      	adds	r5, r1, #3
 8006042:	f025 0503 	bic.w	r5, r5, #3
 8006046:	3508      	adds	r5, #8
 8006048:	2d0c      	cmp	r5, #12
 800604a:	bf38      	it	cc
 800604c:	250c      	movcc	r5, #12
 800604e:	2d00      	cmp	r5, #0
 8006050:	4606      	mov	r6, r0
 8006052:	db01      	blt.n	8006058 <_malloc_r+0x1c>
 8006054:	42a9      	cmp	r1, r5
 8006056:	d904      	bls.n	8006062 <_malloc_r+0x26>
 8006058:	230c      	movs	r3, #12
 800605a:	6033      	str	r3, [r6, #0]
 800605c:	2000      	movs	r0, #0
 800605e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006062:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006138 <_malloc_r+0xfc>
 8006066:	f000 f869 	bl	800613c <__malloc_lock>
 800606a:	f8d8 3000 	ldr.w	r3, [r8]
 800606e:	461c      	mov	r4, r3
 8006070:	bb44      	cbnz	r4, 80060c4 <_malloc_r+0x88>
 8006072:	4629      	mov	r1, r5
 8006074:	4630      	mov	r0, r6
 8006076:	f7ff ffbf 	bl	8005ff8 <sbrk_aligned>
 800607a:	1c43      	adds	r3, r0, #1
 800607c:	4604      	mov	r4, r0
 800607e:	d158      	bne.n	8006132 <_malloc_r+0xf6>
 8006080:	f8d8 4000 	ldr.w	r4, [r8]
 8006084:	4627      	mov	r7, r4
 8006086:	2f00      	cmp	r7, #0
 8006088:	d143      	bne.n	8006112 <_malloc_r+0xd6>
 800608a:	2c00      	cmp	r4, #0
 800608c:	d04b      	beq.n	8006126 <_malloc_r+0xea>
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	4639      	mov	r1, r7
 8006092:	4630      	mov	r0, r6
 8006094:	eb04 0903 	add.w	r9, r4, r3
 8006098:	f000 fb5c 	bl	8006754 <_sbrk_r>
 800609c:	4581      	cmp	r9, r0
 800609e:	d142      	bne.n	8006126 <_malloc_r+0xea>
 80060a0:	6821      	ldr	r1, [r4, #0]
 80060a2:	1a6d      	subs	r5, r5, r1
 80060a4:	4629      	mov	r1, r5
 80060a6:	4630      	mov	r0, r6
 80060a8:	f7ff ffa6 	bl	8005ff8 <sbrk_aligned>
 80060ac:	3001      	adds	r0, #1
 80060ae:	d03a      	beq.n	8006126 <_malloc_r+0xea>
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	442b      	add	r3, r5
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	f8d8 3000 	ldr.w	r3, [r8]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	bb62      	cbnz	r2, 8006118 <_malloc_r+0xdc>
 80060be:	f8c8 7000 	str.w	r7, [r8]
 80060c2:	e00f      	b.n	80060e4 <_malloc_r+0xa8>
 80060c4:	6822      	ldr	r2, [r4, #0]
 80060c6:	1b52      	subs	r2, r2, r5
 80060c8:	d420      	bmi.n	800610c <_malloc_r+0xd0>
 80060ca:	2a0b      	cmp	r2, #11
 80060cc:	d917      	bls.n	80060fe <_malloc_r+0xc2>
 80060ce:	1961      	adds	r1, r4, r5
 80060d0:	42a3      	cmp	r3, r4
 80060d2:	6025      	str	r5, [r4, #0]
 80060d4:	bf18      	it	ne
 80060d6:	6059      	strne	r1, [r3, #4]
 80060d8:	6863      	ldr	r3, [r4, #4]
 80060da:	bf08      	it	eq
 80060dc:	f8c8 1000 	streq.w	r1, [r8]
 80060e0:	5162      	str	r2, [r4, r5]
 80060e2:	604b      	str	r3, [r1, #4]
 80060e4:	4630      	mov	r0, r6
 80060e6:	f000 f82f 	bl	8006148 <__malloc_unlock>
 80060ea:	f104 000b 	add.w	r0, r4, #11
 80060ee:	1d23      	adds	r3, r4, #4
 80060f0:	f020 0007 	bic.w	r0, r0, #7
 80060f4:	1ac2      	subs	r2, r0, r3
 80060f6:	bf1c      	itt	ne
 80060f8:	1a1b      	subne	r3, r3, r0
 80060fa:	50a3      	strne	r3, [r4, r2]
 80060fc:	e7af      	b.n	800605e <_malloc_r+0x22>
 80060fe:	6862      	ldr	r2, [r4, #4]
 8006100:	42a3      	cmp	r3, r4
 8006102:	bf0c      	ite	eq
 8006104:	f8c8 2000 	streq.w	r2, [r8]
 8006108:	605a      	strne	r2, [r3, #4]
 800610a:	e7eb      	b.n	80060e4 <_malloc_r+0xa8>
 800610c:	4623      	mov	r3, r4
 800610e:	6864      	ldr	r4, [r4, #4]
 8006110:	e7ae      	b.n	8006070 <_malloc_r+0x34>
 8006112:	463c      	mov	r4, r7
 8006114:	687f      	ldr	r7, [r7, #4]
 8006116:	e7b6      	b.n	8006086 <_malloc_r+0x4a>
 8006118:	461a      	mov	r2, r3
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	42a3      	cmp	r3, r4
 800611e:	d1fb      	bne.n	8006118 <_malloc_r+0xdc>
 8006120:	2300      	movs	r3, #0
 8006122:	6053      	str	r3, [r2, #4]
 8006124:	e7de      	b.n	80060e4 <_malloc_r+0xa8>
 8006126:	230c      	movs	r3, #12
 8006128:	6033      	str	r3, [r6, #0]
 800612a:	4630      	mov	r0, r6
 800612c:	f000 f80c 	bl	8006148 <__malloc_unlock>
 8006130:	e794      	b.n	800605c <_malloc_r+0x20>
 8006132:	6005      	str	r5, [r0, #0]
 8006134:	e7d6      	b.n	80060e4 <_malloc_r+0xa8>
 8006136:	bf00      	nop
 8006138:	2000475c 	.word	0x2000475c

0800613c <__malloc_lock>:
 800613c:	4801      	ldr	r0, [pc, #4]	@ (8006144 <__malloc_lock+0x8>)
 800613e:	f7ff bf01 	b.w	8005f44 <__retarget_lock_acquire_recursive>
 8006142:	bf00      	nop
 8006144:	20004754 	.word	0x20004754

08006148 <__malloc_unlock>:
 8006148:	4801      	ldr	r0, [pc, #4]	@ (8006150 <__malloc_unlock+0x8>)
 800614a:	f7ff befc 	b.w	8005f46 <__retarget_lock_release_recursive>
 800614e:	bf00      	nop
 8006150:	20004754 	.word	0x20004754

08006154 <__ssputs_r>:
 8006154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006158:	688e      	ldr	r6, [r1, #8]
 800615a:	461f      	mov	r7, r3
 800615c:	42be      	cmp	r6, r7
 800615e:	680b      	ldr	r3, [r1, #0]
 8006160:	4682      	mov	sl, r0
 8006162:	460c      	mov	r4, r1
 8006164:	4690      	mov	r8, r2
 8006166:	d82d      	bhi.n	80061c4 <__ssputs_r+0x70>
 8006168:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800616c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006170:	d026      	beq.n	80061c0 <__ssputs_r+0x6c>
 8006172:	6965      	ldr	r5, [r4, #20]
 8006174:	6909      	ldr	r1, [r1, #16]
 8006176:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800617a:	eba3 0901 	sub.w	r9, r3, r1
 800617e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006182:	1c7b      	adds	r3, r7, #1
 8006184:	444b      	add	r3, r9
 8006186:	106d      	asrs	r5, r5, #1
 8006188:	429d      	cmp	r5, r3
 800618a:	bf38      	it	cc
 800618c:	461d      	movcc	r5, r3
 800618e:	0553      	lsls	r3, r2, #21
 8006190:	d527      	bpl.n	80061e2 <__ssputs_r+0x8e>
 8006192:	4629      	mov	r1, r5
 8006194:	f7ff ff52 	bl	800603c <_malloc_r>
 8006198:	4606      	mov	r6, r0
 800619a:	b360      	cbz	r0, 80061f6 <__ssputs_r+0xa2>
 800619c:	6921      	ldr	r1, [r4, #16]
 800619e:	464a      	mov	r2, r9
 80061a0:	f7ff fed2 	bl	8005f48 <memcpy>
 80061a4:	89a3      	ldrh	r3, [r4, #12]
 80061a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80061aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ae:	81a3      	strh	r3, [r4, #12]
 80061b0:	6126      	str	r6, [r4, #16]
 80061b2:	6165      	str	r5, [r4, #20]
 80061b4:	444e      	add	r6, r9
 80061b6:	eba5 0509 	sub.w	r5, r5, r9
 80061ba:	6026      	str	r6, [r4, #0]
 80061bc:	60a5      	str	r5, [r4, #8]
 80061be:	463e      	mov	r6, r7
 80061c0:	42be      	cmp	r6, r7
 80061c2:	d900      	bls.n	80061c6 <__ssputs_r+0x72>
 80061c4:	463e      	mov	r6, r7
 80061c6:	6820      	ldr	r0, [r4, #0]
 80061c8:	4632      	mov	r2, r6
 80061ca:	4641      	mov	r1, r8
 80061cc:	f000 faa8 	bl	8006720 <memmove>
 80061d0:	68a3      	ldr	r3, [r4, #8]
 80061d2:	1b9b      	subs	r3, r3, r6
 80061d4:	60a3      	str	r3, [r4, #8]
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	4433      	add	r3, r6
 80061da:	6023      	str	r3, [r4, #0]
 80061dc:	2000      	movs	r0, #0
 80061de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e2:	462a      	mov	r2, r5
 80061e4:	f000 fac6 	bl	8006774 <_realloc_r>
 80061e8:	4606      	mov	r6, r0
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d1e0      	bne.n	80061b0 <__ssputs_r+0x5c>
 80061ee:	6921      	ldr	r1, [r4, #16]
 80061f0:	4650      	mov	r0, sl
 80061f2:	f7ff feb7 	bl	8005f64 <_free_r>
 80061f6:	230c      	movs	r3, #12
 80061f8:	f8ca 3000 	str.w	r3, [sl]
 80061fc:	89a3      	ldrh	r3, [r4, #12]
 80061fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006202:	81a3      	strh	r3, [r4, #12]
 8006204:	f04f 30ff 	mov.w	r0, #4294967295
 8006208:	e7e9      	b.n	80061de <__ssputs_r+0x8a>
	...

0800620c <_svfiprintf_r>:
 800620c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006210:	4698      	mov	r8, r3
 8006212:	898b      	ldrh	r3, [r1, #12]
 8006214:	061b      	lsls	r3, r3, #24
 8006216:	b09d      	sub	sp, #116	@ 0x74
 8006218:	4607      	mov	r7, r0
 800621a:	460d      	mov	r5, r1
 800621c:	4614      	mov	r4, r2
 800621e:	d510      	bpl.n	8006242 <_svfiprintf_r+0x36>
 8006220:	690b      	ldr	r3, [r1, #16]
 8006222:	b973      	cbnz	r3, 8006242 <_svfiprintf_r+0x36>
 8006224:	2140      	movs	r1, #64	@ 0x40
 8006226:	f7ff ff09 	bl	800603c <_malloc_r>
 800622a:	6028      	str	r0, [r5, #0]
 800622c:	6128      	str	r0, [r5, #16]
 800622e:	b930      	cbnz	r0, 800623e <_svfiprintf_r+0x32>
 8006230:	230c      	movs	r3, #12
 8006232:	603b      	str	r3, [r7, #0]
 8006234:	f04f 30ff 	mov.w	r0, #4294967295
 8006238:	b01d      	add	sp, #116	@ 0x74
 800623a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800623e:	2340      	movs	r3, #64	@ 0x40
 8006240:	616b      	str	r3, [r5, #20]
 8006242:	2300      	movs	r3, #0
 8006244:	9309      	str	r3, [sp, #36]	@ 0x24
 8006246:	2320      	movs	r3, #32
 8006248:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800624c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006250:	2330      	movs	r3, #48	@ 0x30
 8006252:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80063f0 <_svfiprintf_r+0x1e4>
 8006256:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800625a:	f04f 0901 	mov.w	r9, #1
 800625e:	4623      	mov	r3, r4
 8006260:	469a      	mov	sl, r3
 8006262:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006266:	b10a      	cbz	r2, 800626c <_svfiprintf_r+0x60>
 8006268:	2a25      	cmp	r2, #37	@ 0x25
 800626a:	d1f9      	bne.n	8006260 <_svfiprintf_r+0x54>
 800626c:	ebba 0b04 	subs.w	fp, sl, r4
 8006270:	d00b      	beq.n	800628a <_svfiprintf_r+0x7e>
 8006272:	465b      	mov	r3, fp
 8006274:	4622      	mov	r2, r4
 8006276:	4629      	mov	r1, r5
 8006278:	4638      	mov	r0, r7
 800627a:	f7ff ff6b 	bl	8006154 <__ssputs_r>
 800627e:	3001      	adds	r0, #1
 8006280:	f000 80a7 	beq.w	80063d2 <_svfiprintf_r+0x1c6>
 8006284:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006286:	445a      	add	r2, fp
 8006288:	9209      	str	r2, [sp, #36]	@ 0x24
 800628a:	f89a 3000 	ldrb.w	r3, [sl]
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 809f 	beq.w	80063d2 <_svfiprintf_r+0x1c6>
 8006294:	2300      	movs	r3, #0
 8006296:	f04f 32ff 	mov.w	r2, #4294967295
 800629a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800629e:	f10a 0a01 	add.w	sl, sl, #1
 80062a2:	9304      	str	r3, [sp, #16]
 80062a4:	9307      	str	r3, [sp, #28]
 80062a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80062ac:	4654      	mov	r4, sl
 80062ae:	2205      	movs	r2, #5
 80062b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062b4:	484e      	ldr	r0, [pc, #312]	@ (80063f0 <_svfiprintf_r+0x1e4>)
 80062b6:	f7f9 ff93 	bl	80001e0 <memchr>
 80062ba:	9a04      	ldr	r2, [sp, #16]
 80062bc:	b9d8      	cbnz	r0, 80062f6 <_svfiprintf_r+0xea>
 80062be:	06d0      	lsls	r0, r2, #27
 80062c0:	bf44      	itt	mi
 80062c2:	2320      	movmi	r3, #32
 80062c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062c8:	0711      	lsls	r1, r2, #28
 80062ca:	bf44      	itt	mi
 80062cc:	232b      	movmi	r3, #43	@ 0x2b
 80062ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062d2:	f89a 3000 	ldrb.w	r3, [sl]
 80062d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80062d8:	d015      	beq.n	8006306 <_svfiprintf_r+0xfa>
 80062da:	9a07      	ldr	r2, [sp, #28]
 80062dc:	4654      	mov	r4, sl
 80062de:	2000      	movs	r0, #0
 80062e0:	f04f 0c0a 	mov.w	ip, #10
 80062e4:	4621      	mov	r1, r4
 80062e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062ea:	3b30      	subs	r3, #48	@ 0x30
 80062ec:	2b09      	cmp	r3, #9
 80062ee:	d94b      	bls.n	8006388 <_svfiprintf_r+0x17c>
 80062f0:	b1b0      	cbz	r0, 8006320 <_svfiprintf_r+0x114>
 80062f2:	9207      	str	r2, [sp, #28]
 80062f4:	e014      	b.n	8006320 <_svfiprintf_r+0x114>
 80062f6:	eba0 0308 	sub.w	r3, r0, r8
 80062fa:	fa09 f303 	lsl.w	r3, r9, r3
 80062fe:	4313      	orrs	r3, r2
 8006300:	9304      	str	r3, [sp, #16]
 8006302:	46a2      	mov	sl, r4
 8006304:	e7d2      	b.n	80062ac <_svfiprintf_r+0xa0>
 8006306:	9b03      	ldr	r3, [sp, #12]
 8006308:	1d19      	adds	r1, r3, #4
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	9103      	str	r1, [sp, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	bfbb      	ittet	lt
 8006312:	425b      	neglt	r3, r3
 8006314:	f042 0202 	orrlt.w	r2, r2, #2
 8006318:	9307      	strge	r3, [sp, #28]
 800631a:	9307      	strlt	r3, [sp, #28]
 800631c:	bfb8      	it	lt
 800631e:	9204      	strlt	r2, [sp, #16]
 8006320:	7823      	ldrb	r3, [r4, #0]
 8006322:	2b2e      	cmp	r3, #46	@ 0x2e
 8006324:	d10a      	bne.n	800633c <_svfiprintf_r+0x130>
 8006326:	7863      	ldrb	r3, [r4, #1]
 8006328:	2b2a      	cmp	r3, #42	@ 0x2a
 800632a:	d132      	bne.n	8006392 <_svfiprintf_r+0x186>
 800632c:	9b03      	ldr	r3, [sp, #12]
 800632e:	1d1a      	adds	r2, r3, #4
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	9203      	str	r2, [sp, #12]
 8006334:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006338:	3402      	adds	r4, #2
 800633a:	9305      	str	r3, [sp, #20]
 800633c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006400 <_svfiprintf_r+0x1f4>
 8006340:	7821      	ldrb	r1, [r4, #0]
 8006342:	2203      	movs	r2, #3
 8006344:	4650      	mov	r0, sl
 8006346:	f7f9 ff4b 	bl	80001e0 <memchr>
 800634a:	b138      	cbz	r0, 800635c <_svfiprintf_r+0x150>
 800634c:	9b04      	ldr	r3, [sp, #16]
 800634e:	eba0 000a 	sub.w	r0, r0, sl
 8006352:	2240      	movs	r2, #64	@ 0x40
 8006354:	4082      	lsls	r2, r0
 8006356:	4313      	orrs	r3, r2
 8006358:	3401      	adds	r4, #1
 800635a:	9304      	str	r3, [sp, #16]
 800635c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006360:	4824      	ldr	r0, [pc, #144]	@ (80063f4 <_svfiprintf_r+0x1e8>)
 8006362:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006366:	2206      	movs	r2, #6
 8006368:	f7f9 ff3a 	bl	80001e0 <memchr>
 800636c:	2800      	cmp	r0, #0
 800636e:	d036      	beq.n	80063de <_svfiprintf_r+0x1d2>
 8006370:	4b21      	ldr	r3, [pc, #132]	@ (80063f8 <_svfiprintf_r+0x1ec>)
 8006372:	bb1b      	cbnz	r3, 80063bc <_svfiprintf_r+0x1b0>
 8006374:	9b03      	ldr	r3, [sp, #12]
 8006376:	3307      	adds	r3, #7
 8006378:	f023 0307 	bic.w	r3, r3, #7
 800637c:	3308      	adds	r3, #8
 800637e:	9303      	str	r3, [sp, #12]
 8006380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006382:	4433      	add	r3, r6
 8006384:	9309      	str	r3, [sp, #36]	@ 0x24
 8006386:	e76a      	b.n	800625e <_svfiprintf_r+0x52>
 8006388:	fb0c 3202 	mla	r2, ip, r2, r3
 800638c:	460c      	mov	r4, r1
 800638e:	2001      	movs	r0, #1
 8006390:	e7a8      	b.n	80062e4 <_svfiprintf_r+0xd8>
 8006392:	2300      	movs	r3, #0
 8006394:	3401      	adds	r4, #1
 8006396:	9305      	str	r3, [sp, #20]
 8006398:	4619      	mov	r1, r3
 800639a:	f04f 0c0a 	mov.w	ip, #10
 800639e:	4620      	mov	r0, r4
 80063a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063a4:	3a30      	subs	r2, #48	@ 0x30
 80063a6:	2a09      	cmp	r2, #9
 80063a8:	d903      	bls.n	80063b2 <_svfiprintf_r+0x1a6>
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0c6      	beq.n	800633c <_svfiprintf_r+0x130>
 80063ae:	9105      	str	r1, [sp, #20]
 80063b0:	e7c4      	b.n	800633c <_svfiprintf_r+0x130>
 80063b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80063b6:	4604      	mov	r4, r0
 80063b8:	2301      	movs	r3, #1
 80063ba:	e7f0      	b.n	800639e <_svfiprintf_r+0x192>
 80063bc:	ab03      	add	r3, sp, #12
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	462a      	mov	r2, r5
 80063c2:	4b0e      	ldr	r3, [pc, #56]	@ (80063fc <_svfiprintf_r+0x1f0>)
 80063c4:	a904      	add	r1, sp, #16
 80063c6:	4638      	mov	r0, r7
 80063c8:	f3af 8000 	nop.w
 80063cc:	1c42      	adds	r2, r0, #1
 80063ce:	4606      	mov	r6, r0
 80063d0:	d1d6      	bne.n	8006380 <_svfiprintf_r+0x174>
 80063d2:	89ab      	ldrh	r3, [r5, #12]
 80063d4:	065b      	lsls	r3, r3, #25
 80063d6:	f53f af2d 	bmi.w	8006234 <_svfiprintf_r+0x28>
 80063da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063dc:	e72c      	b.n	8006238 <_svfiprintf_r+0x2c>
 80063de:	ab03      	add	r3, sp, #12
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	462a      	mov	r2, r5
 80063e4:	4b05      	ldr	r3, [pc, #20]	@ (80063fc <_svfiprintf_r+0x1f0>)
 80063e6:	a904      	add	r1, sp, #16
 80063e8:	4638      	mov	r0, r7
 80063ea:	f000 f879 	bl	80064e0 <_printf_i>
 80063ee:	e7ed      	b.n	80063cc <_svfiprintf_r+0x1c0>
 80063f0:	080068d8 	.word	0x080068d8
 80063f4:	080068e2 	.word	0x080068e2
 80063f8:	00000000 	.word	0x00000000
 80063fc:	08006155 	.word	0x08006155
 8006400:	080068de 	.word	0x080068de

08006404 <_printf_common>:
 8006404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006408:	4616      	mov	r6, r2
 800640a:	4698      	mov	r8, r3
 800640c:	688a      	ldr	r2, [r1, #8]
 800640e:	690b      	ldr	r3, [r1, #16]
 8006410:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006414:	4293      	cmp	r3, r2
 8006416:	bfb8      	it	lt
 8006418:	4613      	movlt	r3, r2
 800641a:	6033      	str	r3, [r6, #0]
 800641c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006420:	4607      	mov	r7, r0
 8006422:	460c      	mov	r4, r1
 8006424:	b10a      	cbz	r2, 800642a <_printf_common+0x26>
 8006426:	3301      	adds	r3, #1
 8006428:	6033      	str	r3, [r6, #0]
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	0699      	lsls	r1, r3, #26
 800642e:	bf42      	ittt	mi
 8006430:	6833      	ldrmi	r3, [r6, #0]
 8006432:	3302      	addmi	r3, #2
 8006434:	6033      	strmi	r3, [r6, #0]
 8006436:	6825      	ldr	r5, [r4, #0]
 8006438:	f015 0506 	ands.w	r5, r5, #6
 800643c:	d106      	bne.n	800644c <_printf_common+0x48>
 800643e:	f104 0a19 	add.w	sl, r4, #25
 8006442:	68e3      	ldr	r3, [r4, #12]
 8006444:	6832      	ldr	r2, [r6, #0]
 8006446:	1a9b      	subs	r3, r3, r2
 8006448:	42ab      	cmp	r3, r5
 800644a:	dc26      	bgt.n	800649a <_printf_common+0x96>
 800644c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006450:	6822      	ldr	r2, [r4, #0]
 8006452:	3b00      	subs	r3, #0
 8006454:	bf18      	it	ne
 8006456:	2301      	movne	r3, #1
 8006458:	0692      	lsls	r2, r2, #26
 800645a:	d42b      	bmi.n	80064b4 <_printf_common+0xb0>
 800645c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006460:	4641      	mov	r1, r8
 8006462:	4638      	mov	r0, r7
 8006464:	47c8      	blx	r9
 8006466:	3001      	adds	r0, #1
 8006468:	d01e      	beq.n	80064a8 <_printf_common+0xa4>
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	6922      	ldr	r2, [r4, #16]
 800646e:	f003 0306 	and.w	r3, r3, #6
 8006472:	2b04      	cmp	r3, #4
 8006474:	bf02      	ittt	eq
 8006476:	68e5      	ldreq	r5, [r4, #12]
 8006478:	6833      	ldreq	r3, [r6, #0]
 800647a:	1aed      	subeq	r5, r5, r3
 800647c:	68a3      	ldr	r3, [r4, #8]
 800647e:	bf0c      	ite	eq
 8006480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006484:	2500      	movne	r5, #0
 8006486:	4293      	cmp	r3, r2
 8006488:	bfc4      	itt	gt
 800648a:	1a9b      	subgt	r3, r3, r2
 800648c:	18ed      	addgt	r5, r5, r3
 800648e:	2600      	movs	r6, #0
 8006490:	341a      	adds	r4, #26
 8006492:	42b5      	cmp	r5, r6
 8006494:	d11a      	bne.n	80064cc <_printf_common+0xc8>
 8006496:	2000      	movs	r0, #0
 8006498:	e008      	b.n	80064ac <_printf_common+0xa8>
 800649a:	2301      	movs	r3, #1
 800649c:	4652      	mov	r2, sl
 800649e:	4641      	mov	r1, r8
 80064a0:	4638      	mov	r0, r7
 80064a2:	47c8      	blx	r9
 80064a4:	3001      	adds	r0, #1
 80064a6:	d103      	bne.n	80064b0 <_printf_common+0xac>
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b0:	3501      	adds	r5, #1
 80064b2:	e7c6      	b.n	8006442 <_printf_common+0x3e>
 80064b4:	18e1      	adds	r1, r4, r3
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	2030      	movs	r0, #48	@ 0x30
 80064ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064be:	4422      	add	r2, r4
 80064c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80064c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80064c8:	3302      	adds	r3, #2
 80064ca:	e7c7      	b.n	800645c <_printf_common+0x58>
 80064cc:	2301      	movs	r3, #1
 80064ce:	4622      	mov	r2, r4
 80064d0:	4641      	mov	r1, r8
 80064d2:	4638      	mov	r0, r7
 80064d4:	47c8      	blx	r9
 80064d6:	3001      	adds	r0, #1
 80064d8:	d0e6      	beq.n	80064a8 <_printf_common+0xa4>
 80064da:	3601      	adds	r6, #1
 80064dc:	e7d9      	b.n	8006492 <_printf_common+0x8e>
	...

080064e0 <_printf_i>:
 80064e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064e4:	7e0f      	ldrb	r7, [r1, #24]
 80064e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064e8:	2f78      	cmp	r7, #120	@ 0x78
 80064ea:	4691      	mov	r9, r2
 80064ec:	4680      	mov	r8, r0
 80064ee:	460c      	mov	r4, r1
 80064f0:	469a      	mov	sl, r3
 80064f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064f6:	d807      	bhi.n	8006508 <_printf_i+0x28>
 80064f8:	2f62      	cmp	r7, #98	@ 0x62
 80064fa:	d80a      	bhi.n	8006512 <_printf_i+0x32>
 80064fc:	2f00      	cmp	r7, #0
 80064fe:	f000 80d2 	beq.w	80066a6 <_printf_i+0x1c6>
 8006502:	2f58      	cmp	r7, #88	@ 0x58
 8006504:	f000 80b9 	beq.w	800667a <_printf_i+0x19a>
 8006508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800650c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006510:	e03a      	b.n	8006588 <_printf_i+0xa8>
 8006512:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006516:	2b15      	cmp	r3, #21
 8006518:	d8f6      	bhi.n	8006508 <_printf_i+0x28>
 800651a:	a101      	add	r1, pc, #4	@ (adr r1, 8006520 <_printf_i+0x40>)
 800651c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006520:	08006579 	.word	0x08006579
 8006524:	0800658d 	.word	0x0800658d
 8006528:	08006509 	.word	0x08006509
 800652c:	08006509 	.word	0x08006509
 8006530:	08006509 	.word	0x08006509
 8006534:	08006509 	.word	0x08006509
 8006538:	0800658d 	.word	0x0800658d
 800653c:	08006509 	.word	0x08006509
 8006540:	08006509 	.word	0x08006509
 8006544:	08006509 	.word	0x08006509
 8006548:	08006509 	.word	0x08006509
 800654c:	0800668d 	.word	0x0800668d
 8006550:	080065b7 	.word	0x080065b7
 8006554:	08006647 	.word	0x08006647
 8006558:	08006509 	.word	0x08006509
 800655c:	08006509 	.word	0x08006509
 8006560:	080066af 	.word	0x080066af
 8006564:	08006509 	.word	0x08006509
 8006568:	080065b7 	.word	0x080065b7
 800656c:	08006509 	.word	0x08006509
 8006570:	08006509 	.word	0x08006509
 8006574:	0800664f 	.word	0x0800664f
 8006578:	6833      	ldr	r3, [r6, #0]
 800657a:	1d1a      	adds	r2, r3, #4
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6032      	str	r2, [r6, #0]
 8006580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006584:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006588:	2301      	movs	r3, #1
 800658a:	e09d      	b.n	80066c8 <_printf_i+0x1e8>
 800658c:	6833      	ldr	r3, [r6, #0]
 800658e:	6820      	ldr	r0, [r4, #0]
 8006590:	1d19      	adds	r1, r3, #4
 8006592:	6031      	str	r1, [r6, #0]
 8006594:	0606      	lsls	r6, r0, #24
 8006596:	d501      	bpl.n	800659c <_printf_i+0xbc>
 8006598:	681d      	ldr	r5, [r3, #0]
 800659a:	e003      	b.n	80065a4 <_printf_i+0xc4>
 800659c:	0645      	lsls	r5, r0, #25
 800659e:	d5fb      	bpl.n	8006598 <_printf_i+0xb8>
 80065a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80065a4:	2d00      	cmp	r5, #0
 80065a6:	da03      	bge.n	80065b0 <_printf_i+0xd0>
 80065a8:	232d      	movs	r3, #45	@ 0x2d
 80065aa:	426d      	negs	r5, r5
 80065ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065b0:	4859      	ldr	r0, [pc, #356]	@ (8006718 <_printf_i+0x238>)
 80065b2:	230a      	movs	r3, #10
 80065b4:	e011      	b.n	80065da <_printf_i+0xfa>
 80065b6:	6821      	ldr	r1, [r4, #0]
 80065b8:	6833      	ldr	r3, [r6, #0]
 80065ba:	0608      	lsls	r0, r1, #24
 80065bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80065c0:	d402      	bmi.n	80065c8 <_printf_i+0xe8>
 80065c2:	0649      	lsls	r1, r1, #25
 80065c4:	bf48      	it	mi
 80065c6:	b2ad      	uxthmi	r5, r5
 80065c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80065ca:	4853      	ldr	r0, [pc, #332]	@ (8006718 <_printf_i+0x238>)
 80065cc:	6033      	str	r3, [r6, #0]
 80065ce:	bf14      	ite	ne
 80065d0:	230a      	movne	r3, #10
 80065d2:	2308      	moveq	r3, #8
 80065d4:	2100      	movs	r1, #0
 80065d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065da:	6866      	ldr	r6, [r4, #4]
 80065dc:	60a6      	str	r6, [r4, #8]
 80065de:	2e00      	cmp	r6, #0
 80065e0:	bfa2      	ittt	ge
 80065e2:	6821      	ldrge	r1, [r4, #0]
 80065e4:	f021 0104 	bicge.w	r1, r1, #4
 80065e8:	6021      	strge	r1, [r4, #0]
 80065ea:	b90d      	cbnz	r5, 80065f0 <_printf_i+0x110>
 80065ec:	2e00      	cmp	r6, #0
 80065ee:	d04b      	beq.n	8006688 <_printf_i+0x1a8>
 80065f0:	4616      	mov	r6, r2
 80065f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80065f6:	fb03 5711 	mls	r7, r3, r1, r5
 80065fa:	5dc7      	ldrb	r7, [r0, r7]
 80065fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006600:	462f      	mov	r7, r5
 8006602:	42bb      	cmp	r3, r7
 8006604:	460d      	mov	r5, r1
 8006606:	d9f4      	bls.n	80065f2 <_printf_i+0x112>
 8006608:	2b08      	cmp	r3, #8
 800660a:	d10b      	bne.n	8006624 <_printf_i+0x144>
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	07df      	lsls	r7, r3, #31
 8006610:	d508      	bpl.n	8006624 <_printf_i+0x144>
 8006612:	6923      	ldr	r3, [r4, #16]
 8006614:	6861      	ldr	r1, [r4, #4]
 8006616:	4299      	cmp	r1, r3
 8006618:	bfde      	ittt	le
 800661a:	2330      	movle	r3, #48	@ 0x30
 800661c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006620:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006624:	1b92      	subs	r2, r2, r6
 8006626:	6122      	str	r2, [r4, #16]
 8006628:	f8cd a000 	str.w	sl, [sp]
 800662c:	464b      	mov	r3, r9
 800662e:	aa03      	add	r2, sp, #12
 8006630:	4621      	mov	r1, r4
 8006632:	4640      	mov	r0, r8
 8006634:	f7ff fee6 	bl	8006404 <_printf_common>
 8006638:	3001      	adds	r0, #1
 800663a:	d14a      	bne.n	80066d2 <_printf_i+0x1f2>
 800663c:	f04f 30ff 	mov.w	r0, #4294967295
 8006640:	b004      	add	sp, #16
 8006642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	f043 0320 	orr.w	r3, r3, #32
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	4833      	ldr	r0, [pc, #204]	@ (800671c <_printf_i+0x23c>)
 8006650:	2778      	movs	r7, #120	@ 0x78
 8006652:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	6831      	ldr	r1, [r6, #0]
 800665a:	061f      	lsls	r7, r3, #24
 800665c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006660:	d402      	bmi.n	8006668 <_printf_i+0x188>
 8006662:	065f      	lsls	r7, r3, #25
 8006664:	bf48      	it	mi
 8006666:	b2ad      	uxthmi	r5, r5
 8006668:	6031      	str	r1, [r6, #0]
 800666a:	07d9      	lsls	r1, r3, #31
 800666c:	bf44      	itt	mi
 800666e:	f043 0320 	orrmi.w	r3, r3, #32
 8006672:	6023      	strmi	r3, [r4, #0]
 8006674:	b11d      	cbz	r5, 800667e <_printf_i+0x19e>
 8006676:	2310      	movs	r3, #16
 8006678:	e7ac      	b.n	80065d4 <_printf_i+0xf4>
 800667a:	4827      	ldr	r0, [pc, #156]	@ (8006718 <_printf_i+0x238>)
 800667c:	e7e9      	b.n	8006652 <_printf_i+0x172>
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	f023 0320 	bic.w	r3, r3, #32
 8006684:	6023      	str	r3, [r4, #0]
 8006686:	e7f6      	b.n	8006676 <_printf_i+0x196>
 8006688:	4616      	mov	r6, r2
 800668a:	e7bd      	b.n	8006608 <_printf_i+0x128>
 800668c:	6833      	ldr	r3, [r6, #0]
 800668e:	6825      	ldr	r5, [r4, #0]
 8006690:	6961      	ldr	r1, [r4, #20]
 8006692:	1d18      	adds	r0, r3, #4
 8006694:	6030      	str	r0, [r6, #0]
 8006696:	062e      	lsls	r6, r5, #24
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	d501      	bpl.n	80066a0 <_printf_i+0x1c0>
 800669c:	6019      	str	r1, [r3, #0]
 800669e:	e002      	b.n	80066a6 <_printf_i+0x1c6>
 80066a0:	0668      	lsls	r0, r5, #25
 80066a2:	d5fb      	bpl.n	800669c <_printf_i+0x1bc>
 80066a4:	8019      	strh	r1, [r3, #0]
 80066a6:	2300      	movs	r3, #0
 80066a8:	6123      	str	r3, [r4, #16]
 80066aa:	4616      	mov	r6, r2
 80066ac:	e7bc      	b.n	8006628 <_printf_i+0x148>
 80066ae:	6833      	ldr	r3, [r6, #0]
 80066b0:	1d1a      	adds	r2, r3, #4
 80066b2:	6032      	str	r2, [r6, #0]
 80066b4:	681e      	ldr	r6, [r3, #0]
 80066b6:	6862      	ldr	r2, [r4, #4]
 80066b8:	2100      	movs	r1, #0
 80066ba:	4630      	mov	r0, r6
 80066bc:	f7f9 fd90 	bl	80001e0 <memchr>
 80066c0:	b108      	cbz	r0, 80066c6 <_printf_i+0x1e6>
 80066c2:	1b80      	subs	r0, r0, r6
 80066c4:	6060      	str	r0, [r4, #4]
 80066c6:	6863      	ldr	r3, [r4, #4]
 80066c8:	6123      	str	r3, [r4, #16]
 80066ca:	2300      	movs	r3, #0
 80066cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066d0:	e7aa      	b.n	8006628 <_printf_i+0x148>
 80066d2:	6923      	ldr	r3, [r4, #16]
 80066d4:	4632      	mov	r2, r6
 80066d6:	4649      	mov	r1, r9
 80066d8:	4640      	mov	r0, r8
 80066da:	47d0      	blx	sl
 80066dc:	3001      	adds	r0, #1
 80066de:	d0ad      	beq.n	800663c <_printf_i+0x15c>
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	079b      	lsls	r3, r3, #30
 80066e4:	d413      	bmi.n	800670e <_printf_i+0x22e>
 80066e6:	68e0      	ldr	r0, [r4, #12]
 80066e8:	9b03      	ldr	r3, [sp, #12]
 80066ea:	4298      	cmp	r0, r3
 80066ec:	bfb8      	it	lt
 80066ee:	4618      	movlt	r0, r3
 80066f0:	e7a6      	b.n	8006640 <_printf_i+0x160>
 80066f2:	2301      	movs	r3, #1
 80066f4:	4632      	mov	r2, r6
 80066f6:	4649      	mov	r1, r9
 80066f8:	4640      	mov	r0, r8
 80066fa:	47d0      	blx	sl
 80066fc:	3001      	adds	r0, #1
 80066fe:	d09d      	beq.n	800663c <_printf_i+0x15c>
 8006700:	3501      	adds	r5, #1
 8006702:	68e3      	ldr	r3, [r4, #12]
 8006704:	9903      	ldr	r1, [sp, #12]
 8006706:	1a5b      	subs	r3, r3, r1
 8006708:	42ab      	cmp	r3, r5
 800670a:	dcf2      	bgt.n	80066f2 <_printf_i+0x212>
 800670c:	e7eb      	b.n	80066e6 <_printf_i+0x206>
 800670e:	2500      	movs	r5, #0
 8006710:	f104 0619 	add.w	r6, r4, #25
 8006714:	e7f5      	b.n	8006702 <_printf_i+0x222>
 8006716:	bf00      	nop
 8006718:	080068e9 	.word	0x080068e9
 800671c:	080068fa 	.word	0x080068fa

08006720 <memmove>:
 8006720:	4288      	cmp	r0, r1
 8006722:	b510      	push	{r4, lr}
 8006724:	eb01 0402 	add.w	r4, r1, r2
 8006728:	d902      	bls.n	8006730 <memmove+0x10>
 800672a:	4284      	cmp	r4, r0
 800672c:	4623      	mov	r3, r4
 800672e:	d807      	bhi.n	8006740 <memmove+0x20>
 8006730:	1e43      	subs	r3, r0, #1
 8006732:	42a1      	cmp	r1, r4
 8006734:	d008      	beq.n	8006748 <memmove+0x28>
 8006736:	f811 2b01 	ldrb.w	r2, [r1], #1
 800673a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800673e:	e7f8      	b.n	8006732 <memmove+0x12>
 8006740:	4402      	add	r2, r0
 8006742:	4601      	mov	r1, r0
 8006744:	428a      	cmp	r2, r1
 8006746:	d100      	bne.n	800674a <memmove+0x2a>
 8006748:	bd10      	pop	{r4, pc}
 800674a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800674e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006752:	e7f7      	b.n	8006744 <memmove+0x24>

08006754 <_sbrk_r>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	4d06      	ldr	r5, [pc, #24]	@ (8006770 <_sbrk_r+0x1c>)
 8006758:	2300      	movs	r3, #0
 800675a:	4604      	mov	r4, r0
 800675c:	4608      	mov	r0, r1
 800675e:	602b      	str	r3, [r5, #0]
 8006760:	f7fa ff40 	bl	80015e4 <_sbrk>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d102      	bne.n	800676e <_sbrk_r+0x1a>
 8006768:	682b      	ldr	r3, [r5, #0]
 800676a:	b103      	cbz	r3, 800676e <_sbrk_r+0x1a>
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	20004750 	.word	0x20004750

08006774 <_realloc_r>:
 8006774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006778:	4680      	mov	r8, r0
 800677a:	4615      	mov	r5, r2
 800677c:	460c      	mov	r4, r1
 800677e:	b921      	cbnz	r1, 800678a <_realloc_r+0x16>
 8006780:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006784:	4611      	mov	r1, r2
 8006786:	f7ff bc59 	b.w	800603c <_malloc_r>
 800678a:	b92a      	cbnz	r2, 8006798 <_realloc_r+0x24>
 800678c:	f7ff fbea 	bl	8005f64 <_free_r>
 8006790:	2400      	movs	r4, #0
 8006792:	4620      	mov	r0, r4
 8006794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006798:	f000 f81a 	bl	80067d0 <_malloc_usable_size_r>
 800679c:	4285      	cmp	r5, r0
 800679e:	4606      	mov	r6, r0
 80067a0:	d802      	bhi.n	80067a8 <_realloc_r+0x34>
 80067a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80067a6:	d8f4      	bhi.n	8006792 <_realloc_r+0x1e>
 80067a8:	4629      	mov	r1, r5
 80067aa:	4640      	mov	r0, r8
 80067ac:	f7ff fc46 	bl	800603c <_malloc_r>
 80067b0:	4607      	mov	r7, r0
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d0ec      	beq.n	8006790 <_realloc_r+0x1c>
 80067b6:	42b5      	cmp	r5, r6
 80067b8:	462a      	mov	r2, r5
 80067ba:	4621      	mov	r1, r4
 80067bc:	bf28      	it	cs
 80067be:	4632      	movcs	r2, r6
 80067c0:	f7ff fbc2 	bl	8005f48 <memcpy>
 80067c4:	4621      	mov	r1, r4
 80067c6:	4640      	mov	r0, r8
 80067c8:	f7ff fbcc 	bl	8005f64 <_free_r>
 80067cc:	463c      	mov	r4, r7
 80067ce:	e7e0      	b.n	8006792 <_realloc_r+0x1e>

080067d0 <_malloc_usable_size_r>:
 80067d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067d4:	1f18      	subs	r0, r3, #4
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	bfbc      	itt	lt
 80067da:	580b      	ldrlt	r3, [r1, r0]
 80067dc:	18c0      	addlt	r0, r0, r3
 80067de:	4770      	bx	lr

080067e0 <_init>:
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e2:	bf00      	nop
 80067e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e6:	bc08      	pop	{r3}
 80067e8:	469e      	mov	lr, r3
 80067ea:	4770      	bx	lr

080067ec <_fini>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	bf00      	nop
 80067f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067f2:	bc08      	pop	{r3}
 80067f4:	469e      	mov	lr, r3
 80067f6:	4770      	bx	lr
